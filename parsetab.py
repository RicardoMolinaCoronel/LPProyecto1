
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AMPERSAND AND APOSTROPHE ASSERT ASYNC AWAIT BOOL BOOLEAN BREAK CASE CATCH CLASS CLOSE COLON COMMA COMMENT COMMENTMULTI CONST CONTINUE DEFAULT DEFERRED DIVISION DO DOLLAR DOT DOUBLE DOUBLEQUAL DOUBQUOTMARK DYNAMIC ELSE ENUM EQUAL EXIT EXMARK EXPORT EXTENSION EXTERNAL FACTORY FALSE FILE FINAL FLOAT FOR FUNCTION GET GREATERTHAN IDENTIFIER IF IMPLEMENTS IMPORT IN INT INTEGER IS ITERABLE KEYS LCURLYBRACKET LESSTHAN LIBRARY LIST LPAREN LSQUAREBRACKET MAIN MAP METHOD MINUS NOTEQUAL NULL OF OPENWRITE OR PIPELINE PLUS PRINT RCURLYBRACKET READLINESYNC REQUIRED REST RETURN RPAREN RSQUAREBRACKET SEMICOLON SET STACK STR STRING TIMES TRUE TRY VALUES VAR VOID WHILE WRITEclass : class_content_repeat\n              | declarationMain class_content_repeat\n              | class_content_repeat declarationMain\n              | declarationMain\n    class_content : map\n    class_content : ifElseStatement\n    class_content : function_lambda\n    class_content : declarationExpression\n    class_content : forStatement\n    class_content : while\n    class_content : stack\n    class_content : inferedReturnFunction\n    class_content : expression SEMICOLON\n    class_content : print\n    class_content_repeat : class_content\n                             | class_content_repeat class_content\n    declarationMain : datatypeOpt MAIN LPAREN RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET\n    datatypeOpt : datatype\n                    | empty\n    class_content : semanticbool\n    class_content : semanticlist\n    class_content : asign\n    class_content : assert\n    map : map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLONmap_identifier : MAP\n                       | MAP map_type_specified\n    map_type_specified : LESSTHAN datatype COMMA datatype GREATERTHANdatatype : INT\n                   | STRING\n                   | BOOL\n                   | DOUBLE\n                   | DYNAMIC\n                   | VOID\n                   | map_identifier\n                 | VAR\n    returnType : INT\n                   | STRING\n                   | BOOL\n                   | DOUBLE\n                   | DYNAMIC\n                   | VOID\n                   | map_identifier\n    print : PRINT LPAREN value RPAREN SEMICOLON\n    empty :map_content : map_pairs\n                    | empty\n    map_pair : map_key COLON map_valuemap_pairs : map_pair\n                  | map_pair COMMA map_pairs\n    map_key : value\n    map_value : value\n    ifElseStatement : ifStatement\n                        | ifStatement elifStatement_repeat\n    elifStatement_repeat : elifStatement\n                             | elifStatement elifStatement_repeat\n    ifStatement : IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET\n    elifStatement : ELSE ifStatement\n    elifStatement : ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET\n    forStatement : FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET\n    stack : FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON\n    while : WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET\n    stack : FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON\n            | FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON\n    inferedReturnFunction : IDENTIFIER LPAREN  function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET\n    value : INTEGER\n                | FLOAT\n                | STR\n                | BOOLEAN\n                | IDENTIFIER\n                | booleanOp\n                | propertiesAccess\n\n\n    opt_value : value\n                  | empty\n    deniable_values : IDENTIFIER\n                        | BOOLEAN\n                        | booleanOp\n    negation_values : deniable_values\n                       | EXMARK deniable_values\n    condition_values : negation_values\n                        | INTEGER\n                        | FLOAT\n                        | STR\n                        | NULL\n    condition_operator : DOUBLEQUAL\n                           | LESSTHAN\n                           | GREATERTHAN\n                           | LESSTHAN EQUAL\n                           | GREATERTHAN EQUAL\n                           | EXMARK EQUAL\n    number : FLOAT\n               | INTEGER\n    condition : IDENTIFIER condition_operator condition_values\n                  | EXMARK IDENTIFIER condition_operator condition_values\n                  | BOOLEAN condition_operator BOOLEAN\n                  | number condition_operator number\n                  | STR condition_operator STR\n                  | booleanOp condition_operator booleanOp\n                  | negation_values\n    conditions : condition\n                   | condition condition_connector conditions\n    condition_connector : AND\n                            | OR\n                            | AMPERSAND AMPERSAND\n                            | PIPELINE PIPELINE\n    function_lambda : datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON\n     function_argument : datatype IDENTIFIER\n                          | empty\n    function_arguments_repeat : function_argument\n                                  | function_argument COMMA function_arguments_repeat\n     optFunction_argumentsExpression : LCURLYBRACKET optFunction_arguments RCURLYBRACKET\n                                         | empty\n    optFunction_argument : REQUIRED datatype IDENTIFIER\n\n    optFunction_arguments : optFunction_argument\n                              | optFunction_argument COMMA optFunction_arguments\n    expression : value\n                    | value operatorExpression expression\n                    | value operatorExpression operatorExpression\n    asign : IDENTIFIER EQUAL expression SEMICOLON\n              | IDENTIFIER operatorExpression EQUAL expression SEMICOLON\n\n     assert : ASSERT LPAREN conditions RPAREN SEMICOLON\n    operableTypes : IDENTIFIER\n                      | number\n    operatorExpression : PLUS\n                           | MINUS\n                           | TIMES\n                           | DIVISION\n                           | REST\n    declarationExpression : datatype repeatDeclaration SEMICOLON\n    repeatDeclaration : IDENTIFIER\n                          | IDENTIFIER COMMA repeatDeclaration\n    declarationExpression : datatype IDENTIFIER EQUAL expression SEMICOLON\n    declarationExpression : datatype IDENTIFIER EQUAL LPAREN datatype RPAREN IDENTIFIER SEMICOLON\n    declarationExpression : FINAL IDENTIFIER EQUAL expression SEMICOLON\n     semanticbool : BOOL IDENTIFIER EQUAL conditions SEMICOLON\n    booleanOp : TRUE\n                | FALSE\n     booloperation : booleanOp condition_connector booleanOp\n                    | IDENTIFIER condition_connector booleanOp\n                    | IDENTIFIER condition_connector IDENTIFIER\n                    | booleanOp condition_connector IDENTIFIER\n     booloperations : booloperation\n                      | booloperation condition_connector booloperations\n     semanticlist : LIST LESSTHAN DYNAMIC GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON\n                    | LIST LESSTHAN  INT GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistint RSQUAREBRACKET SEMICOLON\n                    | LIST LESSTHAN  STRING GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insideliststr RSQUAREBRACKET SEMICOLON\n                    | LIST LESSTHAN  BOOL GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistbool RSQUAREBRACKET SEMICOLON\n                    | LIST LESSTHAN  DOUBLE GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistdouble RSQUAREBRACKET SEMICOLON\n     insidelist : value\n                    | value COMMA insidelist\n     insidelistint : INTEGER\n                    | INTEGER COMMA insidelistint\n     insideliststr : STR\n                    | STR COMMA insideliststr\n     insidelistbool : booleanOp\n                    | booleanOp COMMA insidelistbool\n     insidelistdouble : FLOAT\n                    | FLOAT COMMA insidelistdouble\n    declarationExpression : STRING IDENTIFIER EQUAL expressionString SEMICOLON\n                              | STRING IDENTIFIER SEMICOLON\n    expressionString : STR\n                          | STR operatorExpressionString expressionString\n     operatorExpressionString : PLUS\n    declarationExpression : INT IDENTIFIER EQUAL expressionInteger SEMICOLON\n                              | INT IDENTIFIER SEMICOLON\n\n    expressionInteger : number\n                          | number operatorExpression expressionInteger\n     expressionInteger : IDENTIFIER\n                         | IDENTIFIER operatorExpression expressionInteger\n    properties : KEYS\n                   | VALUES\n      propertiesAccess : IDENTIFIER DOT properties\n    '
    
_lr_action_items = {'FINAL':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,73,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[25,25,25,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,25,-13,-53,-54,113,-128,-55,-57,25,-159,-164,-118,25,25,-131,-119,-58,-133,-158,-163,25,-43,-134,-120,25,25,25,25,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'STRING':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,78,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[26,26,26,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,26,-13,94,-53,-54,26,132,94,94,-128,-55,-57,26,-159,-164,94,94,-118,26,94,26,-131,-119,-58,-133,94,-158,-163,26,-43,-134,-120,26,26,94,26,26,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'INT':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,78,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[27,27,27,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,27,-13,93,-53,-54,27,131,93,93,-128,-55,-57,27,-159,-164,93,93,-118,27,93,27,-131,-119,-58,-133,93,-158,-163,27,-43,-134,-120,27,27,93,27,27,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'FOR':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[28,28,28,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,28,-13,-53,-54,-128,-55,-57,28,-159,-164,-118,28,28,-131,-119,-58,-133,-158,-163,28,-43,-134,-120,28,28,28,28,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'WHILE':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[29,29,29,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,29,-13,-53,-54,-128,-55,-57,29,-159,-164,-118,29,29,-131,-119,-58,-133,-158,-163,29,-43,-134,-120,29,29,29,29,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'IDENTIFIER':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,20,22,24,25,26,27,32,34,35,37,38,39,50,51,52,54,59,62,63,64,65,66,67,68,74,75,76,79,80,82,85,86,87,91,93,94,95,96,99,103,104,105,106,108,109,110,112,113,117,129,144,148,150,158,162,163,164,167,168,169,170,182,183,184,185,186,190,194,204,205,206,209,212,213,214,216,217,219,220,228,229,230,231,232,237,238,244,246,247,252,254,255,256,262,263,270,271,272,276,278,284,286,287,292,293,296,298,312,320,329,331,332,333,334,336,338,340,342,344,],[23,23,23,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,55,57,-52,70,71,72,77,-32,-31,-33,-35,-25,-16,23,55,-13,97,-123,-124,-125,-126,-127,-53,-54,116,97,97,116,-26,116,97,142,-128,147,-28,-29,-30,-34,97,-55,-57,23,97,-159,155,-164,159,160,172,116,97,-118,23,116,116,-101,-102,221,-84,-85,-86,239,240,241,242,243,23,-131,-119,-58,-133,-158,155,-163,155,97,23,-103,-104,221,-87,-88,-89,221,-43,-134,-120,23,23,277,97,97,97,97,23,-27,23,-17,295,-24,299,-61,97,-56,97,-132,97,-64,97,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'PRINT':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[31,31,31,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,31,-13,-53,-54,-128,-55,-57,31,-159,-164,-118,31,31,-131,-119,-58,-133,-158,-163,31,-43,-134,-120,31,31,31,31,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'BOOL':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,78,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[32,32,32,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,32,-13,95,-53,-54,95,133,95,95,-128,-55,-57,32,-159,-164,95,95,-118,32,95,32,-131,-119,-58,-133,95,-158,-163,32,-43,-134,-120,32,32,95,32,32,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'LIST':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[33,33,33,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,33,-13,-53,-54,-128,-55,-57,33,-159,-164,-118,33,33,-131,-119,-58,-133,-158,-163,33,-43,-134,-120,33,33,33,33,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'ASSERT':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[36,36,36,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,36,-13,-53,-54,-128,-55,-57,36,-159,-164,-118,36,36,-131,-119,-58,-133,-158,-163,36,-43,-134,-120,36,36,36,36,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'DOUBLE':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,78,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[35,35,35,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,35,-13,35,-53,-54,35,134,35,35,-128,-55,-57,35,-159,-164,35,35,-118,35,35,35,-131,-119,-58,-133,35,-158,-163,35,-43,-134,-120,35,35,35,35,35,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'DYNAMIC':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,78,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[34,34,34,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,34,-13,34,-53,-54,34,130,34,34,-128,-55,-57,34,-159,-164,34,34,-118,34,34,34,-131,-119,-58,-133,34,-158,-163,34,-43,-134,-120,34,34,34,34,34,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'VOID':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[37,37,37,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,37,-13,37,-53,-54,37,37,37,-128,-55,-57,37,-159,-164,37,37,-118,37,37,37,-131,-119,-58,-133,37,-158,-163,37,-43,-134,-120,37,37,37,37,37,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'VAR':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[38,38,38,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,38,-13,38,-53,-54,38,38,38,-128,-55,-57,38,-159,-164,38,38,-118,38,38,38,-131,-119,-58,-133,38,-158,-163,38,-43,-134,-120,38,38,38,38,38,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'MAIN':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,24,26,27,32,34,35,37,38,39,50,54,67,68,80,87,103,104,108,110,148,194,204,205,206,209,213,237,238,244,270,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[-44,-44,-15,53,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-18,-19,-34,-52,-29,-28,-30,-32,-31,-33,-35,-25,-16,-13,-53,-54,-26,-128,-55,-57,-159,-164,-118,-131,-119,-58,-133,-158,-163,-43,-134,-120,-27,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'MAP':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,58,67,68,73,81,84,87,103,104,105,108,110,141,146,148,150,188,190,194,204,205,206,207,209,213,217,237,238,244,246,247,251,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[39,39,39,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,39,-13,39,-53,-54,39,39,39,-128,-55,-57,39,-159,-164,39,39,-118,39,39,39,-131,-119,-58,-133,39,-158,-163,39,-43,-134,-120,39,39,39,39,39,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'IF':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,67,68,69,87,103,104,105,108,110,148,150,190,194,204,205,206,209,213,217,237,238,244,246,247,263,271,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[40,40,40,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,40,-13,-53,-54,40,-128,-55,-57,40,-159,-164,-118,40,40,-131,-119,-58,-133,-158,-163,40,-43,-134,-120,40,40,40,40,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'INTEGER':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,108,109,110,129,144,148,150,158,162,163,164,167,168,169,170,177,190,194,204,205,206,209,212,213,214,216,217,219,220,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,288,292,293,296,298,312,320,322,329,331,332,333,334,336,338,340,342,344,],[41,41,41,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,41,-13,41,-123,-124,-125,-126,-127,-53,-54,124,41,41,124,124,41,-128,41,-55,-57,41,41,-159,124,-164,124,41,-118,41,124,124,-101,-102,224,-84,-85,-86,124,41,-131,-119,-58,-133,-158,124,-163,124,41,41,-103,-104,-87,-88,-89,224,-43,-134,-120,41,41,41,41,41,41,41,41,-17,-24,-61,41,304,-56,41,-132,41,-64,41,304,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'FLOAT':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,108,109,110,129,144,148,150,158,162,163,164,167,168,169,170,177,190,194,204,205,206,209,212,213,214,216,217,219,220,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,291,292,293,296,298,312,320,328,329,331,332,333,334,336,338,340,342,344,],[42,42,42,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,42,-13,42,-123,-124,-125,-126,-127,-53,-54,123,42,42,123,123,42,-128,42,-55,-57,42,42,-159,123,-164,123,42,-118,42,123,123,-101,-102,225,-84,-85,-86,123,42,-131,-119,-58,-133,-158,123,-163,123,42,42,-103,-104,-87,-88,-89,225,-43,-134,-120,42,42,42,42,42,42,42,42,-17,-24,-61,42,310,-56,42,-132,42,-64,42,310,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'STR':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,107,108,110,129,144,148,150,158,162,163,164,167,168,169,170,178,190,194,204,205,206,209,210,211,213,216,217,219,220,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,289,292,293,296,298,312,320,324,329,331,332,333,334,336,338,340,342,344,],[43,43,43,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,43,-13,43,-123,-124,-125,-126,-127,-53,-54,120,43,43,120,120,43,-128,43,-55,-57,43,43,154,-159,-164,120,43,-118,43,120,120,-101,-102,226,-84,-85,-86,235,43,-131,-119,-58,-133,-158,154,-162,-163,43,43,-103,-104,-87,-88,-89,226,-43,-134,-120,43,43,43,43,43,43,43,43,-17,-24,-61,43,306,-56,43,-132,43,-64,43,306,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'BOOLEAN':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,108,110,117,129,144,148,150,158,162,163,164,167,168,169,170,176,190,194,204,205,206,209,213,216,217,219,220,228,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,292,293,296,298,312,320,329,331,332,333,334,336,338,340,342,344,],[44,44,44,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,44,-13,44,-123,-124,-125,-126,-127,-53,-54,118,44,44,118,118,44,-128,44,-55,-57,44,44,-159,-164,174,118,44,-118,44,118,118,-101,-102,174,-84,-85,-86,233,44,-131,-119,-58,-133,-158,-163,44,44,-103,-104,174,-87,-88,-89,174,-43,-134,-120,44,44,44,44,44,44,44,44,-17,-24,-61,44,-56,44,-132,44,-64,44,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'TRUE':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,108,110,117,129,144,148,150,158,162,163,164,167,168,169,170,179,190,194,204,205,206,209,213,216,217,219,220,228,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,290,292,293,296,298,312,320,326,329,331,332,333,334,336,338,340,342,344,],[47,47,47,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,47,-13,47,-123,-124,-125,-126,-127,-53,-54,47,47,47,47,47,47,-128,47,-55,-57,47,47,-159,-164,47,47,47,-118,47,47,47,-101,-102,47,-84,-85,-86,47,47,-131,-119,-58,-133,-158,-163,47,47,-103,-104,47,-87,-88,-89,47,-43,-134,-120,47,47,47,47,47,47,47,47,-17,-24,-61,47,47,-56,47,-132,47,-64,47,47,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'FALSE':([0,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,50,51,54,59,62,63,64,65,66,67,68,74,75,76,79,82,85,87,99,103,104,105,106,108,110,117,129,144,148,150,158,162,163,164,167,168,169,170,179,190,194,204,205,206,209,213,216,217,219,220,228,229,230,231,232,237,238,244,246,247,254,255,256,262,263,271,272,278,286,287,290,292,293,296,298,312,320,326,329,331,332,333,334,336,338,340,342,344,],[48,48,48,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-16,48,-13,48,-123,-124,-125,-126,-127,-53,-54,48,48,48,48,48,48,-128,48,-55,-57,48,48,-159,-164,48,48,48,-118,48,48,48,-101,-102,48,-84,-85,-86,48,48,-131,-119,-58,-133,-158,-163,48,48,-103,-104,48,-87,-88,-89,48,-43,-134,-120,48,48,48,48,48,48,48,48,-17,-24,-61,48,48,-56,48,-132,48,-64,48,48,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'$end':([1,2,3,4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,49,50,51,54,67,68,87,103,104,108,110,148,194,204,205,206,209,213,237,238,244,272,278,286,292,296,312,329,331,332,333,334,336,338,340,342,344,],[0,-1,-4,-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-3,-16,-2,-13,-53,-54,-128,-55,-57,-159,-164,-118,-131,-119,-58,-133,-158,-163,-43,-134,-120,-17,-24,-61,-56,-132,-64,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'RCURLYBRACKET':([4,6,7,8,9,10,11,12,13,15,16,17,18,19,24,41,42,43,44,45,46,47,48,50,54,67,68,87,97,100,101,102,103,104,108,110,144,148,150,194,196,197,198,199,204,205,206,209,213,237,238,244,247,249,250,263,271,278,279,280,281,286,292,294,295,296,297,312,318,329,331,332,333,334,336,338,340,342,344,],[-15,-5,-6,-7,-8,-9,-10,-11,-12,-14,-20,-21,-22,-23,-52,-65,-66,-67,-68,-70,-71,-135,-136,-16,-13,-53,-54,-128,-69,-171,-169,-170,-55,-57,-159,-164,-44,-118,205,-131,253,-45,-46,-48,-119,-58,-133,-158,-163,-43,-134,-120,272,274,-113,286,292,-24,-49,-47,-51,-61,-56,-114,-112,-132,312,-64,333,-105,-62,-63,-59,-143,-144,-145,-146,-147,-60,]),'SEMICOLON':([14,23,30,41,42,43,44,45,46,47,48,55,56,62,63,64,65,66,71,72,87,97,98,100,101,102,108,110,111,115,116,118,121,122,123,124,125,126,127,140,142,143,149,151,153,154,155,156,157,159,172,173,174,175,180,181,187,194,206,209,213,215,218,221,222,223,224,225,226,227,233,234,235,236,253,259,260,261,264,277,282,296,311,314,317,319,321,323,325,327,330,],[54,-69,-115,-65,-66,-67,-68,-70,-71,-135,-136,-129,87,-123,-124,-125,-126,-127,108,110,-128,-69,148,-171,-169,-170,-159,-164,158,-99,-74,-75,-76,-98,-90,-91,-77,-117,-116,194,-129,-130,204,206,209,-160,-167,213,-165,-129,-74,-78,-75,-76,237,238,244,-131,-133,-158,-163,262,-100,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,278,-161,-168,-166,-93,296,297,-132,329,331,332,334,336,338,340,342,344,]),'LPAREN':([23,28,29,31,36,40,53,55,85,258,283,],[58,73,74,76,79,82,83,84,141,284,298,]),'EQUAL':([23,55,57,60,62,63,64,65,66,70,71,72,77,159,160,169,170,171,239,240,241,242,243,248,],[59,85,88,99,-123,-124,-125,-126,-127,106,107,109,129,85,216,229,230,231,265,266,267,268,269,273,]),'PLUS':([23,30,41,42,43,44,45,46,47,48,62,63,64,65,66,75,97,100,101,102,123,124,154,155,157,],[62,62,-65,-66,-67,-68,-70,-71,-135,-136,-123,-124,-125,-126,-127,62,-69,-171,-169,-170,-90,-91,211,62,62,]),'MINUS':([23,30,41,42,43,44,45,46,47,48,62,63,64,65,66,75,97,100,101,102,123,124,155,157,],[63,63,-65,-66,-67,-68,-70,-71,-135,-136,-123,-124,-125,-126,-127,63,-69,-171,-169,-170,-90,-91,63,63,]),'TIMES':([23,30,41,42,43,44,45,46,47,48,62,63,64,65,66,75,97,100,101,102,123,124,155,157,],[64,64,-65,-66,-67,-68,-70,-71,-135,-136,-123,-124,-125,-126,-127,64,-69,-171,-169,-170,-90,-91,64,64,]),'DIVISION':([23,30,41,42,43,44,45,46,47,48,62,63,64,65,66,75,97,100,101,102,123,124,155,157,],[65,65,-65,-66,-67,-68,-70,-71,-135,-136,-123,-124,-125,-126,-127,65,-69,-171,-169,-170,-90,-91,65,65,]),'REST':([23,30,41,42,43,44,45,46,47,48,62,63,64,65,66,75,97,100,101,102,123,124,155,157,],[66,66,-65,-66,-67,-68,-70,-71,-135,-136,-123,-124,-125,-126,-127,66,-69,-171,-169,-170,-90,-91,66,66,]),'DOT':([23,97,152,],[61,61,208,]),'ELSE':([24,68,104,205,292,],[69,69,-57,-58,-56,]),'RPAREN':([30,34,35,37,38,39,41,42,43,44,45,46,47,48,58,62,63,64,65,66,80,83,84,89,90,92,93,94,95,96,97,100,101,102,114,115,116,118,121,122,123,124,125,126,127,128,135,137,139,146,147,172,173,174,175,191,193,195,203,218,221,222,223,224,225,226,227,233,234,235,236,264,270,274,285,298,299,313,315,316,],[-115,-32,-31,-33,-35,-25,-65,-66,-67,-68,-70,-71,-135,-136,-44,-123,-124,-125,-126,-127,-26,138,-44,145,-108,-107,-28,-29,-30,-34,-69,-171,-169,-170,161,-99,-74,-75,-76,-98,-90,-91,-77,-117,-116,180,187,189,-44,-44,-106,-74,-78,-75,-76,248,-111,252,-109,-100,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,-93,-27,-110,300,314,317,330,-72,-73,]),'LESSTHAN':([33,39,47,48,116,118,119,120,121,123,124,152,172,],[78,81,-135,-136,169,169,169,169,169,-90,-91,207,169,]),'COMMA':([34,35,37,38,39,41,42,43,44,45,46,47,48,55,58,80,84,90,92,93,94,95,96,97,100,101,102,136,142,146,147,159,199,250,270,280,281,295,302,304,306,308,310,],[-32,-31,-33,-35,-25,-65,-66,-67,-68,-70,-71,-135,-136,86,-44,-26,-44,146,-107,-28,-29,-30,-34,-69,-171,-169,-170,188,86,-44,-106,86,254,275,-27,-47,-51,-112,320,322,324,326,328,]),'GREATERTHAN':([34,35,37,38,39,47,48,80,93,94,95,96,116,118,119,120,121,123,124,130,131,132,133,134,172,245,257,270,273,],[-32,-31,-33,-35,-25,-135,-136,-26,-28,-29,-30,-34,170,170,170,170,170,-90,-91,182,183,184,185,186,170,270,283,-27,293,]),'COLON':([41,42,43,44,45,46,47,48,97,100,101,102,200,201,],[-65,-66,-67,-68,-70,-71,-135,-136,-69,-171,-169,-170,255,-50,]),'RSQUAREBRACKET':([41,42,43,44,45,46,47,48,97,100,101,102,301,302,303,304,305,306,307,308,309,310,335,337,339,341,343,],[-65,-66,-67,-68,-70,-71,-135,-136,-69,-171,-169,-170,319,-148,321,-150,323,-152,325,-154,327,-156,-149,-151,-153,-155,-157,]),'DOUBLEQUAL':([47,48,116,118,119,120,121,123,124,172,],[-135,-136,168,168,168,168,168,-90,-91,168,]),'EXMARK':([47,48,74,79,82,116,118,119,120,121,123,124,129,158,162,163,164,167,168,169,170,172,219,220,229,230,231,232,],[-135,-136,117,117,117,171,171,171,171,171,-90,-91,117,117,117,-101,-102,228,-84,-85,-86,171,-103,-104,-87,-88,-89,228,]),'AND':([47,48,115,116,118,121,122,123,124,125,172,173,174,175,221,222,223,224,225,226,227,233,234,235,236,264,],[-135,-136,163,-74,-75,-76,-98,-90,-91,-77,-74,-78,-75,-76,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,-93,]),'OR':([47,48,115,116,118,121,122,123,124,125,172,173,174,175,221,222,223,224,225,226,227,233,234,235,236,264,],[-135,-136,164,-74,-75,-76,-98,-90,-91,-77,-74,-78,-75,-76,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,-93,]),'AMPERSAND':([47,48,115,116,118,121,122,123,124,125,165,172,173,174,175,221,222,223,224,225,226,227,233,234,235,236,264,],[-135,-136,165,-74,-75,-76,-98,-90,-91,-77,219,-74,-78,-75,-76,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,-93,]),'PIPELINE':([47,48,115,116,118,121,122,123,124,125,166,172,173,174,175,221,222,223,224,225,226,227,233,234,235,236,264,],[-135,-136,166,-74,-75,-76,-98,-90,-91,-77,220,-74,-78,-75,-76,-74,-92,-79,-80,-81,-82,-83,-94,-95,-96,-97,-93,]),'KEYS':([61,],[101,]),'VALUES':([61,],[102,]),'LCURLYBRACKET':([69,84,88,90,92,138,139,145,146,147,161,189,203,300,],[105,-44,144,-108,-107,190,192,202,-44,-106,217,246,-109,318,]),'STACK':([106,],[152,]),'NULL':([167,168,169,170,229,230,231,232,],[227,-84,-85,-86,-87,-88,-89,227,]),'REQUIRED':([192,275,],[251,251,]),'RETURN':([202,],[256,]),'OF':([208,],[258,]),'LSQUAREBRACKET':([265,266,267,268,269,],[287,288,289,290,291,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'class':([0,],[1,]),'class_content_repeat':([0,3,105,190,217,246,],[2,51,150,247,263,271,]),'declarationMain':([0,2,],[3,49,]),'class_content':([0,2,3,51,105,150,190,217,246,247,263,271,],[4,50,4,50,4,50,4,4,4,50,50,50,]),'datatypeOpt':([0,2,],[5,5,]),'map':([0,2,3,51,105,150,190,217,246,247,263,271,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'ifElseStatement':([0,2,3,51,105,150,190,217,246,247,263,271,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'function_lambda':([0,2,3,51,105,150,190,217,246,247,263,271,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'declarationExpression':([0,2,3,51,73,105,150,190,217,246,247,263,271,],[9,9,9,9,111,9,9,9,9,9,9,9,9,]),'forStatement':([0,2,3,51,105,150,190,217,246,247,263,271,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'while':([0,2,3,51,105,150,190,217,246,247,263,271,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'stack':([0,2,3,51,105,150,190,217,246,247,263,271,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'inferedReturnFunction':([0,2,3,51,105,150,190,217,246,247,263,271,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'expression':([0,2,3,51,59,75,85,99,105,106,150,190,216,217,246,247,256,262,263,271,293,],[14,14,14,14,98,127,140,149,14,151,14,14,151,14,14,14,282,285,14,14,311,]),'print':([0,2,3,51,105,150,190,217,246,247,263,271,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'semanticbool':([0,2,3,51,105,150,190,217,246,247,263,271,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'semanticlist':([0,2,3,51,105,150,190,217,246,247,263,271,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'asign':([0,2,3,51,105,150,190,217,246,247,263,271,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'assert':([0,2,3,51,105,150,190,217,246,247,263,271,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'datatype':([0,2,3,51,58,73,81,84,105,141,146,150,188,190,207,217,246,247,251,263,271,],[20,20,52,52,91,112,136,91,52,195,91,52,245,52,257,52,52,52,276,52,52,]),'empty':([0,2,58,84,139,144,146,298,],[21,21,92,92,193,198,92,316,]),'map_identifier':([0,2,3,51,58,73,81,84,105,141,146,150,188,190,207,217,246,247,251,263,271,],[22,22,22,22,96,96,96,96,22,96,96,22,96,22,96,22,22,22,96,22,22,]),'ifStatement':([0,2,3,51,69,105,150,190,217,246,247,263,271,],[24,24,24,24,104,24,24,24,24,24,24,24,24,]),'value':([0,2,3,51,59,75,76,85,99,105,106,144,150,190,216,217,246,247,254,255,256,262,263,271,287,293,298,320,],[30,30,30,30,30,30,128,30,30,30,30,201,30,30,30,30,30,30,201,281,30,30,30,30,302,30,315,302,]),'booleanOp':([0,2,3,51,59,74,75,76,79,82,85,99,105,106,117,129,144,150,158,162,167,179,190,216,217,228,232,246,247,254,255,256,262,263,271,287,290,293,298,320,326,],[45,45,45,45,45,121,45,45,121,121,45,45,45,45,175,121,45,45,121,121,175,236,45,45,45,175,175,45,45,45,45,45,45,45,45,45,308,45,45,45,308,]),'propertiesAccess':([0,2,3,51,59,75,76,85,99,105,106,144,150,190,216,217,246,247,254,255,256,262,263,271,287,293,298,320,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'repeatDeclaration':([20,52,86,112,],[56,56,143,56,]),'operatorExpression':([23,30,75,155,157,],[60,75,126,212,214,]),'elifStatement_repeat':([24,68,],[67,103,]),'elifStatement':([24,68,],[68,68,]),'map_type_specified':([39,],[80,]),'function_arguments_repeat':([58,84,146,],[89,139,203,]),'function_argument':([58,84,146,],[90,90,90,]),'properties':([61,],[100,]),'conditions':([74,79,82,129,162,],[114,135,137,181,218,]),'condition':([74,79,82,129,158,162,],[115,115,115,115,215,115,]),'number':([74,79,82,109,129,158,162,177,212,214,],[119,119,119,157,119,119,119,234,157,157,]),'negation_values':([74,79,82,129,158,162,167,232,],[122,122,122,122,122,122,223,223,]),'deniable_values':([74,79,82,117,129,158,162,167,228,232,],[125,125,125,173,125,125,125,125,173,125,]),'expressionString':([107,210,],[153,259,]),'expressionInteger':([109,212,214,],[156,260,261,]),'condition_connector':([115,],[162,]),'condition_operator':([116,118,119,120,121,172,],[167,176,177,178,179,232,]),'optFunction_argumentsExpression':([139,],[191,]),'map_content':([144,],[196,]),'map_pairs':([144,254,],[197,279,]),'map_pair':([144,254,],[199,199,]),'map_key':([144,254,],[200,200,]),'operatorExpressionString':([154,],[210,]),'condition_values':([167,232,],[222,264,]),'optFunction_arguments':([192,275,],[249,294,]),'optFunction_argument':([192,275,],[250,250,]),'map_value':([255,],[280,]),'insidelist':([287,320,],[301,335,]),'insidelistint':([288,322,],[303,337,]),'insideliststr':([289,324,],[305,339,]),'insidelistbool':([290,326,],[307,341,]),'insidelistdouble':([291,328,],[309,343,]),'opt_value':([298,],[313,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> class","S'",1,None,None,None),
  ('class -> class_content_repeat','class',1,'p_class','main.py',86),
  ('class -> declarationMain class_content_repeat','class',2,'p_class','main.py',87),
  ('class -> class_content_repeat declarationMain','class',2,'p_class','main.py',88),
  ('class -> declarationMain','class',1,'p_class','main.py',89),
  ('class_content -> map','class_content',1,'p_class_content_map','main.py',94),
  ('class_content -> ifElseStatement','class_content',1,'p_class_content_ifElse','main.py',100),
  ('class_content -> function_lambda','class_content',1,'p_class_content_lambdaFunction','main.py',105),
  ('class_content -> declarationExpression','class_content',1,'p_class_content_declarationExpression','main.py',110),
  ('class_content -> forStatement','class_content',1,'p_class_content_for','main.py',115),
  ('class_content -> while','class_content',1,'p_class_content_while','main.py',120),
  ('class_content -> stack','class_content',1,'p_class_content_stack','main.py',125),
  ('class_content -> inferedReturnFunction','class_content',1,'p_class_content_inferedFunction','main.py',130),
  ('class_content -> expression SEMICOLON','class_content',2,'p_class_content_expression','main.py',135),
  ('class_content -> print','class_content',1,'p_class_content_print','main.py',139),
  ('class_content_repeat -> class_content','class_content_repeat',1,'p_class_content_repeat','main.py',144),
  ('class_content_repeat -> class_content_repeat class_content','class_content_repeat',2,'p_class_content_repeat','main.py',145),
  ('declarationMain -> datatypeOpt MAIN LPAREN RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET','declarationMain',7,'p_declarationMain','main.py',149),
  ('datatypeOpt -> datatype','datatypeOpt',1,'p_datatypeOpt','main.py',152),
  ('datatypeOpt -> empty','datatypeOpt',1,'p_datatypeOpt','main.py',153),
  ('class_content -> semanticbool','class_content',1,'p_class_content_bool','main.py',156),
  ('class_content -> semanticlist','class_content',1,'p_class_content_semanticlist','main.py',161),
  ('class_content -> asign','class_content',1,'p_class_content_asign','main.py',165),
  ('class_content -> assert','class_content',1,'p_class_content_assert','main.py',168),
  ('map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON','map',7,'p_map','main.py',173),
  ('map_identifier -> MAP','map_identifier',1,'p_map_identifier','main.py',177),
  ('map_identifier -> MAP map_type_specified','map_identifier',2,'p_map_identifier','main.py',178),
  ('map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN','map_type_specified',5,'p_map_type_specified','main.py',183),
  ('datatype -> INT','datatype',1,'p_datatype','main.py',187),
  ('datatype -> STRING','datatype',1,'p_datatype','main.py',188),
  ('datatype -> BOOL','datatype',1,'p_datatype','main.py',189),
  ('datatype -> DOUBLE','datatype',1,'p_datatype','main.py',190),
  ('datatype -> DYNAMIC','datatype',1,'p_datatype','main.py',191),
  ('datatype -> VOID','datatype',1,'p_datatype','main.py',192),
  ('datatype -> map_identifier','datatype',1,'p_datatype','main.py',193),
  ('datatype -> VAR','datatype',1,'p_datatype','main.py',194),
  ('returnType -> INT','returnType',1,'p_returnType','main.py',199),
  ('returnType -> STRING','returnType',1,'p_returnType','main.py',200),
  ('returnType -> BOOL','returnType',1,'p_returnType','main.py',201),
  ('returnType -> DOUBLE','returnType',1,'p_returnType','main.py',202),
  ('returnType -> DYNAMIC','returnType',1,'p_returnType','main.py',203),
  ('returnType -> VOID','returnType',1,'p_returnType','main.py',204),
  ('returnType -> map_identifier','returnType',1,'p_returnType','main.py',205),
  ('print -> PRINT LPAREN value RPAREN SEMICOLON','print',5,'p_print','main.py',209),
  ('empty -> <empty>','empty',0,'p_empty','main.py',212),
  ('map_content -> map_pairs','map_content',1,'p_map_content','main.py',216),
  ('map_content -> empty','map_content',1,'p_map_content','main.py',217),
  ('map_pair -> map_key COLON map_value','map_pair',3,'p_map_pair','main.py',222),
  ('map_pairs -> map_pair','map_pairs',1,'p_map_pairs','main.py',226),
  ('map_pairs -> map_pair COMMA map_pairs','map_pairs',3,'p_map_pairs','main.py',227),
  ('map_key -> value','map_key',1,'p_map_key','main.py',232),
  ('map_value -> value','map_value',1,'p_map_value','main.py',237),
  ('ifElseStatement -> ifStatement','ifElseStatement',1,'p_ifElseStatement','main.py',242),
  ('ifElseStatement -> ifStatement elifStatement_repeat','ifElseStatement',2,'p_ifElseStatement','main.py',243),
  ('elifStatement_repeat -> elifStatement','elifStatement_repeat',1,'p_elifStatement_repeat','main.py',248),
  ('elifStatement_repeat -> elifStatement elifStatement_repeat','elifStatement_repeat',2,'p_elifStatement_repeat','main.py',249),
  ('ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET','ifStatement',7,'p_ifStatement','main.py',254),
  ('elifStatement -> ELSE ifStatement','elifStatement',2,'p_elifStatement','main.py',260),
  ('elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET','elifStatement',4,'p_elseStatement','main.py',265),
  ('forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET','forStatement',10,'p_forStatement','main.py',270),
  ('stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON','stack',11,'p_stack','main.py',279),
  ('while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET','while',7,'p_whileStatement','main.py',284),
  ('stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON','stack',10,'p_stackStatement','main.py',290),
  ('stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON','stack',10,'p_stackStatement','main.py',291),
  ('inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET','inferedReturnFunction',9,'p_inferedReturnFunction','main.py',296),
  ('value -> INTEGER','value',1,'p_value','main.py',301),
  ('value -> FLOAT','value',1,'p_value','main.py',302),
  ('value -> STR','value',1,'p_value','main.py',303),
  ('value -> BOOLEAN','value',1,'p_value','main.py',304),
  ('value -> IDENTIFIER','value',1,'p_value','main.py',305),
  ('value -> booleanOp','value',1,'p_value','main.py',306),
  ('value -> propertiesAccess','value',1,'p_value','main.py',307),
  ('opt_value -> value','opt_value',1,'p_opt_value','main.py',314),
  ('opt_value -> empty','opt_value',1,'p_opt_value','main.py',315),
  ('deniable_values -> IDENTIFIER','deniable_values',1,'p_deniable_values','main.py',320),
  ('deniable_values -> BOOLEAN','deniable_values',1,'p_deniable_values','main.py',321),
  ('deniable_values -> booleanOp','deniable_values',1,'p_deniable_values','main.py',322),
  ('negation_values -> deniable_values','negation_values',1,'p_negation_values','main.py',327),
  ('negation_values -> EXMARK deniable_values','negation_values',2,'p_negation_values','main.py',328),
  ('condition_values -> negation_values','condition_values',1,'p_condition_values','main.py',333),
  ('condition_values -> INTEGER','condition_values',1,'p_condition_values','main.py',334),
  ('condition_values -> FLOAT','condition_values',1,'p_condition_values','main.py',335),
  ('condition_values -> STR','condition_values',1,'p_condition_values','main.py',336),
  ('condition_values -> NULL','condition_values',1,'p_condition_values','main.py',337),
  ('condition_operator -> DOUBLEQUAL','condition_operator',1,'p_condition_operator','main.py',342),
  ('condition_operator -> LESSTHAN','condition_operator',1,'p_condition_operator','main.py',343),
  ('condition_operator -> GREATERTHAN','condition_operator',1,'p_condition_operator','main.py',344),
  ('condition_operator -> LESSTHAN EQUAL','condition_operator',2,'p_condition_operator','main.py',345),
  ('condition_operator -> GREATERTHAN EQUAL','condition_operator',2,'p_condition_operator','main.py',346),
  ('condition_operator -> EXMARK EQUAL','condition_operator',2,'p_condition_operator','main.py',347),
  ('number -> FLOAT','number',1,'p_number','main.py',352),
  ('number -> INTEGER','number',1,'p_number','main.py',353),
  ('condition -> IDENTIFIER condition_operator condition_values','condition',3,'p_condition','main.py',358),
  ('condition -> EXMARK IDENTIFIER condition_operator condition_values','condition',4,'p_condition','main.py',359),
  ('condition -> BOOLEAN condition_operator BOOLEAN','condition',3,'p_condition','main.py',360),
  ('condition -> number condition_operator number','condition',3,'p_condition','main.py',361),
  ('condition -> STR condition_operator STR','condition',3,'p_condition','main.py',362),
  ('condition -> booleanOp condition_operator booleanOp','condition',3,'p_condition','main.py',363),
  ('condition -> negation_values','condition',1,'p_condition','main.py',364),
  ('conditions -> condition','conditions',1,'p_conditions','main.py',369),
  ('conditions -> condition condition_connector conditions','conditions',3,'p_conditions','main.py',370),
  ('condition_connector -> AND','condition_connector',1,'p_condition_connector','main.py',375),
  ('condition_connector -> OR','condition_connector',1,'p_condition_connector','main.py',376),
  ('condition_connector -> AMPERSAND AMPERSAND','condition_connector',2,'p_condition_connector','main.py',377),
  ('condition_connector -> PIPELINE PIPELINE','condition_connector',2,'p_condition_connector','main.py',378),
  ('function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON','function_lambda',10,'p_function_lambda','main.py',383),
  ('function_argument -> datatype IDENTIFIER','function_argument',2,'p_function_argument','main.py',388),
  ('function_argument -> empty','function_argument',1,'p_function_argument','main.py',389),
  ('function_arguments_repeat -> function_argument','function_arguments_repeat',1,'p_function_arguments_repeat','main.py',394),
  ('function_arguments_repeat -> function_argument COMMA function_arguments_repeat','function_arguments_repeat',3,'p_function_arguments_repeat','main.py',395),
  ('optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET','optFunction_argumentsExpression',3,'p_optFunction_argumentsExpression','main.py',400),
  ('optFunction_argumentsExpression -> empty','optFunction_argumentsExpression',1,'p_optFunction_argumentsExpression','main.py',401),
  ('optFunction_argument -> REQUIRED datatype IDENTIFIER','optFunction_argument',3,'p_optFunction_argument','main.py',406),
  ('optFunction_arguments -> optFunction_argument','optFunction_arguments',1,'p_optFunction_arguments','main.py',412),
  ('optFunction_arguments -> optFunction_argument COMMA optFunction_arguments','optFunction_arguments',3,'p_optFunction_arguments','main.py',413),
  ('expression -> value','expression',1,'p_expression','main.py',418),
  ('expression -> value operatorExpression expression','expression',3,'p_expression','main.py',419),
  ('expression -> value operatorExpression operatorExpression','expression',3,'p_expression','main.py',420),
  ('asign -> IDENTIFIER EQUAL expression SEMICOLON','asign',4,'p_asign','main.py',423),
  ('asign -> IDENTIFIER operatorExpression EQUAL expression SEMICOLON','asign',5,'p_asign','main.py',424),
  ('assert -> ASSERT LPAREN conditions RPAREN SEMICOLON','assert',5,'p_assert','main.py',428),
  ('operableTypes -> IDENTIFIER','operableTypes',1,'p_operableTypes','main.py',432),
  ('operableTypes -> number','operableTypes',1,'p_operableTypes','main.py',433),
  ('operatorExpression -> PLUS','operatorExpression',1,'p_operatorExpression','main.py',438),
  ('operatorExpression -> MINUS','operatorExpression',1,'p_operatorExpression','main.py',439),
  ('operatorExpression -> TIMES','operatorExpression',1,'p_operatorExpression','main.py',440),
  ('operatorExpression -> DIVISION','operatorExpression',1,'p_operatorExpression','main.py',441),
  ('operatorExpression -> REST','operatorExpression',1,'p_operatorExpression','main.py',442),
  ('declarationExpression -> datatype repeatDeclaration SEMICOLON','declarationExpression',3,'p_declarationExpression','main.py',447),
  ('repeatDeclaration -> IDENTIFIER','repeatDeclaration',1,'p_repeatDeclaration','main.py',450),
  ('repeatDeclaration -> IDENTIFIER COMMA repeatDeclaration','repeatDeclaration',3,'p_repeatDeclaration','main.py',451),
  ('declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON','declarationExpression',5,'p_declarationExpression_asignOther','main.py',456),
  ('declarationExpression -> datatype IDENTIFIER EQUAL LPAREN datatype RPAREN IDENTIFIER SEMICOLON','declarationExpression',8,'p_declarationExpression_asignOtherCasting','main.py',459),
  ('declarationExpression -> FINAL IDENTIFIER EQUAL expression SEMICOLON','declarationExpression',5,'p_declarationExpression_asignConstant','main.py',462),
  ('semanticbool -> BOOL IDENTIFIER EQUAL conditions SEMICOLON','semanticbool',5,'p_semanticbool','main.py',470),
  ('booleanOp -> TRUE','booleanOp',1,'p_booleanOp','main.py',474),
  ('booleanOp -> FALSE','booleanOp',1,'p_booleanOp','main.py',475),
  ('booloperation -> booleanOp condition_connector booleanOp','booloperation',3,'p_booloperation','main.py',479),
  ('booloperation -> IDENTIFIER condition_connector booleanOp','booloperation',3,'p_booloperation','main.py',480),
  ('booloperation -> IDENTIFIER condition_connector IDENTIFIER','booloperation',3,'p_booloperation','main.py',481),
  ('booloperation -> booleanOp condition_connector IDENTIFIER','booloperation',3,'p_booloperation','main.py',482),
  ('booloperations -> booloperation','booloperations',1,'p_booloperations','main.py',487),
  ('booloperations -> booloperation condition_connector booloperations','booloperations',3,'p_booloperations','main.py',488),
  ('semanticlist -> LIST LESSTHAN DYNAMIC GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',493),
  ('semanticlist -> LIST LESSTHAN INT GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistint RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',494),
  ('semanticlist -> LIST LESSTHAN STRING GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insideliststr RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',495),
  ('semanticlist -> LIST LESSTHAN BOOL GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistbool RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',496),
  ('semanticlist -> LIST LESSTHAN DOUBLE GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelistdouble RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',497),
  ('insidelist -> value','insidelist',1,'p_insidelist','main.py',506),
  ('insidelist -> value COMMA insidelist','insidelist',3,'p_insidelist','main.py',507),
  ('insidelistint -> INTEGER','insidelistint',1,'p_insidelistint','main.py',512),
  ('insidelistint -> INTEGER COMMA insidelistint','insidelistint',3,'p_insidelistint','main.py',513),
  ('insideliststr -> STR','insideliststr',1,'p_insideliststr','main.py',518),
  ('insideliststr -> STR COMMA insideliststr','insideliststr',3,'p_insideliststr','main.py',519),
  ('insidelistbool -> booleanOp','insidelistbool',1,'p_insidelistbool','main.py',524),
  ('insidelistbool -> booleanOp COMMA insidelistbool','insidelistbool',3,'p_insidelistbool','main.py',525),
  ('insidelistdouble -> FLOAT','insidelistdouble',1,'p_insidelistdouble','main.py',530),
  ('insidelistdouble -> FLOAT COMMA insidelistdouble','insidelistdouble',3,'p_insidelistdouble','main.py',531),
  ('declarationExpression -> STRING IDENTIFIER EQUAL expressionString SEMICOLON','declarationExpression',5,'p_declarationExpression_asignString','main.py',537),
  ('declarationExpression -> STRING IDENTIFIER SEMICOLON','declarationExpression',3,'p_declarationExpression_asignString','main.py',538),
  ('expressionString -> STR','expressionString',1,'p_expressionString','main.py',541),
  ('expressionString -> STR operatorExpressionString expressionString','expressionString',3,'p_expressionString','main.py',542),
  ('operatorExpressionString -> PLUS','operatorExpressionString',1,'p_operationExpressionString','main.py',545),
  ('declarationExpression -> INT IDENTIFIER EQUAL expressionInteger SEMICOLON','declarationExpression',5,'p_declarationExpression_asignInteger','main.py',548),
  ('declarationExpression -> INT IDENTIFIER SEMICOLON','declarationExpression',3,'p_declarationExpression_asignInteger','main.py',549),
  ('expressionInteger -> number','expressionInteger',1,'p_expressionInteger','main.py',553),
  ('expressionInteger -> number operatorExpression expressionInteger','expressionInteger',3,'p_expressionInteger','main.py',554),
  ('expressionInteger -> IDENTIFIER','expressionInteger',1,'p_expressionIntegerIdentifier','main.py',557),
  ('expressionInteger -> IDENTIFIER operatorExpression expressionInteger','expressionInteger',3,'p_expressionIntegerIdentifier','main.py',558),
  ('properties -> KEYS','properties',1,'p_properties','main.py',562),
  ('properties -> VALUES','properties',1,'p_properties','main.py',563),
  ('propertiesAccess -> IDENTIFIER DOT properties','propertiesAccess',3,'p_propertiesAccess','main.py',566),
]
