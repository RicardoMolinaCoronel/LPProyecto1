
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND APOSTROPHE ASYNC AWAIT BOOL BOOLEAN CATCH CLOSE COLON COMMA COMMENT DIVISION DO DOLLAR DOT DOUBLE DOUBLEQUAL DOUBQUOTMARK DYNAMIC ELSE EQUAL EXIT EXMARK FALSE FILE FINAL FLOAT FOR GREATERTHAN IDENTIFIER IF IMPORT IN INT INTEGER IS ITERABLE LCURLYBRACKET LESSTHAN LIST LPAREN LSQUAREBRACKET MAIN MAP METHOD MINUS NOTEQUAL OF OPENWRITE OR PIPELINE PLUS PRINT RCURLYBRACKET READLINESYNC REQUIRED RETURN RPAREN RSQUAREBRACKET SEMICOLON SET STACK STR STRING TIMES TRUE TRY VAR VOID WHILE WRITEclass : class_content_repeatclass_content : map\n  class_content : ifElseStatement\n  class_content : function_lambda\n  class_content : declarationExpression\n  class_content : forStatement\n    class_content : while\n  class_content : stack\n  class_content : inferedReturnFunction\n  class_content : expression SEMICOLON\n  class_content_repeat : class_content\n                           | class_content_repeat class_content\n  class_content : bool\n  class_content : semanticlist\n  map : map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLONmap_identifier : MAP\n                     | MAP map_type_specified\n  map_type_specified : LESSTHAN datatype COMMA datatype GREATERTHANdatatype : returnType\n               | VAR\n  returnType : INT\n                 | STRING\n                 | BOOL\n                 | DOUBLE\n                 | DYNAMIC\n                 | VOID\n                 | map_identifier\n  empty :map_content : map_pairs\n                  | empty\n  map_pair : map_key COLON map_valuemap_pairs : map_pair\n                | map_pair COMMA map_pairs\n  map_key : value\n  map_value : value\n  ifElseStatement : ifStatement\n                      | ifStatement elifStatement_repeat\n  elifStatement_repeat : elifStatement\n                           | elifStatement elifStatement_repeat\n  ifStatement : IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET\n  elifStatement : ELSE ifStatement\n  elifStatement : ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET\n  forStatement : FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET\n  stack : FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON\n  while : WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET\n  stack : FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON\n          | FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON\n  inferedReturnFunction : IDENTIFIER LPAREN  function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET\n  value : INTEGER\n              | FLOAT\n              | STR\n              | BOOLEAN\n              | IDENTIFIER\n              | boolvalue\n  opt_value : value\n                | empty\n  deniable_values : IDENTIFIER\n                      | BOOLEAN\n  negation_values : deniable_values\n                     | EXMARK deniable_values\n  condition_values : negation_values\n                      | INTEGER\n                      | FLOAT\n                      | STR\n  condition_operator : DOUBLEQUAL\n                         | LESSTHAN\n                         | GREATERTHAN\n                         | LESSTHAN EQUAL\n                         | GREATERTHAN EQUAL\n  number : FLOAT\n             | INTEGER\n  condition : IDENTIFIER condition_operator condition_values\n                | EXMARK IDENTIFIER condition_operator condition_values\n                | BOOLEAN condition_operator BOOLEAN\n                | number condition_operator number\n                | STR condition_operator STR\n  conditions : condition\n                 | condition condition_connector conditions\n  condition_connector : AND\n                          | OR\n                          | AMPERSAND AMPERSAND\n                          | PIPELINE PIPELINE\n  function_lambda : datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON\n   function_argument : datatype IDENTIFIER\n                        | empty\n  function_arguments_repeat : function_argument\n                                | function_argument COMMA function_arguments_repeat\n   optFunction_argumentsExpression : LCURLYBRACKET optFunction_arguments RCURLYBRACKET\n                                       | empty\n  optFunction_argument : REQUIRED datatype IDENTIFIER\n\n  optFunction_arguments : optFunction_argument\n                            | optFunction_argument COMMA optFunction_arguments\n  expression : operableTypes operatorExpression operableTypes\n                  | value\n                  | operableTypes operatorExpression operatorExpression\n  operableTypes : IDENTIFIER\n                    | number\n  operatorExpression : PLUS\n                         | MINUS\n                         | TIMES\n                         | DIVISION\n  declarationExpression : datatype IDENTIFIER SEMICOLON\n  declarationExpression : datatype IDENTIFIER EQUAL expression SEMICOLON\n   boolvalue : TRUE\n                | FALSE\n   bool : BOOL IDENTIFIER EQUAL boolvalue SEMICOLON\n           | BOOL IDENTIFIER EQUAL booloperations SEMICOLON\n   booloperation : boolvalue condition_connector boolvalue\n                  | IDENTIFIER condition_connector boolvalue\n                  | IDENTIFIER condition_connector IDENTIFIER\n                  | boolvalue condition_connector IDENTIFIER\n   booloperations : booloperation\n                    | booloperation condition_connector booloperations\n   semanticlist : LIST LESSTHAN  datatype GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON\n                  | LIST LESSTHAN DYNAMIC GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON\n   insidelist : value\n                  | value COMMA insidelist\n  '
    
_lr_action_items = {'FOR':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,76,101,141,145,147,169,171,176,186,200,201,211,216,227,238,239,241,242,243,245,246,],[19,19,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,19,-102,19,-42,-103,19,-106,-107,19,19,19,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,76,101,141,145,147,169,171,176,186,200,201,211,216,227,238,239,241,242,243,245,246,],[20,20,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,20,-102,20,-42,-103,20,-106,-107,20,20,20,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'FINAL':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,76,101,141,145,147,169,171,176,186,200,201,211,216,227,238,239,241,242,243,245,246,],[21,21,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,21,-102,21,-42,-103,21,-106,-107,21,21,21,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,17,18,21,24,27,28,30,31,37,38,39,40,43,44,47,48,52,54,55,56,57,58,61,63,67,69,70,71,72,73,75,76,78,82,92,97,101,105,108,109,110,113,114,115,116,126,127,141,145,147,149,150,158,160,161,162,168,169,170,171,172,176,178,179,180,185,186,199,200,201,209,211,213,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[16,16,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,45,-36,50,53,59,-25,-16,-19,-20,-21,-22,-24,-26,-12,-10,-37,-38,81,91,-98,-99,-100,-101,-17,81,100,-23,-27,-39,-41,16,103,-102,106,117,122,130,16,81,81,-79,-80,151,-65,-66,-67,173,174,-42,-103,16,-81,-82,151,-68,-69,151,191,-106,194,-107,122,16,130,130,103,103,16,-18,16,-15,220,-45,223,130,130,-40,103,130,-48,130,-83,-43,-46,-47,-114,-115,-44,]),'BOOL':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[24,24,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,69,-37,-38,69,69,69,-39,-41,24,69,-102,69,24,69,-42,-103,24,69,-106,-107,24,69,24,24,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'LIST':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,76,101,141,145,147,169,171,176,186,200,201,211,216,227,238,239,241,242,243,245,246,],[26,26,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,26,-102,26,-42,-103,26,-106,-107,26,26,26,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'MAP':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[28,28,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,28,-37,-38,28,28,28,-39,-41,28,28,-102,28,28,28,-42,-103,28,28,-106,-107,28,28,28,28,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,49,71,72,73,76,101,141,145,147,169,171,176,186,200,201,211,216,227,238,239,241,242,243,245,246,],[29,29,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,29,-39,-41,29,-102,29,-42,-103,29,-106,-107,29,29,29,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[31,31,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,31,-37,-38,31,31,31,-39,-41,31,31,-102,31,31,31,-42,-103,31,31,-106,-107,31,31,31,31,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,52,54,55,56,57,58,63,71,72,73,75,76,97,101,105,108,109,110,113,114,115,116,119,141,145,147,149,150,160,161,162,169,171,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[33,33,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,87,87,-98,-99,-100,-101,87,-39,-41,33,33,-102,137,33,87,87,-79,-80,154,-65,-66,-67,87,-42,-103,33,-81,-82,-68,-69,154,-106,-107,33,137,137,33,33,33,33,-15,-45,137,137,-40,33,137,-48,137,-83,-43,-46,-47,-114,-115,-44,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,52,54,55,56,57,58,63,71,72,73,75,76,97,101,105,108,109,110,113,114,115,116,119,141,145,147,149,150,160,161,162,169,171,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[34,34,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,86,86,-98,-99,-100,-101,86,-39,-41,34,34,-102,138,34,86,86,-79,-80,155,-65,-66,-67,86,-42,-103,34,-81,-82,-68,-69,155,-106,-107,34,138,138,34,34,34,34,-15,-45,138,138,-40,34,138,-48,138,-83,-43,-46,-47,-114,-115,-44,]),'STR':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,52,63,71,72,73,75,76,97,101,105,108,109,110,113,114,115,116,120,141,145,147,149,150,160,161,162,169,171,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[35,35,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,85,85,-39,-41,35,35,-102,35,35,85,85,-79,-80,156,-65,-66,-67,165,-42,-103,35,-81,-82,-68,-69,156,-106,-107,35,35,35,35,35,35,35,-15,-45,35,35,-40,35,35,-48,35,-83,-43,-46,-47,-114,-115,-44,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,52,63,71,72,73,75,76,97,101,105,108,109,110,113,114,115,116,118,141,145,147,149,150,158,160,161,162,169,171,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[36,36,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,83,83,-39,-41,36,36,-102,36,36,83,83,-79,-80,159,-65,-66,-67,163,-42,-103,36,-81,-82,159,-68,-69,159,-106,-107,36,36,36,36,36,36,36,-15,-45,36,36,-40,36,36,-48,36,-83,-43,-46,-47,-114,-115,-44,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[37,37,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,37,-37,-38,37,37,37,-39,-41,37,37,-102,37,37,37,-42,-103,37,37,-106,-107,37,37,37,37,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[38,38,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,38,-37,-38,38,38,38,-39,-41,38,38,-102,38,38,38,-42,-103,38,38,-106,-107,38,38,38,38,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[39,39,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,39,-37,-38,39,39,39,-39,-41,39,39,-102,39,39,39,-42,-103,39,39,-106,-107,39,39,39,39,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'DYNAMIC':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[27,27,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,27,-37,-38,27,94,27,-39,-41,27,27,-102,27,27,27,-42,-103,27,27,-106,-107,27,27,27,27,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'VOID':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,46,47,48,51,60,62,71,72,73,74,76,99,101,128,141,145,147,166,169,171,176,184,186,200,201,211,216,227,238,239,241,242,243,245,246,],[40,40,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,40,-37,-38,40,40,40,-39,-41,40,40,-102,40,40,40,-42,-103,40,40,-106,-107,40,40,40,40,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'TRUE':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,75,76,92,97,101,109,110,141,145,147,149,150,168,169,170,171,172,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[41,41,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,41,41,-102,41,41,41,-79,-80,-42,-103,41,-81,-82,41,-106,41,-107,41,41,41,41,41,41,41,41,-15,-45,41,41,-40,41,41,-48,41,-83,-43,-46,-47,-114,-115,-44,]),'FALSE':([0,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,73,75,76,92,97,101,109,110,141,145,147,149,150,168,169,170,171,172,176,178,179,180,185,186,200,201,211,214,215,216,218,222,227,236,238,239,241,242,243,245,246,],[42,42,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,42,42,-102,42,42,42,-79,-80,-42,-103,42,-81,-82,42,-106,42,-107,42,42,42,42,42,42,42,42,-15,-45,42,42,-40,42,42,-48,42,-83,-43,-46,-47,-114,-115,-44,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,14,17,43,44,47,48,71,72,76,141,145,169,171,201,211,216,227,238,239,241,242,243,245,246,],[0,-1,-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-12,-10,-37,-38,-39,-41,-102,-42,-103,-106,-107,-15,-45,-40,-48,-83,-43,-46,-47,-114,-115,-44,]),'RCURLYBRACKET':([3,4,5,6,7,8,9,10,11,13,14,17,25,35,36,41,42,43,44,47,48,71,72,76,97,101,130,131,132,133,134,137,138,141,145,169,171,182,183,186,200,201,202,203,204,211,216,217,219,220,227,229,238,239,241,242,243,245,246,],[-11,-2,-3,-4,-5,-6,-7,-8,-9,-13,-14,-36,-54,-51,-52,-104,-105,-12,-10,-37,-38,-39,-41,-102,-28,141,-53,177,-29,-30,-32,-49,-50,-42,-103,-106,-107,207,-91,211,216,-15,-33,-31,-35,-45,-40,227,-92,-90,-48,239,-83,-43,-46,-47,-114,-115,-44,]),'SEMICOLON':([12,16,23,25,32,33,34,35,36,41,42,50,55,56,57,58,76,77,86,87,89,90,91,103,104,106,123,124,125,145,146,151,152,153,154,155,156,157,159,163,164,165,177,187,188,191,192,193,194,195,205,228,231,234,235,237,240,],[44,-53,-94,-54,-97,-49,-50,-51,-52,-104,-105,76,-98,-99,-100,-101,-102,105,-70,-71,-93,-95,-96,-53,145,76,169,171,-112,-103,185,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,201,-60,-73,-110,-109,-108,-111,-113,217,238,241,242,243,245,246,]),'LPAREN':([16,19,20,29,50,190,212,],[46,51,52,63,74,213,222,]),'PLUS':([16,22,32,33,34,54,55,56,57,58,103,],[-96,55,-97,-71,-70,55,-98,-99,-100,-101,-96,]),'MINUS':([16,22,32,33,34,54,55,56,57,58,103,],[-96,56,-97,-71,-70,56,-98,-99,-100,-101,-96,]),'TIMES':([16,22,32,33,34,54,55,56,57,58,103,],[-96,57,-97,-71,-70,57,-98,-99,-100,-101,-96,]),'DIVISION':([16,22,32,33,34,54,55,56,57,58,103,],[-96,58,-97,-71,-70,58,-98,-99,-100,-101,-96,]),'ELSE':([17,48,72,141,216,],[49,49,-41,-42,-40,]),'RPAREN':([23,25,32,33,34,35,36,41,42,46,55,56,57,58,65,66,68,74,79,80,86,87,89,90,91,96,99,100,102,103,130,137,138,140,142,144,148,151,152,153,154,155,156,157,159,163,164,165,187,188,207,210,222,223,230,232,233,],[-94,-54,-97,-49,-50,-51,-52,-104,-105,-28,-98,-99,-100,-101,98,-86,-85,-28,107,-77,-70,-71,-93,-95,-96,129,-28,-84,-28,-53,-53,-49,-50,-87,181,-89,-78,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,-60,-73,-88,221,231,234,240,-55,-56,]),'COLON':([25,35,36,41,42,130,135,136,137,138,],[-54,-51,-52,-104,-105,-53,179,-34,-49,-50,]),'COMMA':([25,27,28,30,31,35,36,37,38,39,40,41,42,46,61,66,68,69,70,74,95,99,100,130,134,137,138,183,199,203,204,220,225,],[-54,-25,-16,-19,-20,-51,-52,-21,-22,-24,-26,-104,-105,-28,-17,99,-85,-23,-27,-28,128,-28,-84,-53,178,-49,-50,208,-18,-31,-35,-90,236,]),'RSQUAREBRACKET':([25,35,36,41,42,130,137,138,224,225,226,244,],[-54,-51,-52,-104,-105,-53,-49,-50,235,-116,237,-117,]),'LESSTHAN':([26,28,81,83,84,85,86,87,117,121,],[60,62,115,115,115,115,-70,-71,115,166,]),'GREATERTHAN':([27,28,30,31,37,38,39,40,61,69,70,81,83,84,85,86,87,93,94,117,175,189,199,206,],[-25,-16,-19,-20,-21,-22,-24,-26,-17,-23,-27,116,116,116,116,-70,-71,126,127,116,199,212,-18,218,]),'AND':([41,42,80,86,87,122,123,125,151,152,153,154,155,156,157,159,163,164,165,187,188,191,192,193,194,196,],[-104,-105,109,-70,-71,109,109,109,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,-60,-73,-110,-109,-108,-111,109,]),'OR':([41,42,80,86,87,122,123,125,151,152,153,154,155,156,157,159,163,164,165,187,188,191,192,193,194,196,],[-104,-105,110,-70,-71,110,110,110,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,-60,-73,-110,-109,-108,-111,110,]),'AMPERSAND':([41,42,80,86,87,111,122,123,125,151,152,153,154,155,156,157,159,163,164,165,187,188,191,192,193,194,196,],[-104,-105,111,-70,-71,149,111,111,111,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,-60,-73,-110,-109,-108,-111,111,]),'PIPELINE':([41,42,80,86,87,112,122,123,125,151,152,153,154,155,156,157,159,163,164,165,187,188,191,192,193,194,196,],[-104,-105,112,-70,-71,150,112,112,112,-57,-72,-61,-62,-63,-64,-59,-58,-74,-75,-76,-60,-73,-110,-109,-108,-111,112,]),'EQUAL':([45,50,53,59,106,115,116,173,174,181,],[64,75,88,92,75,160,161,197,198,206,]),'LCURLYBRACKET':([49,64,66,68,74,98,99,100,102,107,129,140,221,],[73,97,-86,-85,-28,139,-28,-84,143,147,176,-87,229,]),'EXMARK':([52,63,105,108,109,110,113,114,115,116,149,150,160,161,162,],[82,82,82,82,-79,-80,158,-65,-66,-67,-81,-82,-68,-69,158,]),'DOUBLEQUAL':([81,83,84,85,86,87,117,],[114,114,114,114,-70,-71,114,]),'STACK':([88,],[121,]),'DOT':([121,],[167,]),'RETURN':([139,],[180,]),'REQUIRED':([143,208,],[184,184,]),'OF':([167,],[190,]),'LSQUAREBRACKET':([197,198,],[214,215,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'class':([0,],[1,]),'class_content_repeat':([0,73,147,176,],[2,101,186,200,]),'class_content':([0,2,73,101,147,176,186,200,],[3,43,3,43,3,3,43,43,]),'map':([0,2,73,101,147,176,186,200,],[4,4,4,4,4,4,4,4,]),'ifElseStatement':([0,2,73,101,147,176,186,200,],[5,5,5,5,5,5,5,5,]),'function_lambda':([0,2,73,101,147,176,186,200,],[6,6,6,6,6,6,6,6,]),'declarationExpression':([0,2,51,73,101,147,176,186,200,],[7,7,77,7,7,7,7,7,7,]),'forStatement':([0,2,73,101,147,176,186,200,],[8,8,8,8,8,8,8,8,]),'while':([0,2,73,101,147,176,186,200,],[9,9,9,9,9,9,9,9,]),'stack':([0,2,73,101,147,176,186,200,],[10,10,10,10,10,10,10,10,]),'inferedReturnFunction':([0,2,73,101,147,176,186,200,],[11,11,11,11,11,11,11,11,]),'expression':([0,2,73,75,101,147,176,180,185,186,200,218,],[12,12,12,104,12,12,12,205,210,12,12,228,]),'bool':([0,2,73,101,147,176,186,200,],[13,13,13,13,13,13,13,13,]),'semanticlist':([0,2,73,101,147,176,186,200,],[14,14,14,14,14,14,14,14,]),'map_identifier':([0,2,46,51,60,62,73,74,99,101,128,147,166,176,184,186,200,],[15,15,70,70,70,70,15,70,70,15,70,15,70,15,70,15,15,]),'ifStatement':([0,2,49,73,101,147,176,186,200,],[17,17,72,17,17,17,17,17,17,]),'datatype':([0,2,46,51,60,62,73,74,99,101,128,147,166,176,184,186,200,],[18,18,67,78,93,95,18,67,67,18,175,18,189,18,209,18,18,]),'operableTypes':([0,2,54,73,75,101,147,176,180,185,186,200,218,],[22,22,89,22,22,22,22,22,22,22,22,22,22,]),'value':([0,2,73,75,97,101,147,176,178,179,180,185,186,200,214,215,218,222,236,],[23,23,23,23,136,23,23,23,136,204,23,23,23,23,225,225,23,232,225,]),'boolvalue':([0,2,73,75,92,97,101,147,168,170,172,176,178,179,180,185,186,200,214,215,218,222,236,],[25,25,25,25,123,25,25,25,192,193,196,25,25,25,25,25,25,25,25,25,25,25,25,]),'returnType':([0,2,46,51,60,62,73,74,99,101,128,147,166,176,184,186,200,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'number':([0,2,52,54,63,73,75,101,105,108,119,147,176,180,185,186,200,218,],[32,32,84,32,84,32,32,32,84,84,164,32,32,32,32,32,32,32,]),'elifStatement_repeat':([17,48,],[47,71,]),'elifStatement':([17,48,],[48,48,]),'operatorExpression':([22,54,],[54,90,]),'map_type_specified':([28,],[61,]),'function_arguments_repeat':([46,74,99,],[65,102,140,]),'function_argument':([46,74,99,],[66,66,66,]),'empty':([46,74,97,99,102,222,],[68,68,133,68,144,233,]),'conditions':([52,63,108,],[79,96,148,]),'condition':([52,63,105,108,],[80,80,146,80,]),'condition_connector':([80,122,123,125,196,],[108,168,170,172,170,]),'condition_operator':([81,83,84,85,117,],[113,118,119,120,162,]),'booloperations':([92,172,],[124,195,]),'booloperation':([92,172,],[125,125,]),'map_content':([97,],[131,]),'map_pairs':([97,178,],[132,202,]),'map_pair':([97,178,],[134,134,]),'map_key':([97,178,],[135,135,]),'optFunction_argumentsExpression':([102,],[142,]),'condition_values':([113,162,],[152,188,]),'negation_values':([113,162,],[153,153,]),'deniable_values':([113,158,162,],[157,187,157,]),'optFunction_arguments':([143,208,],[182,219,]),'optFunction_argument':([143,208,],[183,183,]),'map_value':([179,],[203,]),'insidelist':([214,215,236,],[224,226,244,]),'opt_value':([222,],[230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> class","S'",1,None,None,None),
  ('class -> class_content_repeat','class',1,'p_class','main.py',148),
  ('class_content -> map','class_content',1,'p_class_content_map','main.py',151),
  ('class_content -> ifElseStatement','class_content',1,'p_class_content_ifElse','main.py',154),
  ('class_content -> function_lambda','class_content',1,'p_class_content_lambdaFunction','main.py',157),
  ('class_content -> declarationExpression','class_content',1,'p_class_content_declarationExpression','main.py',160),
  ('class_content -> forStatement','class_content',1,'p_class_content_for','main.py',163),
  ('class_content -> while','class_content',1,'p_class_content_while','main.py',167),
  ('class_content -> stack','class_content',1,'p_class_content_stack','main.py',171),
  ('class_content -> inferedReturnFunction','class_content',1,'p_class_content_inferedFunction','main.py',175),
  ('class_content -> expression SEMICOLON','class_content',2,'p_class_content_expression','main.py',178),
  ('class_content_repeat -> class_content','class_content_repeat',1,'p_class_content_repeat','main.py',181),
  ('class_content_repeat -> class_content_repeat class_content','class_content_repeat',2,'p_class_content_repeat','main.py',182),
  ('class_content -> bool','class_content',1,'p_class_content_bool','main.py',186),
  ('class_content -> semanticlist','class_content',1,'p_class_content_semanticlist','main.py',190),
  ('map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON','map',7,'p_map','main.py',194),
  ('map_identifier -> MAP','map_identifier',1,'p_map_identifier','main.py',197),
  ('map_identifier -> MAP map_type_specified','map_identifier',2,'p_map_identifier','main.py',198),
  ('map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN','map_type_specified',5,'p_map_type_specified','main.py',202),
  ('datatype -> returnType','datatype',1,'p_datatype','main.py',205),
  ('datatype -> VAR','datatype',1,'p_datatype','main.py',206),
  ('returnType -> INT','returnType',1,'p_returnType','main.py',209),
  ('returnType -> STRING','returnType',1,'p_returnType','main.py',210),
  ('returnType -> BOOL','returnType',1,'p_returnType','main.py',211),
  ('returnType -> DOUBLE','returnType',1,'p_returnType','main.py',212),
  ('returnType -> DYNAMIC','returnType',1,'p_returnType','main.py',213),
  ('returnType -> VOID','returnType',1,'p_returnType','main.py',214),
  ('returnType -> map_identifier','returnType',1,'p_returnType','main.py',215),
  ('empty -> <empty>','empty',0,'p_empty','main.py',219),
  ('map_content -> map_pairs','map_content',1,'p_map_content','main.py',221),
  ('map_content -> empty','map_content',1,'p_map_content','main.py',222),
  ('map_pair -> map_key COLON map_value','map_pair',3,'p_map_pair','main.py',225),
  ('map_pairs -> map_pair','map_pairs',1,'p_map_pairs','main.py',228),
  ('map_pairs -> map_pair COMMA map_pairs','map_pairs',3,'p_map_pairs','main.py',229),
  ('map_key -> value','map_key',1,'p_map_key','main.py',232),
  ('map_value -> value','map_value',1,'p_map_value','main.py',235),
  ('ifElseStatement -> ifStatement','ifElseStatement',1,'p_ifElseStatement','main.py',239),
  ('ifElseStatement -> ifStatement elifStatement_repeat','ifElseStatement',2,'p_ifElseStatement','main.py',240),
  ('elifStatement_repeat -> elifStatement','elifStatement_repeat',1,'p_elifStatement_repeat','main.py',244),
  ('elifStatement_repeat -> elifStatement elifStatement_repeat','elifStatement_repeat',2,'p_elifStatement_repeat','main.py',245),
  ('ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET','ifStatement',7,'p_ifStatement','main.py',248),
  ('elifStatement -> ELSE ifStatement','elifStatement',2,'p_elifStatement','main.py',252),
  ('elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET','elifStatement',4,'p_elseStatement','main.py',255),
  ('forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET','forStatement',10,'p_forStatement','main.py',259),
  ('stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON','stack',11,'p_stack','main.py',267),
  ('while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET','while',7,'p_whileStatement','main.py',271),
  ('stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON','stack',10,'p_stackStatement','main.py',274),
  ('stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON','stack',10,'p_stackStatement','main.py',275),
  ('inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET','inferedReturnFunction',9,'p_inferedReturnFunction','main.py',279),
  ('value -> INTEGER','value',1,'p_value','main.py',283),
  ('value -> FLOAT','value',1,'p_value','main.py',284),
  ('value -> STR','value',1,'p_value','main.py',285),
  ('value -> BOOLEAN','value',1,'p_value','main.py',286),
  ('value -> IDENTIFIER','value',1,'p_value','main.py',287),
  ('value -> boolvalue','value',1,'p_value','main.py',288),
  ('opt_value -> value','opt_value',1,'p_opt_value','main.py',291),
  ('opt_value -> empty','opt_value',1,'p_opt_value','main.py',292),
  ('deniable_values -> IDENTIFIER','deniable_values',1,'p_deniable_values','main.py',295),
  ('deniable_values -> BOOLEAN','deniable_values',1,'p_deniable_values','main.py',296),
  ('negation_values -> deniable_values','negation_values',1,'p_negation_values','main.py',299),
  ('negation_values -> EXMARK deniable_values','negation_values',2,'p_negation_values','main.py',300),
  ('condition_values -> negation_values','condition_values',1,'p_condition_values','main.py',304),
  ('condition_values -> INTEGER','condition_values',1,'p_condition_values','main.py',305),
  ('condition_values -> FLOAT','condition_values',1,'p_condition_values','main.py',306),
  ('condition_values -> STR','condition_values',1,'p_condition_values','main.py',307),
  ('condition_operator -> DOUBLEQUAL','condition_operator',1,'p_condition_operator','main.py',310),
  ('condition_operator -> LESSTHAN','condition_operator',1,'p_condition_operator','main.py',311),
  ('condition_operator -> GREATERTHAN','condition_operator',1,'p_condition_operator','main.py',312),
  ('condition_operator -> LESSTHAN EQUAL','condition_operator',2,'p_condition_operator','main.py',313),
  ('condition_operator -> GREATERTHAN EQUAL','condition_operator',2,'p_condition_operator','main.py',314),
  ('number -> FLOAT','number',1,'p_number','main.py',317),
  ('number -> INTEGER','number',1,'p_number','main.py',318),
  ('condition -> IDENTIFIER condition_operator condition_values','condition',3,'p_condition','main.py',321),
  ('condition -> EXMARK IDENTIFIER condition_operator condition_values','condition',4,'p_condition','main.py',322),
  ('condition -> BOOLEAN condition_operator BOOLEAN','condition',3,'p_condition','main.py',323),
  ('condition -> number condition_operator number','condition',3,'p_condition','main.py',324),
  ('condition -> STR condition_operator STR','condition',3,'p_condition','main.py',325),
  ('conditions -> condition','conditions',1,'p_conditions','main.py',329),
  ('conditions -> condition condition_connector conditions','conditions',3,'p_conditions','main.py',330),
  ('condition_connector -> AND','condition_connector',1,'p_condition_connector','main.py',334),
  ('condition_connector -> OR','condition_connector',1,'p_condition_connector','main.py',335),
  ('condition_connector -> AMPERSAND AMPERSAND','condition_connector',2,'p_condition_connector','main.py',336),
  ('condition_connector -> PIPELINE PIPELINE','condition_connector',2,'p_condition_connector','main.py',337),
  ('function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON','function_lambda',10,'p_function_lambda','main.py',341),
  ('function_argument -> datatype IDENTIFIER','function_argument',2,'p_function_argument','main.py',345),
  ('function_argument -> empty','function_argument',1,'p_function_argument','main.py',346),
  ('function_arguments_repeat -> function_argument','function_arguments_repeat',1,'p_function_arguments_repeat','main.py',350),
  ('function_arguments_repeat -> function_argument COMMA function_arguments_repeat','function_arguments_repeat',3,'p_function_arguments_repeat','main.py',351),
  ('optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET','optFunction_argumentsExpression',3,'p_optFunction_argumentsExpression','main.py',355),
  ('optFunction_argumentsExpression -> empty','optFunction_argumentsExpression',1,'p_optFunction_argumentsExpression','main.py',356),
  ('optFunction_argument -> REQUIRED datatype IDENTIFIER','optFunction_argument',3,'p_optFunction_argument','main.py',359),
  ('optFunction_arguments -> optFunction_argument','optFunction_arguments',1,'p_optFunction_arguments','main.py',364),
  ('optFunction_arguments -> optFunction_argument COMMA optFunction_arguments','optFunction_arguments',3,'p_optFunction_arguments','main.py',365),
  ('expression -> operableTypes operatorExpression operableTypes','expression',3,'p_expression','main.py',369),
  ('expression -> value','expression',1,'p_expression','main.py',370),
  ('expression -> operableTypes operatorExpression operatorExpression','expression',3,'p_expression','main.py',371),
  ('operableTypes -> IDENTIFIER','operableTypes',1,'p_operablTypes','main.py',375),
  ('operableTypes -> number','operableTypes',1,'p_operablTypes','main.py',376),
  ('operatorExpression -> PLUS','operatorExpression',1,'p_operatorExpression','main.py',379),
  ('operatorExpression -> MINUS','operatorExpression',1,'p_operatorExpression','main.py',380),
  ('operatorExpression -> TIMES','operatorExpression',1,'p_operatorExpression','main.py',381),
  ('operatorExpression -> DIVISION','operatorExpression',1,'p_operatorExpression','main.py',382),
  ('declarationExpression -> datatype IDENTIFIER SEMICOLON','declarationExpression',3,'p_declarationExpression','main.py',386),
  ('declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON','declarationExpression',5,'p_declarationExpression_asign','main.py',390),
  ('boolvalue -> TRUE','boolvalue',1,'p_boolvalue','main.py',395),
  ('boolvalue -> FALSE','boolvalue',1,'p_boolvalue','main.py',396),
  ('bool -> BOOL IDENTIFIER EQUAL boolvalue SEMICOLON','bool',5,'p_semanticbool','main.py',400),
  ('bool -> BOOL IDENTIFIER EQUAL booloperations SEMICOLON','bool',5,'p_semanticbool','main.py',401),
  ('booloperation -> boolvalue condition_connector boolvalue','booloperation',3,'p_booloperation','main.py',405),
  ('booloperation -> IDENTIFIER condition_connector boolvalue','booloperation',3,'p_booloperation','main.py',406),
  ('booloperation -> IDENTIFIER condition_connector IDENTIFIER','booloperation',3,'p_booloperation','main.py',407),
  ('booloperation -> boolvalue condition_connector IDENTIFIER','booloperation',3,'p_booloperation','main.py',408),
  ('booloperations -> booloperation','booloperations',1,'p_booloperations','main.py',412),
  ('booloperations -> booloperation condition_connector booloperations','booloperations',3,'p_booloperations','main.py',413),
  ('semanticlist -> LIST LESSTHAN datatype GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',417),
  ('semanticlist -> LIST LESSTHAN DYNAMIC GREATERTHAN IDENTIFIER EQUAL LSQUAREBRACKET insidelist RSQUAREBRACKET SEMICOLON','semanticlist',10,'p_semanticlist','main.py',418),
  ('insidelist -> value','insidelist',1,'p_insidelist','main.py',422),
  ('insidelist -> value COMMA insidelist','insidelist',3,'p_insidelist','main.py',423),
]
