Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    APOSTROPHE
    ASYNC
    AWAIT
    CATCH
    CLOSE
    COMMENT
    DOLLAR
    DOUBQUOTMARK
    EXIT
    FILE
    IMPORT
    IN
    IS
    ITERABLE
    LIST
    LSQUAREBRACKET
    MAIN
    METHOD
    NOTEQUAL
    OPENWRITE
    PRINT
    READLINESYNC
    RSQUAREBRACKET
    SET
    TRY
    WHILE
    WRITE

Grammar

Rule 0     S' -> class
Rule 1     class -> class_content_repeat
Rule 2     class_content -> map
Rule 3     class_content -> ifElseStatement
Rule 4     class_content -> function_lambda
Rule 5     class_content -> declarationExpression
Rule 6     class_content -> forStatement
Rule 7     class_content -> inferedReturnFunction
Rule 8     class_content -> expression SEMICOLON
Rule 9     class_content_repeat -> class_content
Rule 10    class_content_repeat -> class_content_repeat class_content
Rule 11    map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
Rule 12    map_identifier -> MAP
Rule 13    map_identifier -> MAP map_type_specified
Rule 14    map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN
Rule 15    datatype -> returnType
Rule 16    datatype -> VAR
Rule 17    returnType -> INT
Rule 18    returnType -> STRING
Rule 19    returnType -> BOOL
Rule 20    returnType -> DOUBLE
Rule 21    returnType -> DYNAMIC
Rule 22    returnType -> VOID
Rule 23    returnType -> map_identifier
Rule 24    empty -> <empty>
Rule 25    map_content -> map_pairs
Rule 26    map_content -> empty
Rule 27    map_pair -> map_key COLON map_value
Rule 28    map_pairs -> map_pair
Rule 29    map_pairs -> map_pair COMMA map_pairs
Rule 30    map_key -> value
Rule 31    map_value -> value
Rule 32    ifElseStatement -> ifStatement
Rule 33    ifElseStatement -> ifStatement elifStatement_repeat
Rule 34    elifStatement_repeat -> elifStatement
Rule 35    elifStatement_repeat -> elifStatement elifStatement_repeat
Rule 36    ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 37    elifStatement -> ELSE ifStatement
Rule 38    elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 39    forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 40    taskStatement -> IDENTIFIER operatorExpression operatorExpression
Rule 41    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
Rule 42    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN SEMICOLON
Rule 43    stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
Rule 44    inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
Rule 45    value -> INTEGER
Rule 46    value -> FLOAT
Rule 47    value -> STR
Rule 48    value -> BOOLEAN
Rule 49    value -> IDENTIFIER
Rule 50    opt_value -> value
Rule 51    opt_value -> empty
Rule 52    deniable_values -> IDENTIFIER
Rule 53    deniable_values -> BOOLEAN
Rule 54    negation_values -> deniable_values
Rule 55    negation_values -> EXMARK deniable_values
Rule 56    condition_values -> negation_values
Rule 57    condition_values -> INTEGER
Rule 58    condition_values -> FLOAT
Rule 59    condition_values -> STR
Rule 60    condition_operator -> DOUBLEQUAL
Rule 61    condition_operator -> LESSTHAN
Rule 62    condition_operator -> GREATERTHAN
Rule 63    condition_operator -> LESSTHAN EQUAL
Rule 64    condition_operator -> GREATERTHAN EQUAL
Rule 65    number -> FLOAT
Rule 66    number -> INTEGER
Rule 67    condition -> IDENTIFIER condition_operator condition_values
Rule 68    condition -> EXMARK IDENTIFIER condition_operator condition_values
Rule 69    condition -> BOOLEAN condition_operator BOOLEAN
Rule 70    condition -> number condition_operator number
Rule 71    condition -> STR condition_operator STR
Rule 72    condition -> IDENTIFIER condition_operator IDENTIFIER
Rule 73    conditions -> condition
Rule 74    conditions -> condition condition_connector conditions
Rule 75    condition_connector -> AND
Rule 76    condition_connector -> OR
Rule 77    function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
Rule 78    function_argument -> datatype IDENTIFIER
Rule 79    function_argument -> empty
Rule 80    function_arguments_repeat -> function_argument
Rule 81    function_arguments_repeat -> function_argument COMMA function_arguments_repeat
Rule 82    optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET
Rule 83    optFunction_argumentsExpression -> empty
Rule 84    optFunction_argument -> REQUIRED datatype IDENTIFIER
Rule 85    optFunction_arguments -> optFunction_argument
Rule 86    optFunction_arguments -> optFunction_argument COMMA optFunction_arguments
Rule 87    expression -> operableTypes operatorExpression operableTypes
Rule 88    expression -> value
Rule 89    operableTypes -> IDENTIFIER
Rule 90    operableTypes -> number
Rule 91    operatorExpression -> PLUS
Rule 92    operatorExpression -> MINUS
Rule 93    operatorExpression -> TIMES
Rule 94    operatorExpression -> DIVISION
Rule 95    declarationExpression -> datatype IDENTIFIER SEMICOLON
Rule 96    declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 75
APOSTROPHE           : 
ASYNC                : 
AWAIT                : 
BOOL                 : 19
BOOLEAN              : 48 53 69 69
CATCH                : 
CLOSE                : 
COLON                : 27
COMMA                : 14 29 81 86
COMMENT              : 
DIVISION             : 94
DOLLAR               : 
DOT                  : 43
DOUBLE               : 20
DOUBLEQUAL           : 60
DOUBQUOTMARK         : 
DYNAMIC              : 21
ELSE                 : 37 38
EQUAL                : 11 41 42 43 63 64 77 96
EXIT                 : 
EXMARK               : 55 68
FILE                 : 
FINAL                : 41 42 43
FLOAT                : 46 58 65
FOR                  : 39
GREATERTHAN          : 14 41 42 62 64 77
IDENTIFIER           : 11 40 41 42 43 43 44 49 52 67 68 72 72 77 78 84 89 95 96
IF                   : 36
IMPORT               : 
IN                   : 
INT                  : 17
INTEGER              : 45 57 66
IS                   : 
ITERABLE             : 
LCURLYBRACKET        : 11 36 38 39 44 82
LESSTHAN             : 14 41 42 61 63
LIST                 : 
LPAREN               : 36 39 41 43 44 77
LSQUAREBRACKET       : 
MAIN                 : 
MAP                  : 12 13
METHOD               : 
MINUS                : 92
NOTEQUAL             : 
OF                   : 43
OPENWRITE            : 
OR                   : 76
PLUS                 : 91
PRINT                : 
RCURLYBRACKET        : 11 36 38 39 44 82
READLINESYNC         : 
REQUIRED             : 84
RETURN               : 44
RPAREN               : 36 39 41 43 44 77
RSQUAREBRACKET       : 
SEMICOLON            : 8 11 39 39 41 42 43 44 77 95 96
SET                  : 
STACK                : 41 42 43
STR                  : 47 59 71 71
STRING               : 18
TIMES                : 93
TRY                  : 
VAR                  : 16
VOID                 : 22
WHILE                : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

class                : 0
class_content        : 9 10
class_content_repeat : 1 10 36 38 39
condition            : 39 73 74
condition_connector  : 74
condition_operator   : 67 68 69 70 71 72
condition_values     : 67 68
conditions           : 36 74
datatype             : 14 14 41 42 77 78 84 95 96
declarationExpression : 5 39
deniable_values      : 54 55
elifStatement        : 34 35
elifStatement_repeat : 33 35
empty                : 26 51 79 83
expression           : 8 44 77 96
forStatement         : 6
function_argument    : 80 81
function_arguments_repeat : 44 77 81
function_lambda      : 4
ifElseStatement      : 3
ifStatement          : 32 33 37
inferedReturnFunction : 7
map                  : 2
map_content          : 11
map_identifier       : 11 23
map_key              : 27
map_pair             : 28 29
map_pairs            : 25 29
map_type_specified   : 13
map_value            : 27
negation_values      : 56
number               : 70 70 90
operableTypes        : 87 87
operatorExpression   : 40 40 87
optFunction_argument : 85 86
optFunction_arguments : 82 86
optFunction_argumentsExpression : 77
opt_value            : 41
returnType           : 15
stack                : 
taskStatement        : 39
value                : 30 31 50 88

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . class_content_repeat
    (9) class_content_repeat -> . class_content
    (10) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class                          shift and go to state 1
    class_content_repeat           shift and go to state 2
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 1

    (0) S' -> class .



state 2

    (1) class -> class_content_repeat .
    (10) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    $end            reduce using rule 1 (class -> class_content_repeat .)
    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class_content                  shift and go to state 33
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 3

    (9) class_content_repeat -> class_content .

    FOR             reduce using rule 9 (class_content_repeat -> class_content .)
    IDENTIFIER      reduce using rule 9 (class_content_repeat -> class_content .)
    MAP             reduce using rule 9 (class_content_repeat -> class_content .)
    IF              reduce using rule 9 (class_content_repeat -> class_content .)
    VAR             reduce using rule 9 (class_content_repeat -> class_content .)
    INTEGER         reduce using rule 9 (class_content_repeat -> class_content .)
    FLOAT           reduce using rule 9 (class_content_repeat -> class_content .)
    STR             reduce using rule 9 (class_content_repeat -> class_content .)
    BOOLEAN         reduce using rule 9 (class_content_repeat -> class_content .)
    INT             reduce using rule 9 (class_content_repeat -> class_content .)
    STRING          reduce using rule 9 (class_content_repeat -> class_content .)
    BOOL            reduce using rule 9 (class_content_repeat -> class_content .)
    DOUBLE          reduce using rule 9 (class_content_repeat -> class_content .)
    DYNAMIC         reduce using rule 9 (class_content_repeat -> class_content .)
    VOID            reduce using rule 9 (class_content_repeat -> class_content .)
    $end            reduce using rule 9 (class_content_repeat -> class_content .)
    RCURLYBRACKET   reduce using rule 9 (class_content_repeat -> class_content .)


state 4

    (2) class_content -> map .

    FOR             reduce using rule 2 (class_content -> map .)
    IDENTIFIER      reduce using rule 2 (class_content -> map .)
    MAP             reduce using rule 2 (class_content -> map .)
    IF              reduce using rule 2 (class_content -> map .)
    VAR             reduce using rule 2 (class_content -> map .)
    INTEGER         reduce using rule 2 (class_content -> map .)
    FLOAT           reduce using rule 2 (class_content -> map .)
    STR             reduce using rule 2 (class_content -> map .)
    BOOLEAN         reduce using rule 2 (class_content -> map .)
    INT             reduce using rule 2 (class_content -> map .)
    STRING          reduce using rule 2 (class_content -> map .)
    BOOL            reduce using rule 2 (class_content -> map .)
    DOUBLE          reduce using rule 2 (class_content -> map .)
    DYNAMIC         reduce using rule 2 (class_content -> map .)
    VOID            reduce using rule 2 (class_content -> map .)
    $end            reduce using rule 2 (class_content -> map .)
    RCURLYBRACKET   reduce using rule 2 (class_content -> map .)


state 5

    (3) class_content -> ifElseStatement .

    FOR             reduce using rule 3 (class_content -> ifElseStatement .)
    IDENTIFIER      reduce using rule 3 (class_content -> ifElseStatement .)
    MAP             reduce using rule 3 (class_content -> ifElseStatement .)
    IF              reduce using rule 3 (class_content -> ifElseStatement .)
    VAR             reduce using rule 3 (class_content -> ifElseStatement .)
    INTEGER         reduce using rule 3 (class_content -> ifElseStatement .)
    FLOAT           reduce using rule 3 (class_content -> ifElseStatement .)
    STR             reduce using rule 3 (class_content -> ifElseStatement .)
    BOOLEAN         reduce using rule 3 (class_content -> ifElseStatement .)
    INT             reduce using rule 3 (class_content -> ifElseStatement .)
    STRING          reduce using rule 3 (class_content -> ifElseStatement .)
    BOOL            reduce using rule 3 (class_content -> ifElseStatement .)
    DOUBLE          reduce using rule 3 (class_content -> ifElseStatement .)
    DYNAMIC         reduce using rule 3 (class_content -> ifElseStatement .)
    VOID            reduce using rule 3 (class_content -> ifElseStatement .)
    $end            reduce using rule 3 (class_content -> ifElseStatement .)
    RCURLYBRACKET   reduce using rule 3 (class_content -> ifElseStatement .)


state 6

    (4) class_content -> function_lambda .

    FOR             reduce using rule 4 (class_content -> function_lambda .)
    IDENTIFIER      reduce using rule 4 (class_content -> function_lambda .)
    MAP             reduce using rule 4 (class_content -> function_lambda .)
    IF              reduce using rule 4 (class_content -> function_lambda .)
    VAR             reduce using rule 4 (class_content -> function_lambda .)
    INTEGER         reduce using rule 4 (class_content -> function_lambda .)
    FLOAT           reduce using rule 4 (class_content -> function_lambda .)
    STR             reduce using rule 4 (class_content -> function_lambda .)
    BOOLEAN         reduce using rule 4 (class_content -> function_lambda .)
    INT             reduce using rule 4 (class_content -> function_lambda .)
    STRING          reduce using rule 4 (class_content -> function_lambda .)
    BOOL            reduce using rule 4 (class_content -> function_lambda .)
    DOUBLE          reduce using rule 4 (class_content -> function_lambda .)
    DYNAMIC         reduce using rule 4 (class_content -> function_lambda .)
    VOID            reduce using rule 4 (class_content -> function_lambda .)
    $end            reduce using rule 4 (class_content -> function_lambda .)
    RCURLYBRACKET   reduce using rule 4 (class_content -> function_lambda .)


state 7

    (5) class_content -> declarationExpression .

    FOR             reduce using rule 5 (class_content -> declarationExpression .)
    IDENTIFIER      reduce using rule 5 (class_content -> declarationExpression .)
    MAP             reduce using rule 5 (class_content -> declarationExpression .)
    IF              reduce using rule 5 (class_content -> declarationExpression .)
    VAR             reduce using rule 5 (class_content -> declarationExpression .)
    INTEGER         reduce using rule 5 (class_content -> declarationExpression .)
    FLOAT           reduce using rule 5 (class_content -> declarationExpression .)
    STR             reduce using rule 5 (class_content -> declarationExpression .)
    BOOLEAN         reduce using rule 5 (class_content -> declarationExpression .)
    INT             reduce using rule 5 (class_content -> declarationExpression .)
    STRING          reduce using rule 5 (class_content -> declarationExpression .)
    BOOL            reduce using rule 5 (class_content -> declarationExpression .)
    DOUBLE          reduce using rule 5 (class_content -> declarationExpression .)
    DYNAMIC         reduce using rule 5 (class_content -> declarationExpression .)
    VOID            reduce using rule 5 (class_content -> declarationExpression .)
    $end            reduce using rule 5 (class_content -> declarationExpression .)
    RCURLYBRACKET   reduce using rule 5 (class_content -> declarationExpression .)


state 8

    (6) class_content -> forStatement .

    FOR             reduce using rule 6 (class_content -> forStatement .)
    IDENTIFIER      reduce using rule 6 (class_content -> forStatement .)
    MAP             reduce using rule 6 (class_content -> forStatement .)
    IF              reduce using rule 6 (class_content -> forStatement .)
    VAR             reduce using rule 6 (class_content -> forStatement .)
    INTEGER         reduce using rule 6 (class_content -> forStatement .)
    FLOAT           reduce using rule 6 (class_content -> forStatement .)
    STR             reduce using rule 6 (class_content -> forStatement .)
    BOOLEAN         reduce using rule 6 (class_content -> forStatement .)
    INT             reduce using rule 6 (class_content -> forStatement .)
    STRING          reduce using rule 6 (class_content -> forStatement .)
    BOOL            reduce using rule 6 (class_content -> forStatement .)
    DOUBLE          reduce using rule 6 (class_content -> forStatement .)
    DYNAMIC         reduce using rule 6 (class_content -> forStatement .)
    VOID            reduce using rule 6 (class_content -> forStatement .)
    $end            reduce using rule 6 (class_content -> forStatement .)
    RCURLYBRACKET   reduce using rule 6 (class_content -> forStatement .)


state 9

    (7) class_content -> inferedReturnFunction .

    FOR             reduce using rule 7 (class_content -> inferedReturnFunction .)
    IDENTIFIER      reduce using rule 7 (class_content -> inferedReturnFunction .)
    MAP             reduce using rule 7 (class_content -> inferedReturnFunction .)
    IF              reduce using rule 7 (class_content -> inferedReturnFunction .)
    VAR             reduce using rule 7 (class_content -> inferedReturnFunction .)
    INTEGER         reduce using rule 7 (class_content -> inferedReturnFunction .)
    FLOAT           reduce using rule 7 (class_content -> inferedReturnFunction .)
    STR             reduce using rule 7 (class_content -> inferedReturnFunction .)
    BOOLEAN         reduce using rule 7 (class_content -> inferedReturnFunction .)
    INT             reduce using rule 7 (class_content -> inferedReturnFunction .)
    STRING          reduce using rule 7 (class_content -> inferedReturnFunction .)
    BOOL            reduce using rule 7 (class_content -> inferedReturnFunction .)
    DOUBLE          reduce using rule 7 (class_content -> inferedReturnFunction .)
    DYNAMIC         reduce using rule 7 (class_content -> inferedReturnFunction .)
    VOID            reduce using rule 7 (class_content -> inferedReturnFunction .)
    $end            reduce using rule 7 (class_content -> inferedReturnFunction .)
    RCURLYBRACKET   reduce using rule 7 (class_content -> inferedReturnFunction .)


state 10

    (8) class_content -> expression . SEMICOLON

    SEMICOLON       shift and go to state 34


state 11

    (11) map -> map_identifier . IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (23) returnType -> map_identifier .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 35

  ! IDENTIFIER      [ reduce using rule 23 (returnType -> map_identifier .) ]


state 12

    (44) inferedReturnFunction -> IDENTIFIER . LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) operableTypes -> IDENTIFIER .
    (49) value -> IDENTIFIER .

    LPAREN          shift and go to state 36
    PLUS            reduce using rule 89 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 89 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 89 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 89 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (value -> IDENTIFIER .)


state 13

    (32) ifElseStatement -> ifStatement .
    (33) ifElseStatement -> ifStatement . elifStatement_repeat
    (34) elifStatement_repeat -> . elifStatement
    (35) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (37) elifStatement -> . ELSE ifStatement
    (38) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    FOR             reduce using rule 32 (ifElseStatement -> ifStatement .)
    IDENTIFIER      reduce using rule 32 (ifElseStatement -> ifStatement .)
    MAP             reduce using rule 32 (ifElseStatement -> ifStatement .)
    IF              reduce using rule 32 (ifElseStatement -> ifStatement .)
    VAR             reduce using rule 32 (ifElseStatement -> ifStatement .)
    INTEGER         reduce using rule 32 (ifElseStatement -> ifStatement .)
    FLOAT           reduce using rule 32 (ifElseStatement -> ifStatement .)
    STR             reduce using rule 32 (ifElseStatement -> ifStatement .)
    BOOLEAN         reduce using rule 32 (ifElseStatement -> ifStatement .)
    INT             reduce using rule 32 (ifElseStatement -> ifStatement .)
    STRING          reduce using rule 32 (ifElseStatement -> ifStatement .)
    BOOL            reduce using rule 32 (ifElseStatement -> ifStatement .)
    DOUBLE          reduce using rule 32 (ifElseStatement -> ifStatement .)
    DYNAMIC         reduce using rule 32 (ifElseStatement -> ifStatement .)
    VOID            reduce using rule 32 (ifElseStatement -> ifStatement .)
    $end            reduce using rule 32 (ifElseStatement -> ifStatement .)
    RCURLYBRACKET   reduce using rule 32 (ifElseStatement -> ifStatement .)
    ELSE            shift and go to state 39

    elifStatement_repeat           shift and go to state 37
    elifStatement                  shift and go to state 38

state 14

    (77) function_lambda -> datatype . IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> datatype . IDENTIFIER SEMICOLON
    (96) declarationExpression -> datatype . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 40


state 15

    (39) forStatement -> FOR . LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LPAREN          shift and go to state 41


state 16

    (87) expression -> operableTypes . operatorExpression operableTypes
    (91) operatorExpression -> . PLUS
    (92) operatorExpression -> . MINUS
    (93) operatorExpression -> . TIMES
    (94) operatorExpression -> . DIVISION

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVISION        shift and go to state 46

    operatorExpression             shift and go to state 42

state 17

    (88) expression -> value .

    SEMICOLON       reduce using rule 88 (expression -> value .)


state 18

    (12) map_identifier -> MAP .
    (13) map_identifier -> MAP . map_type_specified
    (14) map_type_specified -> . LESSTHAN datatype COMMA datatype GREATERTHAN

    IDENTIFIER      reduce using rule 12 (map_identifier -> MAP .)
    COMMA           reduce using rule 12 (map_identifier -> MAP .)
    GREATERTHAN     reduce using rule 12 (map_identifier -> MAP .)
    LESSTHAN        shift and go to state 48

    map_type_specified             shift and go to state 47

state 19

    (36) ifStatement -> IF . LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LPAREN          shift and go to state 49


state 20

    (15) datatype -> returnType .

    IDENTIFIER      reduce using rule 15 (datatype -> returnType .)
    COMMA           reduce using rule 15 (datatype -> returnType .)
    GREATERTHAN     reduce using rule 15 (datatype -> returnType .)


state 21

    (16) datatype -> VAR .

    IDENTIFIER      reduce using rule 16 (datatype -> VAR .)
    COMMA           reduce using rule 16 (datatype -> VAR .)
    GREATERTHAN     reduce using rule 16 (datatype -> VAR .)


state 22

    (90) operableTypes -> number .

    PLUS            reduce using rule 90 (operableTypes -> number .)
    MINUS           reduce using rule 90 (operableTypes -> number .)
    TIMES           reduce using rule 90 (operableTypes -> number .)
    DIVISION        reduce using rule 90 (operableTypes -> number .)
    SEMICOLON       reduce using rule 90 (operableTypes -> number .)


state 23

    (45) value -> INTEGER .
    (66) number -> INTEGER .

    SEMICOLON       reduce using rule 45 (value -> INTEGER .)
    PLUS            reduce using rule 66 (number -> INTEGER .)
    MINUS           reduce using rule 66 (number -> INTEGER .)
    TIMES           reduce using rule 66 (number -> INTEGER .)
    DIVISION        reduce using rule 66 (number -> INTEGER .)


state 24

    (46) value -> FLOAT .
    (65) number -> FLOAT .

    SEMICOLON       reduce using rule 46 (value -> FLOAT .)
    PLUS            reduce using rule 65 (number -> FLOAT .)
    MINUS           reduce using rule 65 (number -> FLOAT .)
    TIMES           reduce using rule 65 (number -> FLOAT .)
    DIVISION        reduce using rule 65 (number -> FLOAT .)


state 25

    (47) value -> STR .

    SEMICOLON       reduce using rule 47 (value -> STR .)
    COLON           reduce using rule 47 (value -> STR .)
    COMMA           reduce using rule 47 (value -> STR .)
    RCURLYBRACKET   reduce using rule 47 (value -> STR .)


state 26

    (48) value -> BOOLEAN .

    SEMICOLON       reduce using rule 48 (value -> BOOLEAN .)
    COLON           reduce using rule 48 (value -> BOOLEAN .)
    COMMA           reduce using rule 48 (value -> BOOLEAN .)
    RCURLYBRACKET   reduce using rule 48 (value -> BOOLEAN .)


state 27

    (17) returnType -> INT .

    IDENTIFIER      reduce using rule 17 (returnType -> INT .)
    COMMA           reduce using rule 17 (returnType -> INT .)
    GREATERTHAN     reduce using rule 17 (returnType -> INT .)


state 28

    (18) returnType -> STRING .

    IDENTIFIER      reduce using rule 18 (returnType -> STRING .)
    COMMA           reduce using rule 18 (returnType -> STRING .)
    GREATERTHAN     reduce using rule 18 (returnType -> STRING .)


state 29

    (19) returnType -> BOOL .

    IDENTIFIER      reduce using rule 19 (returnType -> BOOL .)
    COMMA           reduce using rule 19 (returnType -> BOOL .)
    GREATERTHAN     reduce using rule 19 (returnType -> BOOL .)


state 30

    (20) returnType -> DOUBLE .

    IDENTIFIER      reduce using rule 20 (returnType -> DOUBLE .)
    COMMA           reduce using rule 20 (returnType -> DOUBLE .)
    GREATERTHAN     reduce using rule 20 (returnType -> DOUBLE .)


state 31

    (21) returnType -> DYNAMIC .

    IDENTIFIER      reduce using rule 21 (returnType -> DYNAMIC .)
    COMMA           reduce using rule 21 (returnType -> DYNAMIC .)
    GREATERTHAN     reduce using rule 21 (returnType -> DYNAMIC .)


state 32

    (22) returnType -> VOID .

    IDENTIFIER      reduce using rule 22 (returnType -> VOID .)
    COMMA           reduce using rule 22 (returnType -> VOID .)
    GREATERTHAN     reduce using rule 22 (returnType -> VOID .)


state 33

    (10) class_content_repeat -> class_content_repeat class_content .

    FOR             reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    IDENTIFIER      reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    MAP             reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    IF              reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    VAR             reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    INTEGER         reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    FLOAT           reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    STR             reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    BOOLEAN         reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    INT             reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    STRING          reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    BOOL            reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    DOUBLE          reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    DYNAMIC         reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    VOID            reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    $end            reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)
    RCURLYBRACKET   reduce using rule 10 (class_content_repeat -> class_content_repeat class_content .)


state 34

    (8) class_content -> expression SEMICOLON .

    FOR             reduce using rule 8 (class_content -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 8 (class_content -> expression SEMICOLON .)
    MAP             reduce using rule 8 (class_content -> expression SEMICOLON .)
    IF              reduce using rule 8 (class_content -> expression SEMICOLON .)
    VAR             reduce using rule 8 (class_content -> expression SEMICOLON .)
    INTEGER         reduce using rule 8 (class_content -> expression SEMICOLON .)
    FLOAT           reduce using rule 8 (class_content -> expression SEMICOLON .)
    STR             reduce using rule 8 (class_content -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 8 (class_content -> expression SEMICOLON .)
    INT             reduce using rule 8 (class_content -> expression SEMICOLON .)
    STRING          reduce using rule 8 (class_content -> expression SEMICOLON .)
    BOOL            reduce using rule 8 (class_content -> expression SEMICOLON .)
    DOUBLE          reduce using rule 8 (class_content -> expression SEMICOLON .)
    DYNAMIC         reduce using rule 8 (class_content -> expression SEMICOLON .)
    VOID            reduce using rule 8 (class_content -> expression SEMICOLON .)
    $end            reduce using rule 8 (class_content -> expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 8 (class_content -> expression SEMICOLON .)


state 35

    (11) map -> map_identifier IDENTIFIER . EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    EQUAL           shift and go to state 50


state 36

    (44) inferedReturnFunction -> IDENTIFIER LPAREN . function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (80) function_arguments_repeat -> . function_argument
    (81) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (78) function_argument -> . datatype IDENTIFIER
    (79) function_argument -> . empty
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (24) empty -> .
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    COMMA           reduce using rule 24 (empty -> .)
    RPAREN          reduce using rule 24 (empty -> .)
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    function_arguments_repeat      shift and go to state 51
    function_argument              shift and go to state 52
    datatype                       shift and go to state 53
    empty                          shift and go to state 54
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 37

    (33) ifElseStatement -> ifStatement elifStatement_repeat .

    FOR             reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    IDENTIFIER      reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    MAP             reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    IF              reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VAR             reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STR             reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INT             reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STRING          reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOL            reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VOID            reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    $end            reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 33 (ifElseStatement -> ifStatement elifStatement_repeat .)


state 38

    (34) elifStatement_repeat -> elifStatement .
    (35) elifStatement_repeat -> elifStatement . elifStatement_repeat
    (34) elifStatement_repeat -> . elifStatement
    (35) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (37) elifStatement -> . ELSE ifStatement
    (38) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    FOR             reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    IDENTIFIER      reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    MAP             reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    IF              reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    VAR             reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    INTEGER         reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    FLOAT           reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    STR             reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    BOOLEAN         reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    INT             reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    STRING          reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    BOOL            reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    DOUBLE          reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    DYNAMIC         reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    VOID            reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    $end            reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    RCURLYBRACKET   reduce using rule 34 (elifStatement_repeat -> elifStatement .)
    ELSE            shift and go to state 39

    elifStatement                  shift and go to state 38
    elifStatement_repeat           shift and go to state 56

state 39

    (37) elifStatement -> ELSE . ifStatement
    (38) elifStatement -> ELSE . LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 58
    IF              shift and go to state 19

    ifStatement                    shift and go to state 57

state 40

    (77) function_lambda -> datatype IDENTIFIER . LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> datatype IDENTIFIER . SEMICOLON
    (96) declarationExpression -> datatype IDENTIFIER . EQUAL expression SEMICOLON

    LPAREN          shift and go to state 59
    SEMICOLON       shift and go to state 61
    EQUAL           shift and go to state 60


state 41

    (39) forStatement -> FOR LPAREN . declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    declarationExpression          shift and go to state 62
    datatype                       shift and go to state 63
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 42

    (87) expression -> operableTypes operatorExpression . operableTypes
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 65
    FLOAT           shift and go to state 66
    INTEGER         shift and go to state 67

    operableTypes                  shift and go to state 64
    number                         shift and go to state 22

state 43

    (91) operatorExpression -> PLUS .

    IDENTIFIER      reduce using rule 91 (operatorExpression -> PLUS .)
    FLOAT           reduce using rule 91 (operatorExpression -> PLUS .)
    INTEGER         reduce using rule 91 (operatorExpression -> PLUS .)
    PLUS            reduce using rule 91 (operatorExpression -> PLUS .)
    MINUS           reduce using rule 91 (operatorExpression -> PLUS .)
    TIMES           reduce using rule 91 (operatorExpression -> PLUS .)
    DIVISION        reduce using rule 91 (operatorExpression -> PLUS .)
    RPAREN          reduce using rule 91 (operatorExpression -> PLUS .)


state 44

    (92) operatorExpression -> MINUS .

    IDENTIFIER      reduce using rule 92 (operatorExpression -> MINUS .)
    FLOAT           reduce using rule 92 (operatorExpression -> MINUS .)
    INTEGER         reduce using rule 92 (operatorExpression -> MINUS .)
    PLUS            reduce using rule 92 (operatorExpression -> MINUS .)
    MINUS           reduce using rule 92 (operatorExpression -> MINUS .)
    TIMES           reduce using rule 92 (operatorExpression -> MINUS .)
    DIVISION        reduce using rule 92 (operatorExpression -> MINUS .)
    RPAREN          reduce using rule 92 (operatorExpression -> MINUS .)


state 45

    (93) operatorExpression -> TIMES .

    IDENTIFIER      reduce using rule 93 (operatorExpression -> TIMES .)
    FLOAT           reduce using rule 93 (operatorExpression -> TIMES .)
    INTEGER         reduce using rule 93 (operatorExpression -> TIMES .)
    PLUS            reduce using rule 93 (operatorExpression -> TIMES .)
    MINUS           reduce using rule 93 (operatorExpression -> TIMES .)
    TIMES           reduce using rule 93 (operatorExpression -> TIMES .)
    DIVISION        reduce using rule 93 (operatorExpression -> TIMES .)
    RPAREN          reduce using rule 93 (operatorExpression -> TIMES .)


state 46

    (94) operatorExpression -> DIVISION .

    IDENTIFIER      reduce using rule 94 (operatorExpression -> DIVISION .)
    FLOAT           reduce using rule 94 (operatorExpression -> DIVISION .)
    INTEGER         reduce using rule 94 (operatorExpression -> DIVISION .)
    PLUS            reduce using rule 94 (operatorExpression -> DIVISION .)
    MINUS           reduce using rule 94 (operatorExpression -> DIVISION .)
    TIMES           reduce using rule 94 (operatorExpression -> DIVISION .)
    DIVISION        reduce using rule 94 (operatorExpression -> DIVISION .)
    RPAREN          reduce using rule 94 (operatorExpression -> DIVISION .)


state 47

    (13) map_identifier -> MAP map_type_specified .

    IDENTIFIER      reduce using rule 13 (map_identifier -> MAP map_type_specified .)
    COMMA           reduce using rule 13 (map_identifier -> MAP map_type_specified .)
    GREATERTHAN     reduce using rule 13 (map_identifier -> MAP map_type_specified .)


state 48

    (14) map_type_specified -> LESSTHAN . datatype COMMA datatype GREATERTHAN
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    datatype                       shift and go to state 68
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 49

    (36) ifStatement -> IF LPAREN . conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (73) conditions -> . condition
    (74) conditions -> . condition condition_connector conditions
    (67) condition -> . IDENTIFIER condition_operator condition_values
    (68) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (69) condition -> . BOOLEAN condition_operator BOOLEAN
    (70) condition -> . number condition_operator number
    (71) condition -> . STR condition_operator STR
    (72) condition -> . IDENTIFIER condition_operator IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 71
    EXMARK          shift and go to state 72
    BOOLEAN         shift and go to state 73
    STR             shift and go to state 75
    FLOAT           shift and go to state 66
    INTEGER         shift and go to state 67

    conditions                     shift and go to state 69
    condition                      shift and go to state 70
    number                         shift and go to state 74

state 50

    (11) map -> map_identifier IDENTIFIER EQUAL . LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    LCURLYBRACKET   shift and go to state 76


state 51

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat . RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    RPAREN          shift and go to state 77


state 52

    (80) function_arguments_repeat -> function_argument .
    (81) function_arguments_repeat -> function_argument . COMMA function_arguments_repeat

    RPAREN          reduce using rule 80 (function_arguments_repeat -> function_argument .)
    LCURLYBRACKET   reduce using rule 80 (function_arguments_repeat -> function_argument .)
    COMMA           shift and go to state 78


state 53

    (78) function_argument -> datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 79


state 54

    (79) function_argument -> empty .

    COMMA           reduce using rule 79 (function_argument -> empty .)
    RPAREN          reduce using rule 79 (function_argument -> empty .)
    LCURLYBRACKET   reduce using rule 79 (function_argument -> empty .)


state 55

    (23) returnType -> map_identifier .

    IDENTIFIER      reduce using rule 23 (returnType -> map_identifier .)
    COMMA           reduce using rule 23 (returnType -> map_identifier .)
    GREATERTHAN     reduce using rule 23 (returnType -> map_identifier .)


state 56

    (35) elifStatement_repeat -> elifStatement elifStatement_repeat .

    FOR             reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    IDENTIFIER      reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    MAP             reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    IF              reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VAR             reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STR             reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INT             reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STRING          reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOL            reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VOID            reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    $end            reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 35 (elifStatement_repeat -> elifStatement elifStatement_repeat .)


state 57

    (37) elifStatement -> ELSE ifStatement .

    ELSE            reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    FOR             reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    IDENTIFIER      reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    MAP             reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    IF              reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    VAR             reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    INTEGER         reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    FLOAT           reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    STR             reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    BOOLEAN         reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    INT             reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    STRING          reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    BOOL            reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    DOUBLE          reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    DYNAMIC         reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    VOID            reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    $end            reduce using rule 37 (elifStatement -> ELSE ifStatement .)
    RCURLYBRACKET   reduce using rule 37 (elifStatement -> ELSE ifStatement .)


state 58

    (38) elifStatement -> ELSE LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (9) class_content_repeat -> . class_content
    (10) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class_content_repeat           shift and go to state 80
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 59

    (77) function_lambda -> datatype IDENTIFIER LPAREN . function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (80) function_arguments_repeat -> . function_argument
    (81) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (78) function_argument -> . datatype IDENTIFIER
    (79) function_argument -> . empty
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (24) empty -> .
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    COMMA           reduce using rule 24 (empty -> .)
    LCURLYBRACKET   reduce using rule 24 (empty -> .)
    RPAREN          reduce using rule 24 (empty -> .)
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    datatype                       shift and go to state 53
    function_arguments_repeat      shift and go to state 81
    function_argument              shift and go to state 52
    empty                          shift and go to state 54
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 60

    (96) declarationExpression -> datatype IDENTIFIER EQUAL . expression SEMICOLON
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 82
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26

    expression                     shift and go to state 83
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    number                         shift and go to state 22

state 61

    (95) declarationExpression -> datatype IDENTIFIER SEMICOLON .

    FOR             reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    MAP             reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    IF              reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VAR             reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INTEGER         reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STR             reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INT             reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DYNAMIC         reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    $end            reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    RCURLYBRACKET   reduce using rule 95 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)


state 62

    (39) forStatement -> FOR LPAREN declarationExpression . SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    SEMICOLON       shift and go to state 84


state 63

    (95) declarationExpression -> datatype . IDENTIFIER SEMICOLON
    (96) declarationExpression -> datatype . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 85


state 64

    (87) expression -> operableTypes operatorExpression operableTypes .

    SEMICOLON       reduce using rule 87 (expression -> operableTypes operatorExpression operableTypes .)


state 65

    (89) operableTypes -> IDENTIFIER .

    SEMICOLON       reduce using rule 89 (operableTypes -> IDENTIFIER .)


state 66

    (65) number -> FLOAT .

    SEMICOLON       reduce using rule 65 (number -> FLOAT .)
    DOUBLEQUAL      reduce using rule 65 (number -> FLOAT .)
    LESSTHAN        reduce using rule 65 (number -> FLOAT .)
    GREATERTHAN     reduce using rule 65 (number -> FLOAT .)
    AND             reduce using rule 65 (number -> FLOAT .)
    OR              reduce using rule 65 (number -> FLOAT .)
    RPAREN          reduce using rule 65 (number -> FLOAT .)


state 67

    (66) number -> INTEGER .

    SEMICOLON       reduce using rule 66 (number -> INTEGER .)
    DOUBLEQUAL      reduce using rule 66 (number -> INTEGER .)
    LESSTHAN        reduce using rule 66 (number -> INTEGER .)
    GREATERTHAN     reduce using rule 66 (number -> INTEGER .)
    AND             reduce using rule 66 (number -> INTEGER .)
    OR              reduce using rule 66 (number -> INTEGER .)
    RPAREN          reduce using rule 66 (number -> INTEGER .)


state 68

    (14) map_type_specified -> LESSTHAN datatype . COMMA datatype GREATERTHAN

    COMMA           shift and go to state 86


state 69

    (36) ifStatement -> IF LPAREN conditions . RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    RPAREN          shift and go to state 87


state 70

    (73) conditions -> condition .
    (74) conditions -> condition . condition_connector conditions
    (75) condition_connector -> . AND
    (76) condition_connector -> . OR

    RPAREN          reduce using rule 73 (conditions -> condition .)
    AND             shift and go to state 89
    OR              shift and go to state 90

    condition_connector            shift and go to state 88

state 71

    (67) condition -> IDENTIFIER . condition_operator condition_values
    (72) condition -> IDENTIFIER . condition_operator IDENTIFIER
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN
    (63) condition_operator -> . LESSTHAN EQUAL
    (64) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 92
    LESSTHAN        shift and go to state 93
    GREATERTHAN     shift and go to state 94

    condition_operator             shift and go to state 91

state 72

    (68) condition -> EXMARK . IDENTIFIER condition_operator condition_values

    IDENTIFIER      shift and go to state 95


state 73

    (69) condition -> BOOLEAN . condition_operator BOOLEAN
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN
    (63) condition_operator -> . LESSTHAN EQUAL
    (64) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 92
    LESSTHAN        shift and go to state 93
    GREATERTHAN     shift and go to state 94

    condition_operator             shift and go to state 96

state 74

    (70) condition -> number . condition_operator number
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN
    (63) condition_operator -> . LESSTHAN EQUAL
    (64) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 92
    LESSTHAN        shift and go to state 93
    GREATERTHAN     shift and go to state 94

    condition_operator             shift and go to state 97

state 75

    (71) condition -> STR . condition_operator STR
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN
    (63) condition_operator -> . LESSTHAN EQUAL
    (64) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 92
    LESSTHAN        shift and go to state 93
    GREATERTHAN     shift and go to state 94

    condition_operator             shift and go to state 98

state 76

    (11) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET . map_content RCURLYBRACKET SEMICOLON
    (25) map_content -> . map_pairs
    (26) map_content -> . empty
    (28) map_pairs -> . map_pair
    (29) map_pairs -> . map_pair COMMA map_pairs
    (24) empty -> .
    (27) map_pair -> . map_key COLON map_value
    (30) map_key -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    RCURLYBRACKET   reduce using rule 24 (empty -> .)
    INTEGER         shift and go to state 106
    FLOAT           shift and go to state 107
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    IDENTIFIER      shift and go to state 99

    map_content                    shift and go to state 100
    map_pairs                      shift and go to state 101
    empty                          shift and go to state 102
    map_pair                       shift and go to state 103
    map_key                        shift and go to state 104
    value                          shift and go to state 105

state 77

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN . LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 108


state 78

    (81) function_arguments_repeat -> function_argument COMMA . function_arguments_repeat
    (80) function_arguments_repeat -> . function_argument
    (81) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (78) function_argument -> . datatype IDENTIFIER
    (79) function_argument -> . empty
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (24) empty -> .
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    COMMA           reduce using rule 24 (empty -> .)
    RPAREN          reduce using rule 24 (empty -> .)
    LCURLYBRACKET   reduce using rule 24 (empty -> .)
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    function_argument              shift and go to state 52
    function_arguments_repeat      shift and go to state 109
    datatype                       shift and go to state 53
    empty                          shift and go to state 54
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 79

    (78) function_argument -> datatype IDENTIFIER .

    COMMA           reduce using rule 78 (function_argument -> datatype IDENTIFIER .)
    RPAREN          reduce using rule 78 (function_argument -> datatype IDENTIFIER .)
    LCURLYBRACKET   reduce using rule 78 (function_argument -> datatype IDENTIFIER .)


state 80

    (38) elifStatement -> ELSE LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (10) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 110
    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class_content                  shift and go to state 33
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 81

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat . optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (82) optFunction_argumentsExpression -> . LCURLYBRACKET optFunction_arguments RCURLYBRACKET
    (83) optFunction_argumentsExpression -> . empty
    (24) empty -> .

    LCURLYBRACKET   shift and go to state 112
    RPAREN          reduce using rule 24 (empty -> .)

    optFunction_argumentsExpression shift and go to state 111
    empty                          shift and go to state 113

state 82

    (89) operableTypes -> IDENTIFIER .
    (49) value -> IDENTIFIER .

    PLUS            reduce using rule 89 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 89 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 89 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 89 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (value -> IDENTIFIER .)


state 83

    (96) declarationExpression -> datatype IDENTIFIER EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 114


state 84

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON . condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (67) condition -> . IDENTIFIER condition_operator condition_values
    (68) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (69) condition -> . BOOLEAN condition_operator BOOLEAN
    (70) condition -> . number condition_operator number
    (71) condition -> . STR condition_operator STR
    (72) condition -> . IDENTIFIER condition_operator IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 71
    EXMARK          shift and go to state 72
    BOOLEAN         shift and go to state 73
    STR             shift and go to state 75
    FLOAT           shift and go to state 66
    INTEGER         shift and go to state 67

    condition                      shift and go to state 115
    number                         shift and go to state 74

state 85

    (95) declarationExpression -> datatype IDENTIFIER . SEMICOLON
    (96) declarationExpression -> datatype IDENTIFIER . EQUAL expression SEMICOLON

    SEMICOLON       shift and go to state 61
    EQUAL           shift and go to state 60


state 86

    (14) map_type_specified -> LESSTHAN datatype COMMA . datatype GREATERTHAN
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    datatype                       shift and go to state 116
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 87

    (36) ifStatement -> IF LPAREN conditions RPAREN . LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 117


state 88

    (74) conditions -> condition condition_connector . conditions
    (73) conditions -> . condition
    (74) conditions -> . condition condition_connector conditions
    (67) condition -> . IDENTIFIER condition_operator condition_values
    (68) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (69) condition -> . BOOLEAN condition_operator BOOLEAN
    (70) condition -> . number condition_operator number
    (71) condition -> . STR condition_operator STR
    (72) condition -> . IDENTIFIER condition_operator IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 71
    EXMARK          shift and go to state 72
    BOOLEAN         shift and go to state 73
    STR             shift and go to state 75
    FLOAT           shift and go to state 66
    INTEGER         shift and go to state 67

    condition                      shift and go to state 70
    conditions                     shift and go to state 118
    number                         shift and go to state 74

state 89

    (75) condition_connector -> AND .

    IDENTIFIER      reduce using rule 75 (condition_connector -> AND .)
    EXMARK          reduce using rule 75 (condition_connector -> AND .)
    BOOLEAN         reduce using rule 75 (condition_connector -> AND .)
    STR             reduce using rule 75 (condition_connector -> AND .)
    FLOAT           reduce using rule 75 (condition_connector -> AND .)
    INTEGER         reduce using rule 75 (condition_connector -> AND .)


state 90

    (76) condition_connector -> OR .

    IDENTIFIER      reduce using rule 76 (condition_connector -> OR .)
    EXMARK          reduce using rule 76 (condition_connector -> OR .)
    BOOLEAN         reduce using rule 76 (condition_connector -> OR .)
    STR             reduce using rule 76 (condition_connector -> OR .)
    FLOAT           reduce using rule 76 (condition_connector -> OR .)
    INTEGER         reduce using rule 76 (condition_connector -> OR .)


state 91

    (67) condition -> IDENTIFIER condition_operator . condition_values
    (72) condition -> IDENTIFIER condition_operator . IDENTIFIER
    (56) condition_values -> . negation_values
    (57) condition_values -> . INTEGER
    (58) condition_values -> . FLOAT
    (59) condition_values -> . STR
    (54) negation_values -> . deniable_values
    (55) negation_values -> . EXMARK deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    IDENTIFIER      shift and go to state 119
    INTEGER         shift and go to state 122
    FLOAT           shift and go to state 123
    STR             shift and go to state 124
    EXMARK          shift and go to state 126
    BOOLEAN         shift and go to state 127

    condition_values               shift and go to state 120
    negation_values                shift and go to state 121
    deniable_values                shift and go to state 125

state 92

    (60) condition_operator -> DOUBLEQUAL .

    IDENTIFIER      reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    INTEGER         reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    FLOAT           reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    STR             reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    EXMARK          reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    BOOLEAN         reduce using rule 60 (condition_operator -> DOUBLEQUAL .)


state 93

    (61) condition_operator -> LESSTHAN .
    (63) condition_operator -> LESSTHAN . EQUAL

    IDENTIFIER      reduce using rule 61 (condition_operator -> LESSTHAN .)
    INTEGER         reduce using rule 61 (condition_operator -> LESSTHAN .)
    FLOAT           reduce using rule 61 (condition_operator -> LESSTHAN .)
    STR             reduce using rule 61 (condition_operator -> LESSTHAN .)
    EXMARK          reduce using rule 61 (condition_operator -> LESSTHAN .)
    BOOLEAN         reduce using rule 61 (condition_operator -> LESSTHAN .)
    EQUAL           shift and go to state 128


state 94

    (62) condition_operator -> GREATERTHAN .
    (64) condition_operator -> GREATERTHAN . EQUAL

    IDENTIFIER      reduce using rule 62 (condition_operator -> GREATERTHAN .)
    INTEGER         reduce using rule 62 (condition_operator -> GREATERTHAN .)
    FLOAT           reduce using rule 62 (condition_operator -> GREATERTHAN .)
    STR             reduce using rule 62 (condition_operator -> GREATERTHAN .)
    EXMARK          reduce using rule 62 (condition_operator -> GREATERTHAN .)
    BOOLEAN         reduce using rule 62 (condition_operator -> GREATERTHAN .)
    EQUAL           shift and go to state 129


state 95

    (68) condition -> EXMARK IDENTIFIER . condition_operator condition_values
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN
    (63) condition_operator -> . LESSTHAN EQUAL
    (64) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 92
    LESSTHAN        shift and go to state 93
    GREATERTHAN     shift and go to state 94

    condition_operator             shift and go to state 130

state 96

    (69) condition -> BOOLEAN condition_operator . BOOLEAN

    BOOLEAN         shift and go to state 131


state 97

    (70) condition -> number condition_operator . number
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    FLOAT           shift and go to state 66
    INTEGER         shift and go to state 67

    number                         shift and go to state 132

state 98

    (71) condition -> STR condition_operator . STR

    STR             shift and go to state 133


state 99

    (49) value -> IDENTIFIER .

    COLON           reduce using rule 49 (value -> IDENTIFIER .)
    COMMA           reduce using rule 49 (value -> IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 49 (value -> IDENTIFIER .)


state 100

    (11) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content . RCURLYBRACKET SEMICOLON

    RCURLYBRACKET   shift and go to state 134


state 101

    (25) map_content -> map_pairs .

    RCURLYBRACKET   reduce using rule 25 (map_content -> map_pairs .)


state 102

    (26) map_content -> empty .

    RCURLYBRACKET   reduce using rule 26 (map_content -> empty .)


state 103

    (28) map_pairs -> map_pair .
    (29) map_pairs -> map_pair . COMMA map_pairs

    RCURLYBRACKET   reduce using rule 28 (map_pairs -> map_pair .)
    COMMA           shift and go to state 135


state 104

    (27) map_pair -> map_key . COLON map_value

    COLON           shift and go to state 136


state 105

    (30) map_key -> value .

    COLON           reduce using rule 30 (map_key -> value .)


state 106

    (45) value -> INTEGER .

    COLON           reduce using rule 45 (value -> INTEGER .)
    COMMA           reduce using rule 45 (value -> INTEGER .)
    RCURLYBRACKET   reduce using rule 45 (value -> INTEGER .)


state 107

    (46) value -> FLOAT .

    COLON           reduce using rule 46 (value -> FLOAT .)
    COMMA           reduce using rule 46 (value -> FLOAT .)
    RCURLYBRACKET   reduce using rule 46 (value -> FLOAT .)


state 108

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET . RETURN expression SEMICOLON RCURLYBRACKET

    RETURN          shift and go to state 137


state 109

    (81) function_arguments_repeat -> function_argument COMMA function_arguments_repeat .

    RPAREN          reduce using rule 81 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)
    LCURLYBRACKET   reduce using rule 81 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)


state 110

    (38) elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FOR             reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 38 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 111

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression . RPAREN EQUAL GREATERTHAN expression SEMICOLON

    RPAREN          shift and go to state 138


state 112

    (82) optFunction_argumentsExpression -> LCURLYBRACKET . optFunction_arguments RCURLYBRACKET
    (85) optFunction_arguments -> . optFunction_argument
    (86) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (84) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 141

    optFunction_arguments          shift and go to state 139
    optFunction_argument           shift and go to state 140

state 113

    (83) optFunction_argumentsExpression -> empty .

    RPAREN          reduce using rule 83 (optFunction_argumentsExpression -> empty .)


state 114

    (96) declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .

    FOR             reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    MAP             reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STR             reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOLEAN         reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INT             reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DOUBLE          reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DYNAMIC         reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VOID            reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    SEMICOLON       reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 96 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)


state 115

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition . SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    SEMICOLON       shift and go to state 142


state 116

    (14) map_type_specified -> LESSTHAN datatype COMMA datatype . GREATERTHAN

    GREATERTHAN     shift and go to state 143


state 117

    (36) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (9) class_content_repeat -> . class_content
    (10) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class_content_repeat           shift and go to state 144
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 118

    (74) conditions -> condition condition_connector conditions .

    RPAREN          reduce using rule 74 (conditions -> condition condition_connector conditions .)


state 119

    (72) condition -> IDENTIFIER condition_operator IDENTIFIER .
    (52) deniable_values -> IDENTIFIER .

  ! reduce/reduce conflict for AND resolved using rule 52 (deniable_values -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 52 (deniable_values -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (deniable_values -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (deniable_values -> IDENTIFIER .)
    AND             reduce using rule 52 (deniable_values -> IDENTIFIER .)
    OR              reduce using rule 52 (deniable_values -> IDENTIFIER .)
    RPAREN          reduce using rule 52 (deniable_values -> IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (deniable_values -> IDENTIFIER .)

  ! AND             [ reduce using rule 72 (condition -> IDENTIFIER condition_operator IDENTIFIER .) ]
  ! OR              [ reduce using rule 72 (condition -> IDENTIFIER condition_operator IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 72 (condition -> IDENTIFIER condition_operator IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 72 (condition -> IDENTIFIER condition_operator IDENTIFIER .) ]


state 120

    (67) condition -> IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 67 (condition -> IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 67 (condition -> IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 67 (condition -> IDENTIFIER condition_operator condition_values .)
    SEMICOLON       reduce using rule 67 (condition -> IDENTIFIER condition_operator condition_values .)


state 121

    (56) condition_values -> negation_values .

    AND             reduce using rule 56 (condition_values -> negation_values .)
    OR              reduce using rule 56 (condition_values -> negation_values .)
    RPAREN          reduce using rule 56 (condition_values -> negation_values .)
    SEMICOLON       reduce using rule 56 (condition_values -> negation_values .)


state 122

    (57) condition_values -> INTEGER .

    AND             reduce using rule 57 (condition_values -> INTEGER .)
    OR              reduce using rule 57 (condition_values -> INTEGER .)
    RPAREN          reduce using rule 57 (condition_values -> INTEGER .)
    SEMICOLON       reduce using rule 57 (condition_values -> INTEGER .)


state 123

    (58) condition_values -> FLOAT .

    AND             reduce using rule 58 (condition_values -> FLOAT .)
    OR              reduce using rule 58 (condition_values -> FLOAT .)
    RPAREN          reduce using rule 58 (condition_values -> FLOAT .)
    SEMICOLON       reduce using rule 58 (condition_values -> FLOAT .)


state 124

    (59) condition_values -> STR .

    AND             reduce using rule 59 (condition_values -> STR .)
    OR              reduce using rule 59 (condition_values -> STR .)
    RPAREN          reduce using rule 59 (condition_values -> STR .)
    SEMICOLON       reduce using rule 59 (condition_values -> STR .)


state 125

    (54) negation_values -> deniable_values .

    AND             reduce using rule 54 (negation_values -> deniable_values .)
    OR              reduce using rule 54 (negation_values -> deniable_values .)
    RPAREN          reduce using rule 54 (negation_values -> deniable_values .)
    SEMICOLON       reduce using rule 54 (negation_values -> deniable_values .)


state 126

    (55) negation_values -> EXMARK . deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    IDENTIFIER      shift and go to state 146
    BOOLEAN         shift and go to state 127

    deniable_values                shift and go to state 145

state 127

    (53) deniable_values -> BOOLEAN .

    AND             reduce using rule 53 (deniable_values -> BOOLEAN .)
    OR              reduce using rule 53 (deniable_values -> BOOLEAN .)
    RPAREN          reduce using rule 53 (deniable_values -> BOOLEAN .)
    SEMICOLON       reduce using rule 53 (deniable_values -> BOOLEAN .)


state 128

    (63) condition_operator -> LESSTHAN EQUAL .

    IDENTIFIER      reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)
    INTEGER         reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)
    FLOAT           reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)
    STR             reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)
    EXMARK          reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)
    BOOLEAN         reduce using rule 63 (condition_operator -> LESSTHAN EQUAL .)


state 129

    (64) condition_operator -> GREATERTHAN EQUAL .

    IDENTIFIER      reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)
    INTEGER         reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)
    FLOAT           reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)
    STR             reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)
    EXMARK          reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)
    BOOLEAN         reduce using rule 64 (condition_operator -> GREATERTHAN EQUAL .)


state 130

    (68) condition -> EXMARK IDENTIFIER condition_operator . condition_values
    (56) condition_values -> . negation_values
    (57) condition_values -> . INTEGER
    (58) condition_values -> . FLOAT
    (59) condition_values -> . STR
    (54) negation_values -> . deniable_values
    (55) negation_values -> . EXMARK deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    INTEGER         shift and go to state 122
    FLOAT           shift and go to state 123
    STR             shift and go to state 124
    EXMARK          shift and go to state 126
    IDENTIFIER      shift and go to state 146
    BOOLEAN         shift and go to state 127

    condition_values               shift and go to state 147
    negation_values                shift and go to state 121
    deniable_values                shift and go to state 125

state 131

    (69) condition -> BOOLEAN condition_operator BOOLEAN .

    AND             reduce using rule 69 (condition -> BOOLEAN condition_operator BOOLEAN .)
    OR              reduce using rule 69 (condition -> BOOLEAN condition_operator BOOLEAN .)
    RPAREN          reduce using rule 69 (condition -> BOOLEAN condition_operator BOOLEAN .)
    SEMICOLON       reduce using rule 69 (condition -> BOOLEAN condition_operator BOOLEAN .)


state 132

    (70) condition -> number condition_operator number .

    AND             reduce using rule 70 (condition -> number condition_operator number .)
    OR              reduce using rule 70 (condition -> number condition_operator number .)
    RPAREN          reduce using rule 70 (condition -> number condition_operator number .)
    SEMICOLON       reduce using rule 70 (condition -> number condition_operator number .)


state 133

    (71) condition -> STR condition_operator STR .

    AND             reduce using rule 71 (condition -> STR condition_operator STR .)
    OR              reduce using rule 71 (condition -> STR condition_operator STR .)
    RPAREN          reduce using rule 71 (condition -> STR condition_operator STR .)
    SEMICOLON       reduce using rule 71 (condition -> STR condition_operator STR .)


state 134

    (11) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 148


state 135

    (29) map_pairs -> map_pair COMMA . map_pairs
    (28) map_pairs -> . map_pair
    (29) map_pairs -> . map_pair COMMA map_pairs
    (27) map_pair -> . map_key COLON map_value
    (30) map_key -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    INTEGER         shift and go to state 106
    FLOAT           shift and go to state 107
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    IDENTIFIER      shift and go to state 99

    map_pair                       shift and go to state 103
    map_pairs                      shift and go to state 149
    map_key                        shift and go to state 104
    value                          shift and go to state 105

state 136

    (27) map_pair -> map_key COLON . map_value
    (31) map_value -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    INTEGER         shift and go to state 106
    FLOAT           shift and go to state 107
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    IDENTIFIER      shift and go to state 99

    map_value                      shift and go to state 150
    value                          shift and go to state 151

state 137

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN . expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 82
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26

    expression                     shift and go to state 152
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    number                         shift and go to state 22

state 138

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN . EQUAL GREATERTHAN expression SEMICOLON

    EQUAL           shift and go to state 153


state 139

    (82) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 154


state 140

    (85) optFunction_arguments -> optFunction_argument .
    (86) optFunction_arguments -> optFunction_argument . COMMA optFunction_arguments

    RCURLYBRACKET   reduce using rule 85 (optFunction_arguments -> optFunction_argument .)
    COMMA           shift and go to state 155


state 141

    (84) optFunction_argument -> REQUIRED . datatype IDENTIFIER
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 21
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32
    MAP             shift and go to state 18

    datatype                       shift and go to state 156
    returnType                     shift and go to state 20
    map_identifier                 shift and go to state 55

state 142

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON . taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (40) taskStatement -> . IDENTIFIER operatorExpression operatorExpression

    IDENTIFIER      shift and go to state 158

    taskStatement                  shift and go to state 157

state 143

    (14) map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .

    IDENTIFIER      reduce using rule 14 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    COMMA           reduce using rule 14 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    GREATERTHAN     reduce using rule 14 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)


state 144

    (36) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (10) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 159
    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    class_content                  shift and go to state 33
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 145

    (55) negation_values -> EXMARK deniable_values .

    AND             reduce using rule 55 (negation_values -> EXMARK deniable_values .)
    OR              reduce using rule 55 (negation_values -> EXMARK deniable_values .)
    RPAREN          reduce using rule 55 (negation_values -> EXMARK deniable_values .)
    SEMICOLON       reduce using rule 55 (negation_values -> EXMARK deniable_values .)


state 146

    (52) deniable_values -> IDENTIFIER .

    AND             reduce using rule 52 (deniable_values -> IDENTIFIER .)
    OR              reduce using rule 52 (deniable_values -> IDENTIFIER .)
    RPAREN          reduce using rule 52 (deniable_values -> IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (deniable_values -> IDENTIFIER .)


state 147

    (68) condition -> EXMARK IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 68 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 68 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 68 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    SEMICOLON       reduce using rule 68 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)


state 148

    (11) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .

    FOR             reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    MAP             reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    IF              reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VAR             reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INTEGER         reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    FLOAT           reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STR             reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INT             reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STRING          reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOL            reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DYNAMIC         reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VOID            reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    $end            reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    RCURLYBRACKET   reduce using rule 11 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)


state 149

    (29) map_pairs -> map_pair COMMA map_pairs .

    RCURLYBRACKET   reduce using rule 29 (map_pairs -> map_pair COMMA map_pairs .)


state 150

    (27) map_pair -> map_key COLON map_value .

    COMMA           reduce using rule 27 (map_pair -> map_key COLON map_value .)
    RCURLYBRACKET   reduce using rule 27 (map_pair -> map_key COLON map_value .)


state 151

    (31) map_value -> value .

    COMMA           reduce using rule 31 (map_value -> value .)
    RCURLYBRACKET   reduce using rule 31 (map_value -> value .)


state 152

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression . SEMICOLON RCURLYBRACKET

    SEMICOLON       shift and go to state 160


state 153

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL . GREATERTHAN expression SEMICOLON

    GREATERTHAN     shift and go to state 161


state 154

    (82) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .

    RPAREN          reduce using rule 82 (optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .)


state 155

    (86) optFunction_arguments -> optFunction_argument COMMA . optFunction_arguments
    (85) optFunction_arguments -> . optFunction_argument
    (86) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (84) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 141

    optFunction_argument           shift and go to state 140
    optFunction_arguments          shift and go to state 162

state 156

    (84) optFunction_argument -> REQUIRED datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 163


state 157

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement . RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    RPAREN          shift and go to state 164


state 158

    (40) taskStatement -> IDENTIFIER . operatorExpression operatorExpression
    (91) operatorExpression -> . PLUS
    (92) operatorExpression -> . MINUS
    (93) operatorExpression -> . TIMES
    (94) operatorExpression -> . DIVISION

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVISION        shift and go to state 46

    operatorExpression             shift and go to state 165

state 159

    (36) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FOR             reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 36 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 160

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 166


state 161

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN . expression SEMICOLON
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    IDENTIFIER      shift and go to state 82
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26

    expression                     shift and go to state 167
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    number                         shift and go to state 22

state 162

    (86) optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .

    RCURLYBRACKET   reduce using rule 86 (optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .)


state 163

    (84) optFunction_argument -> REQUIRED datatype IDENTIFIER .

    COMMA           reduce using rule 84 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 84 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)


state 164

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN . LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 168


state 165

    (40) taskStatement -> IDENTIFIER operatorExpression . operatorExpression
    (91) operatorExpression -> . PLUS
    (92) operatorExpression -> . MINUS
    (93) operatorExpression -> . TIMES
    (94) operatorExpression -> . DIVISION

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVISION        shift and go to state 46

    operatorExpression             shift and go to state 169

state 166

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .

    FOR             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    MAP             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    IF              reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VAR             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INTEGER         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    FLOAT           reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STR             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOLEAN         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INT             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STRING          reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOL            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DOUBLE          reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DYNAMIC         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VOID            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    $end            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)


state 167

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression . SEMICOLON

    SEMICOLON       shift and go to state 170


state 168

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (9) class_content_repeat -> . class_content
    (10) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    declarationExpression          shift and go to state 7
    class_content_repeat           shift and go to state 171
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 169

    (40) taskStatement -> IDENTIFIER operatorExpression operatorExpression .

    RPAREN          reduce using rule 40 (taskStatement -> IDENTIFIER operatorExpression operatorExpression .)


state 170

    (77) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .

    FOR             reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    MAP             reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    IF              reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VAR             reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INTEGER         reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    FLOAT           reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STR             reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOLEAN         reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INT             reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STRING          reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOL            reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DOUBLE          reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DYNAMIC         reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VOID            reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    $end            reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 77 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)


state 171

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (10) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . inferedReturnFunction
    (8) class_content -> . expression SEMICOLON
    (11) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (32) ifElseStatement -> . ifStatement
    (33) ifElseStatement -> . ifStatement elifStatement_repeat
    (77) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (95) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (96) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (39) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (87) expression -> . operableTypes operatorExpression operableTypes
    (88) expression -> . value
    (12) map_identifier -> . MAP
    (13) map_identifier -> . MAP map_type_specified
    (36) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (15) datatype -> . returnType
    (16) datatype -> . VAR
    (89) operableTypes -> . IDENTIFIER
    (90) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (17) returnType -> . INT
    (18) returnType -> . STRING
    (19) returnType -> . BOOL
    (20) returnType -> . DOUBLE
    (21) returnType -> . DYNAMIC
    (22) returnType -> . VOID
    (23) returnType -> . map_identifier
    (65) number -> . FLOAT
    (66) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 172
    FOR             shift and go to state 15
    IDENTIFIER      shift and go to state 12
    MAP             shift and go to state 18
    IF              shift and go to state 19
    VAR             shift and go to state 21
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STR             shift and go to state 25
    BOOLEAN         shift and go to state 26
    INT             shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    DOUBLE          shift and go to state 30
    DYNAMIC         shift and go to state 31
    VOID            shift and go to state 32

    declarationExpression          shift and go to state 7
    class_content                  shift and go to state 33
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    forStatement                   shift and go to state 8
    inferedReturnFunction          shift and go to state 9
    expression                     shift and go to state 10
    map_identifier                 shift and go to state 11
    ifStatement                    shift and go to state 13
    datatype                       shift and go to state 14
    operableTypes                  shift and go to state 16
    value                          shift and go to state 17
    returnType                     shift and go to state 20
    number                         shift and go to state 22

state 172

    (39) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    FOR             reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 39 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 11 resolved as shift
WARNING: reduce/reduce conflict in state 119 resolved using rule (deniable_values -> IDENTIFIER)
WARNING: rejected rule (condition -> IDENTIFIER condition_operator IDENTIFIER) in state 119
WARNING: Rule (condition -> IDENTIFIER condition_operator IDENTIFIER) is never reduced
