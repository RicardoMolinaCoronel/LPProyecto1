Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    APOSTROPHE
    ASYNC
    AWAIT
    CATCH
    CLOSE
    COMMENT
    DO
    DOLLAR
    DOUBQUOTMARK
    EXIT
    FILE
    IMPORT
    IN
    IS
    ITERABLE
    LIST
    LSQUAREBRACKET
    MAIN
    METHOD
    NOTEQUAL
    OPENWRITE
    PRINT
    READLINESYNC
    RSQUAREBRACKET
    SET
    TRY
    WRITE

Grammar

Rule 0     S' -> class
Rule 1     class -> class_content_repeat
Rule 2     class_content -> map
Rule 3     class_content -> ifElseStatement
Rule 4     class_content -> function_lambda
Rule 5     class_content -> declarationExpression
Rule 6     class_content -> forStatement
Rule 7     class_content -> while
Rule 8     class_content -> stack
Rule 9     class_content -> inferedReturnFunction
Rule 10    class_content -> expression SEMICOLON
Rule 11    class_content_repeat -> class_content
Rule 12    class_content_repeat -> class_content_repeat class_content
Rule 13    map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
Rule 14    map_identifier -> MAP
Rule 15    map_identifier -> MAP map_type_specified
Rule 16    map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN
Rule 17    datatype -> returnType
Rule 18    datatype -> VAR
Rule 19    returnType -> INT
Rule 20    returnType -> STRING
Rule 21    returnType -> BOOL
Rule 22    returnType -> DOUBLE
Rule 23    returnType -> DYNAMIC
Rule 24    returnType -> VOID
Rule 25    returnType -> map_identifier
Rule 26    empty -> <empty>
Rule 27    map_content -> map_pairs
Rule 28    map_content -> empty
Rule 29    map_pair -> map_key COLON map_value
Rule 30    map_pairs -> map_pair
Rule 31    map_pairs -> map_pair COMMA map_pairs
Rule 32    map_key -> value
Rule 33    map_value -> value
Rule 34    ifElseStatement -> ifStatement
Rule 35    ifElseStatement -> ifStatement elifStatement_repeat
Rule 36    elifStatement_repeat -> elifStatement
Rule 37    elifStatement_repeat -> elifStatement elifStatement_repeat
Rule 38    ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 39    elifStatement -> ELSE ifStatement
Rule 40    elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 41    forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
Rule 42    taskStatement -> IDENTIFIER operatorExpression operatorExpression
Rule 43    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
Rule 44    while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 45    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
Rule 46    stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
Rule 47    inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
Rule 48    value -> INTEGER
Rule 49    value -> FLOAT
Rule 50    value -> STR
Rule 51    value -> BOOLEAN
Rule 52    value -> IDENTIFIER
Rule 53    opt_value -> value
Rule 54    opt_value -> empty
Rule 55    deniable_values -> IDENTIFIER
Rule 56    deniable_values -> BOOLEAN
Rule 57    negation_values -> deniable_values
Rule 58    negation_values -> EXMARK deniable_values
Rule 59    condition_values -> negation_values
Rule 60    condition_values -> INTEGER
Rule 61    condition_values -> FLOAT
Rule 62    condition_values -> STR
Rule 63    condition_operator -> DOUBLEQUAL
Rule 64    condition_operator -> LESSTHAN
Rule 65    condition_operator -> GREATERTHAN
Rule 66    condition_operator -> LESSTHAN EQUAL
Rule 67    condition_operator -> GREATERTHAN EQUAL
Rule 68    number -> FLOAT
Rule 69    number -> INTEGER
Rule 70    condition -> IDENTIFIER condition_operator condition_values
Rule 71    condition -> EXMARK IDENTIFIER condition_operator condition_values
Rule 72    condition -> BOOLEAN condition_operator BOOLEAN
Rule 73    condition -> number condition_operator number
Rule 74    condition -> STR condition_operator STR
Rule 75    conditions -> condition
Rule 76    conditions -> condition condition_connector conditions
Rule 77    condition_connector -> AND
Rule 78    condition_connector -> OR
Rule 79    function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
Rule 80    function_argument -> datatype IDENTIFIER
Rule 81    function_argument -> empty
Rule 82    function_arguments_repeat -> function_argument
Rule 83    function_arguments_repeat -> function_argument COMMA function_arguments_repeat
Rule 84    optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET
Rule 85    optFunction_argumentsExpression -> empty
Rule 86    optFunction_argument -> REQUIRED datatype IDENTIFIER
Rule 87    optFunction_arguments -> optFunction_argument
Rule 88    optFunction_arguments -> optFunction_argument COMMA optFunction_arguments
Rule 89    expression -> operableTypes operatorExpression operableTypes
Rule 90    expression -> value
Rule 91    expression -> operableTypes operatorExpression
Rule 92    operableTypes -> IDENTIFIER
Rule 93    operableTypes -> number
Rule 94    operatorExpression -> PLUS
Rule 95    operatorExpression -> MINUS
Rule 96    operatorExpression -> TIMES
Rule 97    operatorExpression -> DIVISION
Rule 98    operatorExpression -> PLUS PLUS
Rule 99    declarationExpression -> datatype IDENTIFIER SEMICOLON
Rule 100   declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 77
APOSTROPHE           : 
ASYNC                : 
AWAIT                : 
BOOL                 : 21
BOOLEAN              : 51 56 72 72
CATCH                : 
CLOSE                : 
COLON                : 29
COMMA                : 16 31 83 88
COMMENT              : 
DIVISION             : 97
DO                   : 
DOLLAR               : 
DOT                  : 46
DOUBLE               : 22
DOUBLEQUAL           : 63
DOUBQUOTMARK         : 
DYNAMIC              : 23
ELSE                 : 39 40
EQUAL                : 13 43 45 46 66 67 79 100
EXIT                 : 
EXMARK               : 58 71
FILE                 : 
FINAL                : 43 45 46
FLOAT                : 49 61 68
FOR                  : 41
GREATERTHAN          : 16 43 45 65 67 79
IDENTIFIER           : 13 42 43 45 46 46 47 52 55 70 71 79 80 86 92 99 100
IF                   : 38
IMPORT               : 
IN                   : 
INT                  : 19
INTEGER              : 48 60 69
IS                   : 
ITERABLE             : 
LCURLYBRACKET        : 13 38 40 41 44 47 84
LESSTHAN             : 16 43 45 64 66
LIST                 : 
LPAREN               : 38 41 43 44 45 46 47 79
LSQUAREBRACKET       : 
MAIN                 : 
MAP                  : 14 15
METHOD               : 
MINUS                : 95
NOTEQUAL             : 
OF                   : 46
OPENWRITE            : 
OR                   : 78
PLUS                 : 94 98 98
PRINT                : 
RCURLYBRACKET        : 13 38 40 41 44 47 84
READLINESYNC         : 
REQUIRED             : 86
RETURN               : 47
RPAREN               : 38 41 43 44 45 46 47 79
RSQUAREBRACKET       : 
SEMICOLON            : 10 13 41 41 43 45 46 47 79 99 100
SET                  : 
STACK                : 43 45 46
STR                  : 50 62 74 74
STRING               : 20
TIMES                : 96
TRY                  : 
VAR                  : 18
VOID                 : 24
WHILE                : 44
WRITE                : 
error                : 

Nonterminals, with rules where they appear

class                : 0
class_content        : 11 12
class_content_repeat : 1 12 38 40 44
condition            : 41 75 76
condition_connector  : 76
condition_operator   : 70 71 72 73 74
condition_values     : 70 71
conditions           : 38 44 76
datatype             : 16 16 43 45 79 80 86 99 100
declarationExpression : 5 41
deniable_values      : 57 58
elifStatement        : 36 37
elifStatement_repeat : 35 37
empty                : 28 54 81 85
expression           : 10 41 47 79 100
forStatement         : 6
function_argument    : 82 83
function_arguments_repeat : 47 79 83
function_lambda      : 4
ifElseStatement      : 3
ifStatement          : 34 35 39
inferedReturnFunction : 9
map                  : 2
map_content          : 13
map_identifier       : 13 25
map_key              : 29
map_pair             : 30 31
map_pairs            : 27 31
map_type_specified   : 15
map_value            : 29
negation_values      : 59
number               : 73 73 93
operableTypes        : 89 89 91
operatorExpression   : 42 42 89 91
optFunction_argument : 87 88
optFunction_arguments : 84 88
optFunction_argumentsExpression : 79
opt_value            : 43
returnType           : 17
stack                : 8
taskStatement        : 
value                : 32 33 53 90
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . class_content_repeat
    (11) class_content_repeat -> . class_content
    (12) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class                          shift and go to state 1
    class_content_repeat           shift and go to state 2
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 1

    (0) S' -> class .



state 2

    (1) class -> class_content_repeat .
    (12) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    $end            reduce using rule 1 (class -> class_content_repeat .)
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content                  shift and go to state 37
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 3

    (11) class_content_repeat -> class_content .

    FOR             reduce using rule 11 (class_content_repeat -> class_content .)
    WHILE           reduce using rule 11 (class_content_repeat -> class_content .)
    FINAL           reduce using rule 11 (class_content_repeat -> class_content .)
    IDENTIFIER      reduce using rule 11 (class_content_repeat -> class_content .)
    MAP             reduce using rule 11 (class_content_repeat -> class_content .)
    IF              reduce using rule 11 (class_content_repeat -> class_content .)
    VAR             reduce using rule 11 (class_content_repeat -> class_content .)
    INTEGER         reduce using rule 11 (class_content_repeat -> class_content .)
    FLOAT           reduce using rule 11 (class_content_repeat -> class_content .)
    STR             reduce using rule 11 (class_content_repeat -> class_content .)
    BOOLEAN         reduce using rule 11 (class_content_repeat -> class_content .)
    INT             reduce using rule 11 (class_content_repeat -> class_content .)
    STRING          reduce using rule 11 (class_content_repeat -> class_content .)
    BOOL            reduce using rule 11 (class_content_repeat -> class_content .)
    DOUBLE          reduce using rule 11 (class_content_repeat -> class_content .)
    DYNAMIC         reduce using rule 11 (class_content_repeat -> class_content .)
    VOID            reduce using rule 11 (class_content_repeat -> class_content .)
    $end            reduce using rule 11 (class_content_repeat -> class_content .)
    RCURLYBRACKET   reduce using rule 11 (class_content_repeat -> class_content .)


state 4

    (2) class_content -> map .

    FOR             reduce using rule 2 (class_content -> map .)
    WHILE           reduce using rule 2 (class_content -> map .)
    FINAL           reduce using rule 2 (class_content -> map .)
    IDENTIFIER      reduce using rule 2 (class_content -> map .)
    MAP             reduce using rule 2 (class_content -> map .)
    IF              reduce using rule 2 (class_content -> map .)
    VAR             reduce using rule 2 (class_content -> map .)
    INTEGER         reduce using rule 2 (class_content -> map .)
    FLOAT           reduce using rule 2 (class_content -> map .)
    STR             reduce using rule 2 (class_content -> map .)
    BOOLEAN         reduce using rule 2 (class_content -> map .)
    INT             reduce using rule 2 (class_content -> map .)
    STRING          reduce using rule 2 (class_content -> map .)
    BOOL            reduce using rule 2 (class_content -> map .)
    DOUBLE          reduce using rule 2 (class_content -> map .)
    DYNAMIC         reduce using rule 2 (class_content -> map .)
    VOID            reduce using rule 2 (class_content -> map .)
    $end            reduce using rule 2 (class_content -> map .)
    RCURLYBRACKET   reduce using rule 2 (class_content -> map .)


state 5

    (3) class_content -> ifElseStatement .

    FOR             reduce using rule 3 (class_content -> ifElseStatement .)
    WHILE           reduce using rule 3 (class_content -> ifElseStatement .)
    FINAL           reduce using rule 3 (class_content -> ifElseStatement .)
    IDENTIFIER      reduce using rule 3 (class_content -> ifElseStatement .)
    MAP             reduce using rule 3 (class_content -> ifElseStatement .)
    IF              reduce using rule 3 (class_content -> ifElseStatement .)
    VAR             reduce using rule 3 (class_content -> ifElseStatement .)
    INTEGER         reduce using rule 3 (class_content -> ifElseStatement .)
    FLOAT           reduce using rule 3 (class_content -> ifElseStatement .)
    STR             reduce using rule 3 (class_content -> ifElseStatement .)
    BOOLEAN         reduce using rule 3 (class_content -> ifElseStatement .)
    INT             reduce using rule 3 (class_content -> ifElseStatement .)
    STRING          reduce using rule 3 (class_content -> ifElseStatement .)
    BOOL            reduce using rule 3 (class_content -> ifElseStatement .)
    DOUBLE          reduce using rule 3 (class_content -> ifElseStatement .)
    DYNAMIC         reduce using rule 3 (class_content -> ifElseStatement .)
    VOID            reduce using rule 3 (class_content -> ifElseStatement .)
    $end            reduce using rule 3 (class_content -> ifElseStatement .)
    RCURLYBRACKET   reduce using rule 3 (class_content -> ifElseStatement .)


state 6

    (4) class_content -> function_lambda .

    FOR             reduce using rule 4 (class_content -> function_lambda .)
    WHILE           reduce using rule 4 (class_content -> function_lambda .)
    FINAL           reduce using rule 4 (class_content -> function_lambda .)
    IDENTIFIER      reduce using rule 4 (class_content -> function_lambda .)
    MAP             reduce using rule 4 (class_content -> function_lambda .)
    IF              reduce using rule 4 (class_content -> function_lambda .)
    VAR             reduce using rule 4 (class_content -> function_lambda .)
    INTEGER         reduce using rule 4 (class_content -> function_lambda .)
    FLOAT           reduce using rule 4 (class_content -> function_lambda .)
    STR             reduce using rule 4 (class_content -> function_lambda .)
    BOOLEAN         reduce using rule 4 (class_content -> function_lambda .)
    INT             reduce using rule 4 (class_content -> function_lambda .)
    STRING          reduce using rule 4 (class_content -> function_lambda .)
    BOOL            reduce using rule 4 (class_content -> function_lambda .)
    DOUBLE          reduce using rule 4 (class_content -> function_lambda .)
    DYNAMIC         reduce using rule 4 (class_content -> function_lambda .)
    VOID            reduce using rule 4 (class_content -> function_lambda .)
    $end            reduce using rule 4 (class_content -> function_lambda .)
    RCURLYBRACKET   reduce using rule 4 (class_content -> function_lambda .)


state 7

    (5) class_content -> declarationExpression .

    FOR             reduce using rule 5 (class_content -> declarationExpression .)
    WHILE           reduce using rule 5 (class_content -> declarationExpression .)
    FINAL           reduce using rule 5 (class_content -> declarationExpression .)
    IDENTIFIER      reduce using rule 5 (class_content -> declarationExpression .)
    MAP             reduce using rule 5 (class_content -> declarationExpression .)
    IF              reduce using rule 5 (class_content -> declarationExpression .)
    VAR             reduce using rule 5 (class_content -> declarationExpression .)
    INTEGER         reduce using rule 5 (class_content -> declarationExpression .)
    FLOAT           reduce using rule 5 (class_content -> declarationExpression .)
    STR             reduce using rule 5 (class_content -> declarationExpression .)
    BOOLEAN         reduce using rule 5 (class_content -> declarationExpression .)
    INT             reduce using rule 5 (class_content -> declarationExpression .)
    STRING          reduce using rule 5 (class_content -> declarationExpression .)
    BOOL            reduce using rule 5 (class_content -> declarationExpression .)
    DOUBLE          reduce using rule 5 (class_content -> declarationExpression .)
    DYNAMIC         reduce using rule 5 (class_content -> declarationExpression .)
    VOID            reduce using rule 5 (class_content -> declarationExpression .)
    $end            reduce using rule 5 (class_content -> declarationExpression .)
    RCURLYBRACKET   reduce using rule 5 (class_content -> declarationExpression .)


state 8

    (6) class_content -> forStatement .

    FOR             reduce using rule 6 (class_content -> forStatement .)
    WHILE           reduce using rule 6 (class_content -> forStatement .)
    FINAL           reduce using rule 6 (class_content -> forStatement .)
    IDENTIFIER      reduce using rule 6 (class_content -> forStatement .)
    MAP             reduce using rule 6 (class_content -> forStatement .)
    IF              reduce using rule 6 (class_content -> forStatement .)
    VAR             reduce using rule 6 (class_content -> forStatement .)
    INTEGER         reduce using rule 6 (class_content -> forStatement .)
    FLOAT           reduce using rule 6 (class_content -> forStatement .)
    STR             reduce using rule 6 (class_content -> forStatement .)
    BOOLEAN         reduce using rule 6 (class_content -> forStatement .)
    INT             reduce using rule 6 (class_content -> forStatement .)
    STRING          reduce using rule 6 (class_content -> forStatement .)
    BOOL            reduce using rule 6 (class_content -> forStatement .)
    DOUBLE          reduce using rule 6 (class_content -> forStatement .)
    DYNAMIC         reduce using rule 6 (class_content -> forStatement .)
    VOID            reduce using rule 6 (class_content -> forStatement .)
    $end            reduce using rule 6 (class_content -> forStatement .)
    RCURLYBRACKET   reduce using rule 6 (class_content -> forStatement .)


state 9

    (7) class_content -> while .

    FOR             reduce using rule 7 (class_content -> while .)
    WHILE           reduce using rule 7 (class_content -> while .)
    FINAL           reduce using rule 7 (class_content -> while .)
    IDENTIFIER      reduce using rule 7 (class_content -> while .)
    MAP             reduce using rule 7 (class_content -> while .)
    IF              reduce using rule 7 (class_content -> while .)
    VAR             reduce using rule 7 (class_content -> while .)
    INTEGER         reduce using rule 7 (class_content -> while .)
    FLOAT           reduce using rule 7 (class_content -> while .)
    STR             reduce using rule 7 (class_content -> while .)
    BOOLEAN         reduce using rule 7 (class_content -> while .)
    INT             reduce using rule 7 (class_content -> while .)
    STRING          reduce using rule 7 (class_content -> while .)
    BOOL            reduce using rule 7 (class_content -> while .)
    DOUBLE          reduce using rule 7 (class_content -> while .)
    DYNAMIC         reduce using rule 7 (class_content -> while .)
    VOID            reduce using rule 7 (class_content -> while .)
    $end            reduce using rule 7 (class_content -> while .)
    RCURLYBRACKET   reduce using rule 7 (class_content -> while .)


state 10

    (8) class_content -> stack .

    FOR             reduce using rule 8 (class_content -> stack .)
    WHILE           reduce using rule 8 (class_content -> stack .)
    FINAL           reduce using rule 8 (class_content -> stack .)
    IDENTIFIER      reduce using rule 8 (class_content -> stack .)
    MAP             reduce using rule 8 (class_content -> stack .)
    IF              reduce using rule 8 (class_content -> stack .)
    VAR             reduce using rule 8 (class_content -> stack .)
    INTEGER         reduce using rule 8 (class_content -> stack .)
    FLOAT           reduce using rule 8 (class_content -> stack .)
    STR             reduce using rule 8 (class_content -> stack .)
    BOOLEAN         reduce using rule 8 (class_content -> stack .)
    INT             reduce using rule 8 (class_content -> stack .)
    STRING          reduce using rule 8 (class_content -> stack .)
    BOOL            reduce using rule 8 (class_content -> stack .)
    DOUBLE          reduce using rule 8 (class_content -> stack .)
    DYNAMIC         reduce using rule 8 (class_content -> stack .)
    VOID            reduce using rule 8 (class_content -> stack .)
    $end            reduce using rule 8 (class_content -> stack .)
    RCURLYBRACKET   reduce using rule 8 (class_content -> stack .)


state 11

    (9) class_content -> inferedReturnFunction .

    FOR             reduce using rule 9 (class_content -> inferedReturnFunction .)
    WHILE           reduce using rule 9 (class_content -> inferedReturnFunction .)
    FINAL           reduce using rule 9 (class_content -> inferedReturnFunction .)
    IDENTIFIER      reduce using rule 9 (class_content -> inferedReturnFunction .)
    MAP             reduce using rule 9 (class_content -> inferedReturnFunction .)
    IF              reduce using rule 9 (class_content -> inferedReturnFunction .)
    VAR             reduce using rule 9 (class_content -> inferedReturnFunction .)
    INTEGER         reduce using rule 9 (class_content -> inferedReturnFunction .)
    FLOAT           reduce using rule 9 (class_content -> inferedReturnFunction .)
    STR             reduce using rule 9 (class_content -> inferedReturnFunction .)
    BOOLEAN         reduce using rule 9 (class_content -> inferedReturnFunction .)
    INT             reduce using rule 9 (class_content -> inferedReturnFunction .)
    STRING          reduce using rule 9 (class_content -> inferedReturnFunction .)
    BOOL            reduce using rule 9 (class_content -> inferedReturnFunction .)
    DOUBLE          reduce using rule 9 (class_content -> inferedReturnFunction .)
    DYNAMIC         reduce using rule 9 (class_content -> inferedReturnFunction .)
    VOID            reduce using rule 9 (class_content -> inferedReturnFunction .)
    $end            reduce using rule 9 (class_content -> inferedReturnFunction .)
    RCURLYBRACKET   reduce using rule 9 (class_content -> inferedReturnFunction .)


state 12

    (10) class_content -> expression . SEMICOLON

    SEMICOLON       shift and go to state 38


state 13

    (13) map -> map_identifier . IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (25) returnType -> map_identifier .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 39

  ! IDENTIFIER      [ reduce using rule 25 (returnType -> map_identifier .) ]


state 14

    (47) inferedReturnFunction -> IDENTIFIER . LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (92) operableTypes -> IDENTIFIER .
    (52) value -> IDENTIFIER .

    LPAREN          shift and go to state 40
    PLUS            reduce using rule 92 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 92 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 92 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 92 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (value -> IDENTIFIER .)


state 15

    (34) ifElseStatement -> ifStatement .
    (35) ifElseStatement -> ifStatement . elifStatement_repeat
    (36) elifStatement_repeat -> . elifStatement
    (37) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (39) elifStatement -> . ELSE ifStatement
    (40) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    FOR             reduce using rule 34 (ifElseStatement -> ifStatement .)
    WHILE           reduce using rule 34 (ifElseStatement -> ifStatement .)
    FINAL           reduce using rule 34 (ifElseStatement -> ifStatement .)
    IDENTIFIER      reduce using rule 34 (ifElseStatement -> ifStatement .)
    MAP             reduce using rule 34 (ifElseStatement -> ifStatement .)
    IF              reduce using rule 34 (ifElseStatement -> ifStatement .)
    VAR             reduce using rule 34 (ifElseStatement -> ifStatement .)
    INTEGER         reduce using rule 34 (ifElseStatement -> ifStatement .)
    FLOAT           reduce using rule 34 (ifElseStatement -> ifStatement .)
    STR             reduce using rule 34 (ifElseStatement -> ifStatement .)
    BOOLEAN         reduce using rule 34 (ifElseStatement -> ifStatement .)
    INT             reduce using rule 34 (ifElseStatement -> ifStatement .)
    STRING          reduce using rule 34 (ifElseStatement -> ifStatement .)
    BOOL            reduce using rule 34 (ifElseStatement -> ifStatement .)
    DOUBLE          reduce using rule 34 (ifElseStatement -> ifStatement .)
    DYNAMIC         reduce using rule 34 (ifElseStatement -> ifStatement .)
    VOID            reduce using rule 34 (ifElseStatement -> ifStatement .)
    $end            reduce using rule 34 (ifElseStatement -> ifStatement .)
    RCURLYBRACKET   reduce using rule 34 (ifElseStatement -> ifStatement .)
    ELSE            shift and go to state 43

    elifStatement_repeat           shift and go to state 41
    elifStatement                  shift and go to state 42

state 16

    (79) function_lambda -> datatype . IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> datatype . IDENTIFIER SEMICOLON
    (100) declarationExpression -> datatype . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 44


state 17

    (41) forStatement -> FOR . LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET

    LPAREN          shift and go to state 45


state 18

    (44) while -> WHILE . LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LPAREN          shift and go to state 46


state 19

    (43) stack -> FINAL . IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL . IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> FINAL . IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 47


state 20

    (89) expression -> operableTypes . operatorExpression operableTypes
    (91) expression -> operableTypes . operatorExpression
    (94) operatorExpression -> . PLUS
    (95) operatorExpression -> . MINUS
    (96) operatorExpression -> . TIMES
    (97) operatorExpression -> . DIVISION
    (98) operatorExpression -> . PLUS PLUS

    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVISION        shift and go to state 52

    operatorExpression             shift and go to state 48

state 21

    (90) expression -> value .

    SEMICOLON       reduce using rule 90 (expression -> value .)
    RPAREN          reduce using rule 90 (expression -> value .)


state 22

    (14) map_identifier -> MAP .
    (15) map_identifier -> MAP . map_type_specified
    (16) map_type_specified -> . LESSTHAN datatype COMMA datatype GREATERTHAN

    IDENTIFIER      reduce using rule 14 (map_identifier -> MAP .)
    COMMA           reduce using rule 14 (map_identifier -> MAP .)
    GREATERTHAN     reduce using rule 14 (map_identifier -> MAP .)
    LESSTHAN        shift and go to state 54

    map_type_specified             shift and go to state 53

state 23

    (38) ifStatement -> IF . LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LPAREN          shift and go to state 55


state 24

    (17) datatype -> returnType .

    IDENTIFIER      reduce using rule 17 (datatype -> returnType .)
    COMMA           reduce using rule 17 (datatype -> returnType .)
    GREATERTHAN     reduce using rule 17 (datatype -> returnType .)


state 25

    (18) datatype -> VAR .

    IDENTIFIER      reduce using rule 18 (datatype -> VAR .)
    COMMA           reduce using rule 18 (datatype -> VAR .)
    GREATERTHAN     reduce using rule 18 (datatype -> VAR .)


state 26

    (93) operableTypes -> number .

    PLUS            reduce using rule 93 (operableTypes -> number .)
    MINUS           reduce using rule 93 (operableTypes -> number .)
    TIMES           reduce using rule 93 (operableTypes -> number .)
    DIVISION        reduce using rule 93 (operableTypes -> number .)
    SEMICOLON       reduce using rule 93 (operableTypes -> number .)
    RPAREN          reduce using rule 93 (operableTypes -> number .)


state 27

    (48) value -> INTEGER .
    (69) number -> INTEGER .

    SEMICOLON       reduce using rule 48 (value -> INTEGER .)
    RPAREN          reduce using rule 48 (value -> INTEGER .)
    PLUS            reduce using rule 69 (number -> INTEGER .)
    MINUS           reduce using rule 69 (number -> INTEGER .)
    TIMES           reduce using rule 69 (number -> INTEGER .)
    DIVISION        reduce using rule 69 (number -> INTEGER .)


state 28

    (49) value -> FLOAT .
    (68) number -> FLOAT .

    SEMICOLON       reduce using rule 49 (value -> FLOAT .)
    RPAREN          reduce using rule 49 (value -> FLOAT .)
    PLUS            reduce using rule 68 (number -> FLOAT .)
    MINUS           reduce using rule 68 (number -> FLOAT .)
    TIMES           reduce using rule 68 (number -> FLOAT .)
    DIVISION        reduce using rule 68 (number -> FLOAT .)


state 29

    (50) value -> STR .

    SEMICOLON       reduce using rule 50 (value -> STR .)
    COLON           reduce using rule 50 (value -> STR .)
    COMMA           reduce using rule 50 (value -> STR .)
    RCURLYBRACKET   reduce using rule 50 (value -> STR .)
    RPAREN          reduce using rule 50 (value -> STR .)


state 30

    (51) value -> BOOLEAN .

    SEMICOLON       reduce using rule 51 (value -> BOOLEAN .)
    COLON           reduce using rule 51 (value -> BOOLEAN .)
    COMMA           reduce using rule 51 (value -> BOOLEAN .)
    RCURLYBRACKET   reduce using rule 51 (value -> BOOLEAN .)
    RPAREN          reduce using rule 51 (value -> BOOLEAN .)


state 31

    (19) returnType -> INT .

    IDENTIFIER      reduce using rule 19 (returnType -> INT .)
    COMMA           reduce using rule 19 (returnType -> INT .)
    GREATERTHAN     reduce using rule 19 (returnType -> INT .)


state 32

    (20) returnType -> STRING .

    IDENTIFIER      reduce using rule 20 (returnType -> STRING .)
    COMMA           reduce using rule 20 (returnType -> STRING .)
    GREATERTHAN     reduce using rule 20 (returnType -> STRING .)


state 33

    (21) returnType -> BOOL .

    IDENTIFIER      reduce using rule 21 (returnType -> BOOL .)
    COMMA           reduce using rule 21 (returnType -> BOOL .)
    GREATERTHAN     reduce using rule 21 (returnType -> BOOL .)


state 34

    (22) returnType -> DOUBLE .

    IDENTIFIER      reduce using rule 22 (returnType -> DOUBLE .)
    COMMA           reduce using rule 22 (returnType -> DOUBLE .)
    GREATERTHAN     reduce using rule 22 (returnType -> DOUBLE .)


state 35

    (23) returnType -> DYNAMIC .

    IDENTIFIER      reduce using rule 23 (returnType -> DYNAMIC .)
    COMMA           reduce using rule 23 (returnType -> DYNAMIC .)
    GREATERTHAN     reduce using rule 23 (returnType -> DYNAMIC .)


state 36

    (24) returnType -> VOID .

    IDENTIFIER      reduce using rule 24 (returnType -> VOID .)
    COMMA           reduce using rule 24 (returnType -> VOID .)
    GREATERTHAN     reduce using rule 24 (returnType -> VOID .)


state 37

    (12) class_content_repeat -> class_content_repeat class_content .

    FOR             reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    WHILE           reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    FINAL           reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    IDENTIFIER      reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    MAP             reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    IF              reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    VAR             reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    INTEGER         reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    FLOAT           reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    STR             reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    BOOLEAN         reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    INT             reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    STRING          reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    BOOL            reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    DOUBLE          reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    DYNAMIC         reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    VOID            reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    $end            reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)
    RCURLYBRACKET   reduce using rule 12 (class_content_repeat -> class_content_repeat class_content .)


state 38

    (10) class_content -> expression SEMICOLON .

    FOR             reduce using rule 10 (class_content -> expression SEMICOLON .)
    WHILE           reduce using rule 10 (class_content -> expression SEMICOLON .)
    FINAL           reduce using rule 10 (class_content -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (class_content -> expression SEMICOLON .)
    MAP             reduce using rule 10 (class_content -> expression SEMICOLON .)
    IF              reduce using rule 10 (class_content -> expression SEMICOLON .)
    VAR             reduce using rule 10 (class_content -> expression SEMICOLON .)
    INTEGER         reduce using rule 10 (class_content -> expression SEMICOLON .)
    FLOAT           reduce using rule 10 (class_content -> expression SEMICOLON .)
    STR             reduce using rule 10 (class_content -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 10 (class_content -> expression SEMICOLON .)
    INT             reduce using rule 10 (class_content -> expression SEMICOLON .)
    STRING          reduce using rule 10 (class_content -> expression SEMICOLON .)
    BOOL            reduce using rule 10 (class_content -> expression SEMICOLON .)
    DOUBLE          reduce using rule 10 (class_content -> expression SEMICOLON .)
    DYNAMIC         reduce using rule 10 (class_content -> expression SEMICOLON .)
    VOID            reduce using rule 10 (class_content -> expression SEMICOLON .)
    $end            reduce using rule 10 (class_content -> expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 10 (class_content -> expression SEMICOLON .)


state 39

    (13) map -> map_identifier IDENTIFIER . EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    EQUAL           shift and go to state 56


state 40

    (47) inferedReturnFunction -> IDENTIFIER LPAREN . function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (82) function_arguments_repeat -> . function_argument
    (83) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (80) function_argument -> . datatype IDENTIFIER
    (81) function_argument -> . empty
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (26) empty -> .
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    function_arguments_repeat      shift and go to state 57
    function_argument              shift and go to state 58
    datatype                       shift and go to state 59
    empty                          shift and go to state 60
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 41

    (35) ifElseStatement -> ifStatement elifStatement_repeat .

    FOR             reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    WHILE           reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    FINAL           reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    IDENTIFIER      reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    MAP             reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    IF              reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VAR             reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STR             reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INT             reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STRING          reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOL            reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VOID            reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    $end            reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 35 (ifElseStatement -> ifStatement elifStatement_repeat .)


state 42

    (36) elifStatement_repeat -> elifStatement .
    (37) elifStatement_repeat -> elifStatement . elifStatement_repeat
    (36) elifStatement_repeat -> . elifStatement
    (37) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (39) elifStatement -> . ELSE ifStatement
    (40) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    FOR             reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    WHILE           reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    FINAL           reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    IDENTIFIER      reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    MAP             reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    IF              reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    VAR             reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    INTEGER         reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    FLOAT           reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    STR             reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    BOOLEAN         reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    INT             reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    STRING          reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    BOOL            reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    DOUBLE          reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    DYNAMIC         reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    VOID            reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    $end            reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    RCURLYBRACKET   reduce using rule 36 (elifStatement_repeat -> elifStatement .)
    ELSE            shift and go to state 43

    elifStatement                  shift and go to state 42
    elifStatement_repeat           shift and go to state 62

state 43

    (39) elifStatement -> ELSE . ifStatement
    (40) elifStatement -> ELSE . LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 64
    IF              shift and go to state 23

    ifStatement                    shift and go to state 63

state 44

    (79) function_lambda -> datatype IDENTIFIER . LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> datatype IDENTIFIER . SEMICOLON
    (100) declarationExpression -> datatype IDENTIFIER . EQUAL expression SEMICOLON

    LPAREN          shift and go to state 65
    SEMICOLON       shift and go to state 67
    EQUAL           shift and go to state 66


state 45

    (41) forStatement -> FOR LPAREN . declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    declarationExpression          shift and go to state 68
    datatype                       shift and go to state 69
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 46

    (44) while -> WHILE LPAREN . conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (75) conditions -> . condition
    (76) conditions -> . condition condition_connector conditions
    (70) condition -> . IDENTIFIER condition_operator condition_values
    (71) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (72) condition -> . BOOLEAN condition_operator BOOLEAN
    (73) condition -> . number condition_operator number
    (74) condition -> . STR condition_operator STR
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 72
    EXMARK          shift and go to state 73
    BOOLEAN         shift and go to state 74
    STR             shift and go to state 76
    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    conditions                     shift and go to state 70
    condition                      shift and go to state 71
    number                         shift and go to state 75

state 47

    (43) stack -> FINAL IDENTIFIER . EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER . EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> FINAL IDENTIFIER . EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON

    EQUAL           shift and go to state 79


state 48

    (89) expression -> operableTypes operatorExpression . operableTypes
    (91) expression -> operableTypes operatorExpression .
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    SEMICOLON       reduce using rule 91 (expression -> operableTypes operatorExpression .)
    RPAREN          reduce using rule 91 (expression -> operableTypes operatorExpression .)
    IDENTIFIER      shift and go to state 81
    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    operableTypes                  shift and go to state 80
    number                         shift and go to state 26

state 49

    (94) operatorExpression -> PLUS .
    (98) operatorExpression -> PLUS . PLUS

    IDENTIFIER      reduce using rule 94 (operatorExpression -> PLUS .)
    FLOAT           reduce using rule 94 (operatorExpression -> PLUS .)
    INTEGER         reduce using rule 94 (operatorExpression -> PLUS .)
    SEMICOLON       reduce using rule 94 (operatorExpression -> PLUS .)
    RPAREN          reduce using rule 94 (operatorExpression -> PLUS .)
    PLUS            shift and go to state 82


state 50

    (95) operatorExpression -> MINUS .

    IDENTIFIER      reduce using rule 95 (operatorExpression -> MINUS .)
    FLOAT           reduce using rule 95 (operatorExpression -> MINUS .)
    INTEGER         reduce using rule 95 (operatorExpression -> MINUS .)
    SEMICOLON       reduce using rule 95 (operatorExpression -> MINUS .)
    RPAREN          reduce using rule 95 (operatorExpression -> MINUS .)


state 51

    (96) operatorExpression -> TIMES .

    IDENTIFIER      reduce using rule 96 (operatorExpression -> TIMES .)
    FLOAT           reduce using rule 96 (operatorExpression -> TIMES .)
    INTEGER         reduce using rule 96 (operatorExpression -> TIMES .)
    SEMICOLON       reduce using rule 96 (operatorExpression -> TIMES .)
    RPAREN          reduce using rule 96 (operatorExpression -> TIMES .)


state 52

    (97) operatorExpression -> DIVISION .

    IDENTIFIER      reduce using rule 97 (operatorExpression -> DIVISION .)
    FLOAT           reduce using rule 97 (operatorExpression -> DIVISION .)
    INTEGER         reduce using rule 97 (operatorExpression -> DIVISION .)
    SEMICOLON       reduce using rule 97 (operatorExpression -> DIVISION .)
    RPAREN          reduce using rule 97 (operatorExpression -> DIVISION .)


state 53

    (15) map_identifier -> MAP map_type_specified .

    IDENTIFIER      reduce using rule 15 (map_identifier -> MAP map_type_specified .)
    COMMA           reduce using rule 15 (map_identifier -> MAP map_type_specified .)
    GREATERTHAN     reduce using rule 15 (map_identifier -> MAP map_type_specified .)


state 54

    (16) map_type_specified -> LESSTHAN . datatype COMMA datatype GREATERTHAN
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    datatype                       shift and go to state 83
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 55

    (38) ifStatement -> IF LPAREN . conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (75) conditions -> . condition
    (76) conditions -> . condition condition_connector conditions
    (70) condition -> . IDENTIFIER condition_operator condition_values
    (71) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (72) condition -> . BOOLEAN condition_operator BOOLEAN
    (73) condition -> . number condition_operator number
    (74) condition -> . STR condition_operator STR
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 72
    EXMARK          shift and go to state 73
    BOOLEAN         shift and go to state 74
    STR             shift and go to state 76
    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    conditions                     shift and go to state 84
    condition                      shift and go to state 71
    number                         shift and go to state 75

state 56

    (13) map -> map_identifier IDENTIFIER EQUAL . LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    LCURLYBRACKET   shift and go to state 85


state 57

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat . RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    RPAREN          shift and go to state 86


state 58

    (82) function_arguments_repeat -> function_argument .
    (83) function_arguments_repeat -> function_argument . COMMA function_arguments_repeat

    RPAREN          reduce using rule 82 (function_arguments_repeat -> function_argument .)
    LCURLYBRACKET   reduce using rule 82 (function_arguments_repeat -> function_argument .)
    COMMA           shift and go to state 87


state 59

    (80) function_argument -> datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 88


state 60

    (81) function_argument -> empty .

    COMMA           reduce using rule 81 (function_argument -> empty .)
    RPAREN          reduce using rule 81 (function_argument -> empty .)
    LCURLYBRACKET   reduce using rule 81 (function_argument -> empty .)


state 61

    (25) returnType -> map_identifier .

    IDENTIFIER      reduce using rule 25 (returnType -> map_identifier .)
    COMMA           reduce using rule 25 (returnType -> map_identifier .)
    GREATERTHAN     reduce using rule 25 (returnType -> map_identifier .)


state 62

    (37) elifStatement_repeat -> elifStatement elifStatement_repeat .

    FOR             reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    WHILE           reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    FINAL           reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    IDENTIFIER      reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    MAP             reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    IF              reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VAR             reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STR             reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INT             reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STRING          reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOL            reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VOID            reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    $end            reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 37 (elifStatement_repeat -> elifStatement elifStatement_repeat .)


state 63

    (39) elifStatement -> ELSE ifStatement .

    ELSE            reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    FOR             reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    WHILE           reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    FINAL           reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    IDENTIFIER      reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    MAP             reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    IF              reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    VAR             reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    INTEGER         reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    FLOAT           reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    STR             reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    BOOLEAN         reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    INT             reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    STRING          reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    BOOL            reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    DOUBLE          reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    DYNAMIC         reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    VOID            reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    $end            reduce using rule 39 (elifStatement -> ELSE ifStatement .)
    RCURLYBRACKET   reduce using rule 39 (elifStatement -> ELSE ifStatement .)


state 64

    (40) elifStatement -> ELSE LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (11) class_content_repeat -> . class_content
    (12) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content_repeat           shift and go to state 89
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 65

    (79) function_lambda -> datatype IDENTIFIER LPAREN . function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (82) function_arguments_repeat -> . function_argument
    (83) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (80) function_argument -> . datatype IDENTIFIER
    (81) function_argument -> . empty
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (26) empty -> .
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    COMMA           reduce using rule 26 (empty -> .)
    LCURLYBRACKET   reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    datatype                       shift and go to state 59
    function_arguments_repeat      shift and go to state 90
    function_argument              shift and go to state 58
    empty                          shift and go to state 60
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 66

    (100) declarationExpression -> datatype IDENTIFIER EQUAL . expression SEMICOLON
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 91
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30

    expression                     shift and go to state 92
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    number                         shift and go to state 26

state 67

    (99) declarationExpression -> datatype IDENTIFIER SEMICOLON .

    FOR             reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    MAP             reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    IF              reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VAR             reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INTEGER         reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STR             reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INT             reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DYNAMIC         reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    $end            reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    RCURLYBRACKET   reduce using rule 99 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)


state 68

    (41) forStatement -> FOR LPAREN declarationExpression . SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET

    SEMICOLON       shift and go to state 93


state 69

    (99) declarationExpression -> datatype . IDENTIFIER SEMICOLON
    (100) declarationExpression -> datatype . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 94


state 70

    (44) while -> WHILE LPAREN conditions . RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    RPAREN          shift and go to state 95


state 71

    (75) conditions -> condition .
    (76) conditions -> condition . condition_connector conditions
    (77) condition_connector -> . AND
    (78) condition_connector -> . OR

    RPAREN          reduce using rule 75 (conditions -> condition .)
    AND             shift and go to state 97
    OR              shift and go to state 98

    condition_connector            shift and go to state 96

state 72

    (70) condition -> IDENTIFIER . condition_operator condition_values
    (63) condition_operator -> . DOUBLEQUAL
    (64) condition_operator -> . LESSTHAN
    (65) condition_operator -> . GREATERTHAN
    (66) condition_operator -> . LESSTHAN EQUAL
    (67) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 100
    LESSTHAN        shift and go to state 101
    GREATERTHAN     shift and go to state 102

    condition_operator             shift and go to state 99

state 73

    (71) condition -> EXMARK . IDENTIFIER condition_operator condition_values

    IDENTIFIER      shift and go to state 103


state 74

    (72) condition -> BOOLEAN . condition_operator BOOLEAN
    (63) condition_operator -> . DOUBLEQUAL
    (64) condition_operator -> . LESSTHAN
    (65) condition_operator -> . GREATERTHAN
    (66) condition_operator -> . LESSTHAN EQUAL
    (67) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 100
    LESSTHAN        shift and go to state 101
    GREATERTHAN     shift and go to state 102

    condition_operator             shift and go to state 104

state 75

    (73) condition -> number . condition_operator number
    (63) condition_operator -> . DOUBLEQUAL
    (64) condition_operator -> . LESSTHAN
    (65) condition_operator -> . GREATERTHAN
    (66) condition_operator -> . LESSTHAN EQUAL
    (67) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 100
    LESSTHAN        shift and go to state 101
    GREATERTHAN     shift and go to state 102

    condition_operator             shift and go to state 105

state 76

    (74) condition -> STR . condition_operator STR
    (63) condition_operator -> . DOUBLEQUAL
    (64) condition_operator -> . LESSTHAN
    (65) condition_operator -> . GREATERTHAN
    (66) condition_operator -> . LESSTHAN EQUAL
    (67) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 100
    LESSTHAN        shift and go to state 101
    GREATERTHAN     shift and go to state 102

    condition_operator             shift and go to state 106

state 77

    (68) number -> FLOAT .

    DOUBLEQUAL      reduce using rule 68 (number -> FLOAT .)
    LESSTHAN        reduce using rule 68 (number -> FLOAT .)
    GREATERTHAN     reduce using rule 68 (number -> FLOAT .)
    SEMICOLON       reduce using rule 68 (number -> FLOAT .)
    RPAREN          reduce using rule 68 (number -> FLOAT .)
    AND             reduce using rule 68 (number -> FLOAT .)
    OR              reduce using rule 68 (number -> FLOAT .)


state 78

    (69) number -> INTEGER .

    DOUBLEQUAL      reduce using rule 69 (number -> INTEGER .)
    LESSTHAN        reduce using rule 69 (number -> INTEGER .)
    GREATERTHAN     reduce using rule 69 (number -> INTEGER .)
    SEMICOLON       reduce using rule 69 (number -> INTEGER .)
    RPAREN          reduce using rule 69 (number -> INTEGER .)
    AND             reduce using rule 69 (number -> INTEGER .)
    OR              reduce using rule 69 (number -> INTEGER .)


state 79

    (43) stack -> FINAL IDENTIFIER EQUAL . STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL . STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> FINAL IDENTIFIER EQUAL . STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON

    STACK           shift and go to state 107


state 80

    (89) expression -> operableTypes operatorExpression operableTypes .

    SEMICOLON       reduce using rule 89 (expression -> operableTypes operatorExpression operableTypes .)
    RPAREN          reduce using rule 89 (expression -> operableTypes operatorExpression operableTypes .)


state 81

    (92) operableTypes -> IDENTIFIER .

    SEMICOLON       reduce using rule 92 (operableTypes -> IDENTIFIER .)
    RPAREN          reduce using rule 92 (operableTypes -> IDENTIFIER .)


state 82

    (98) operatorExpression -> PLUS PLUS .

    IDENTIFIER      reduce using rule 98 (operatorExpression -> PLUS PLUS .)
    FLOAT           reduce using rule 98 (operatorExpression -> PLUS PLUS .)
    INTEGER         reduce using rule 98 (operatorExpression -> PLUS PLUS .)
    SEMICOLON       reduce using rule 98 (operatorExpression -> PLUS PLUS .)
    RPAREN          reduce using rule 98 (operatorExpression -> PLUS PLUS .)


state 83

    (16) map_type_specified -> LESSTHAN datatype . COMMA datatype GREATERTHAN

    COMMA           shift and go to state 108


state 84

    (38) ifStatement -> IF LPAREN conditions . RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    RPAREN          shift and go to state 109


state 85

    (13) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET . map_content RCURLYBRACKET SEMICOLON
    (27) map_content -> . map_pairs
    (28) map_content -> . empty
    (30) map_pairs -> . map_pair
    (31) map_pairs -> . map_pair COMMA map_pairs
    (26) empty -> .
    (29) map_pair -> . map_key COLON map_value
    (32) map_key -> . value
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER

    RCURLYBRACKET   reduce using rule 26 (empty -> .)
    INTEGER         shift and go to state 117
    FLOAT           shift and go to state 118
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    IDENTIFIER      shift and go to state 110

    map_content                    shift and go to state 111
    map_pairs                      shift and go to state 112
    empty                          shift and go to state 113
    map_pair                       shift and go to state 114
    map_key                        shift and go to state 115
    value                          shift and go to state 116

state 86

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN . LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 119


state 87

    (83) function_arguments_repeat -> function_argument COMMA . function_arguments_repeat
    (82) function_arguments_repeat -> . function_argument
    (83) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (80) function_argument -> . datatype IDENTIFIER
    (81) function_argument -> . empty
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (26) empty -> .
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    LCURLYBRACKET   reduce using rule 26 (empty -> .)
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    function_argument              shift and go to state 58
    function_arguments_repeat      shift and go to state 120
    datatype                       shift and go to state 59
    empty                          shift and go to state 60
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 88

    (80) function_argument -> datatype IDENTIFIER .

    COMMA           reduce using rule 80 (function_argument -> datatype IDENTIFIER .)
    RPAREN          reduce using rule 80 (function_argument -> datatype IDENTIFIER .)
    LCURLYBRACKET   reduce using rule 80 (function_argument -> datatype IDENTIFIER .)


state 89

    (40) elifStatement -> ELSE LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (12) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 121
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content                  shift and go to state 37
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 90

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat . optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (84) optFunction_argumentsExpression -> . LCURLYBRACKET optFunction_arguments RCURLYBRACKET
    (85) optFunction_argumentsExpression -> . empty
    (26) empty -> .

    LCURLYBRACKET   shift and go to state 123
    RPAREN          reduce using rule 26 (empty -> .)

    optFunction_argumentsExpression shift and go to state 122
    empty                          shift and go to state 124

state 91

    (92) operableTypes -> IDENTIFIER .
    (52) value -> IDENTIFIER .

    PLUS            reduce using rule 92 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 92 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 92 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 92 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (value -> IDENTIFIER .)
    RPAREN          reduce using rule 52 (value -> IDENTIFIER .)


state 92

    (100) declarationExpression -> datatype IDENTIFIER EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 125


state 93

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON . condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (70) condition -> . IDENTIFIER condition_operator condition_values
    (71) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (72) condition -> . BOOLEAN condition_operator BOOLEAN
    (73) condition -> . number condition_operator number
    (74) condition -> . STR condition_operator STR
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 72
    EXMARK          shift and go to state 73
    BOOLEAN         shift and go to state 74
    STR             shift and go to state 76
    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    condition                      shift and go to state 126
    number                         shift and go to state 75

state 94

    (99) declarationExpression -> datatype IDENTIFIER . SEMICOLON
    (100) declarationExpression -> datatype IDENTIFIER . EQUAL expression SEMICOLON

    SEMICOLON       shift and go to state 67
    EQUAL           shift and go to state 66


state 95

    (44) while -> WHILE LPAREN conditions RPAREN . LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 127


state 96

    (76) conditions -> condition condition_connector . conditions
    (75) conditions -> . condition
    (76) conditions -> . condition condition_connector conditions
    (70) condition -> . IDENTIFIER condition_operator condition_values
    (71) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (72) condition -> . BOOLEAN condition_operator BOOLEAN
    (73) condition -> . number condition_operator number
    (74) condition -> . STR condition_operator STR
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 72
    EXMARK          shift and go to state 73
    BOOLEAN         shift and go to state 74
    STR             shift and go to state 76
    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    condition                      shift and go to state 71
    conditions                     shift and go to state 128
    number                         shift and go to state 75

state 97

    (77) condition_connector -> AND .

    IDENTIFIER      reduce using rule 77 (condition_connector -> AND .)
    EXMARK          reduce using rule 77 (condition_connector -> AND .)
    BOOLEAN         reduce using rule 77 (condition_connector -> AND .)
    STR             reduce using rule 77 (condition_connector -> AND .)
    FLOAT           reduce using rule 77 (condition_connector -> AND .)
    INTEGER         reduce using rule 77 (condition_connector -> AND .)


state 98

    (78) condition_connector -> OR .

    IDENTIFIER      reduce using rule 78 (condition_connector -> OR .)
    EXMARK          reduce using rule 78 (condition_connector -> OR .)
    BOOLEAN         reduce using rule 78 (condition_connector -> OR .)
    STR             reduce using rule 78 (condition_connector -> OR .)
    FLOAT           reduce using rule 78 (condition_connector -> OR .)
    INTEGER         reduce using rule 78 (condition_connector -> OR .)


state 99

    (70) condition -> IDENTIFIER condition_operator . condition_values
    (59) condition_values -> . negation_values
    (60) condition_values -> . INTEGER
    (61) condition_values -> . FLOAT
    (62) condition_values -> . STR
    (57) negation_values -> . deniable_values
    (58) negation_values -> . EXMARK deniable_values
    (55) deniable_values -> . IDENTIFIER
    (56) deniable_values -> . BOOLEAN

    INTEGER         shift and go to state 132
    FLOAT           shift and go to state 133
    STR             shift and go to state 134
    EXMARK          shift and go to state 136
    IDENTIFIER      shift and go to state 129
    BOOLEAN         shift and go to state 137

    condition_values               shift and go to state 130
    negation_values                shift and go to state 131
    deniable_values                shift and go to state 135

state 100

    (63) condition_operator -> DOUBLEQUAL .

    INTEGER         reduce using rule 63 (condition_operator -> DOUBLEQUAL .)
    FLOAT           reduce using rule 63 (condition_operator -> DOUBLEQUAL .)
    STR             reduce using rule 63 (condition_operator -> DOUBLEQUAL .)
    EXMARK          reduce using rule 63 (condition_operator -> DOUBLEQUAL .)
    IDENTIFIER      reduce using rule 63 (condition_operator -> DOUBLEQUAL .)
    BOOLEAN         reduce using rule 63 (condition_operator -> DOUBLEQUAL .)


state 101

    (64) condition_operator -> LESSTHAN .
    (66) condition_operator -> LESSTHAN . EQUAL

    INTEGER         reduce using rule 64 (condition_operator -> LESSTHAN .)
    FLOAT           reduce using rule 64 (condition_operator -> LESSTHAN .)
    STR             reduce using rule 64 (condition_operator -> LESSTHAN .)
    EXMARK          reduce using rule 64 (condition_operator -> LESSTHAN .)
    IDENTIFIER      reduce using rule 64 (condition_operator -> LESSTHAN .)
    BOOLEAN         reduce using rule 64 (condition_operator -> LESSTHAN .)
    EQUAL           shift and go to state 138


state 102

    (65) condition_operator -> GREATERTHAN .
    (67) condition_operator -> GREATERTHAN . EQUAL

    INTEGER         reduce using rule 65 (condition_operator -> GREATERTHAN .)
    FLOAT           reduce using rule 65 (condition_operator -> GREATERTHAN .)
    STR             reduce using rule 65 (condition_operator -> GREATERTHAN .)
    EXMARK          reduce using rule 65 (condition_operator -> GREATERTHAN .)
    IDENTIFIER      reduce using rule 65 (condition_operator -> GREATERTHAN .)
    BOOLEAN         reduce using rule 65 (condition_operator -> GREATERTHAN .)
    EQUAL           shift and go to state 139


state 103

    (71) condition -> EXMARK IDENTIFIER . condition_operator condition_values
    (63) condition_operator -> . DOUBLEQUAL
    (64) condition_operator -> . LESSTHAN
    (65) condition_operator -> . GREATERTHAN
    (66) condition_operator -> . LESSTHAN EQUAL
    (67) condition_operator -> . GREATERTHAN EQUAL

    DOUBLEQUAL      shift and go to state 100
    LESSTHAN        shift and go to state 101
    GREATERTHAN     shift and go to state 102

    condition_operator             shift and go to state 140

state 104

    (72) condition -> BOOLEAN condition_operator . BOOLEAN

    BOOLEAN         shift and go to state 141


state 105

    (73) condition -> number condition_operator . number
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    FLOAT           shift and go to state 77
    INTEGER         shift and go to state 78

    number                         shift and go to state 142

state 106

    (74) condition -> STR condition_operator . STR

    STR             shift and go to state 143


state 107

    (43) stack -> FINAL IDENTIFIER EQUAL STACK . LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL STACK . LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> FINAL IDENTIFIER EQUAL STACK . DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON

    LESSTHAN        shift and go to state 144
    DOT             shift and go to state 145


state 108

    (16) map_type_specified -> LESSTHAN datatype COMMA . datatype GREATERTHAN
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    datatype                       shift and go to state 146
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 109

    (38) ifStatement -> IF LPAREN conditions RPAREN . LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 147


state 110

    (52) value -> IDENTIFIER .

    COLON           reduce using rule 52 (value -> IDENTIFIER .)
    COMMA           reduce using rule 52 (value -> IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 52 (value -> IDENTIFIER .)
    RPAREN          reduce using rule 52 (value -> IDENTIFIER .)


state 111

    (13) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content . RCURLYBRACKET SEMICOLON

    RCURLYBRACKET   shift and go to state 148


state 112

    (27) map_content -> map_pairs .

    RCURLYBRACKET   reduce using rule 27 (map_content -> map_pairs .)


state 113

    (28) map_content -> empty .

    RCURLYBRACKET   reduce using rule 28 (map_content -> empty .)


state 114

    (30) map_pairs -> map_pair .
    (31) map_pairs -> map_pair . COMMA map_pairs

    RCURLYBRACKET   reduce using rule 30 (map_pairs -> map_pair .)
    COMMA           shift and go to state 149


state 115

    (29) map_pair -> map_key . COLON map_value

    COLON           shift and go to state 150


state 116

    (32) map_key -> value .

    COLON           reduce using rule 32 (map_key -> value .)


state 117

    (48) value -> INTEGER .

    COLON           reduce using rule 48 (value -> INTEGER .)
    COMMA           reduce using rule 48 (value -> INTEGER .)
    RCURLYBRACKET   reduce using rule 48 (value -> INTEGER .)
    RPAREN          reduce using rule 48 (value -> INTEGER .)


state 118

    (49) value -> FLOAT .

    COLON           reduce using rule 49 (value -> FLOAT .)
    COMMA           reduce using rule 49 (value -> FLOAT .)
    RCURLYBRACKET   reduce using rule 49 (value -> FLOAT .)
    RPAREN          reduce using rule 49 (value -> FLOAT .)


state 119

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET . RETURN expression SEMICOLON RCURLYBRACKET

    RETURN          shift and go to state 151


state 120

    (83) function_arguments_repeat -> function_argument COMMA function_arguments_repeat .

    RPAREN          reduce using rule 83 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)
    LCURLYBRACKET   reduce using rule 83 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)


state 121

    (40) elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FOR             reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    WHILE           reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FINAL           reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 40 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 122

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression . RPAREN EQUAL GREATERTHAN expression SEMICOLON

    RPAREN          shift and go to state 152


state 123

    (84) optFunction_argumentsExpression -> LCURLYBRACKET . optFunction_arguments RCURLYBRACKET
    (87) optFunction_arguments -> . optFunction_argument
    (88) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (86) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 155

    optFunction_arguments          shift and go to state 153
    optFunction_argument           shift and go to state 154

state 124

    (85) optFunction_argumentsExpression -> empty .

    RPAREN          reduce using rule 85 (optFunction_argumentsExpression -> empty .)


state 125

    (100) declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .

    FOR             reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    FINAL           reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    MAP             reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STR             reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOLEAN         reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INT             reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DOUBLE          reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DYNAMIC         reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VOID            reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    SEMICOLON       reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 100 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)


state 126

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition . SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET

    SEMICOLON       shift and go to state 156


state 127

    (44) while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (11) class_content_repeat -> . class_content
    (12) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content_repeat           shift and go to state 157
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 128

    (76) conditions -> condition condition_connector conditions .

    RPAREN          reduce using rule 76 (conditions -> condition condition_connector conditions .)


state 129

    (55) deniable_values -> IDENTIFIER .

    AND             reduce using rule 55 (deniable_values -> IDENTIFIER .)
    OR              reduce using rule 55 (deniable_values -> IDENTIFIER .)
    RPAREN          reduce using rule 55 (deniable_values -> IDENTIFIER .)
    SEMICOLON       reduce using rule 55 (deniable_values -> IDENTIFIER .)


state 130

    (70) condition -> IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 70 (condition -> IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 70 (condition -> IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 70 (condition -> IDENTIFIER condition_operator condition_values .)
    SEMICOLON       reduce using rule 70 (condition -> IDENTIFIER condition_operator condition_values .)


state 131

    (59) condition_values -> negation_values .

    AND             reduce using rule 59 (condition_values -> negation_values .)
    OR              reduce using rule 59 (condition_values -> negation_values .)
    RPAREN          reduce using rule 59 (condition_values -> negation_values .)
    SEMICOLON       reduce using rule 59 (condition_values -> negation_values .)


state 132

    (60) condition_values -> INTEGER .

    AND             reduce using rule 60 (condition_values -> INTEGER .)
    OR              reduce using rule 60 (condition_values -> INTEGER .)
    RPAREN          reduce using rule 60 (condition_values -> INTEGER .)
    SEMICOLON       reduce using rule 60 (condition_values -> INTEGER .)


state 133

    (61) condition_values -> FLOAT .

    AND             reduce using rule 61 (condition_values -> FLOAT .)
    OR              reduce using rule 61 (condition_values -> FLOAT .)
    RPAREN          reduce using rule 61 (condition_values -> FLOAT .)
    SEMICOLON       reduce using rule 61 (condition_values -> FLOAT .)


state 134

    (62) condition_values -> STR .

    AND             reduce using rule 62 (condition_values -> STR .)
    OR              reduce using rule 62 (condition_values -> STR .)
    RPAREN          reduce using rule 62 (condition_values -> STR .)
    SEMICOLON       reduce using rule 62 (condition_values -> STR .)


state 135

    (57) negation_values -> deniable_values .

    AND             reduce using rule 57 (negation_values -> deniable_values .)
    OR              reduce using rule 57 (negation_values -> deniable_values .)
    RPAREN          reduce using rule 57 (negation_values -> deniable_values .)
    SEMICOLON       reduce using rule 57 (negation_values -> deniable_values .)


state 136

    (58) negation_values -> EXMARK . deniable_values
    (55) deniable_values -> . IDENTIFIER
    (56) deniable_values -> . BOOLEAN

    IDENTIFIER      shift and go to state 129
    BOOLEAN         shift and go to state 137

    deniable_values                shift and go to state 158

state 137

    (56) deniable_values -> BOOLEAN .

    AND             reduce using rule 56 (deniable_values -> BOOLEAN .)
    OR              reduce using rule 56 (deniable_values -> BOOLEAN .)
    RPAREN          reduce using rule 56 (deniable_values -> BOOLEAN .)
    SEMICOLON       reduce using rule 56 (deniable_values -> BOOLEAN .)


state 138

    (66) condition_operator -> LESSTHAN EQUAL .

    INTEGER         reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)
    FLOAT           reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)
    STR             reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)
    EXMARK          reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)
    IDENTIFIER      reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)
    BOOLEAN         reduce using rule 66 (condition_operator -> LESSTHAN EQUAL .)


state 139

    (67) condition_operator -> GREATERTHAN EQUAL .

    INTEGER         reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)
    FLOAT           reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)
    STR             reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)
    EXMARK          reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)
    IDENTIFIER      reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)
    BOOLEAN         reduce using rule 67 (condition_operator -> GREATERTHAN EQUAL .)


state 140

    (71) condition -> EXMARK IDENTIFIER condition_operator . condition_values
    (59) condition_values -> . negation_values
    (60) condition_values -> . INTEGER
    (61) condition_values -> . FLOAT
    (62) condition_values -> . STR
    (57) negation_values -> . deniable_values
    (58) negation_values -> . EXMARK deniable_values
    (55) deniable_values -> . IDENTIFIER
    (56) deniable_values -> . BOOLEAN

    INTEGER         shift and go to state 132
    FLOAT           shift and go to state 133
    STR             shift and go to state 134
    EXMARK          shift and go to state 136
    IDENTIFIER      shift and go to state 129
    BOOLEAN         shift and go to state 137

    condition_values               shift and go to state 159
    negation_values                shift and go to state 131
    deniable_values                shift and go to state 135

state 141

    (72) condition -> BOOLEAN condition_operator BOOLEAN .

    AND             reduce using rule 72 (condition -> BOOLEAN condition_operator BOOLEAN .)
    OR              reduce using rule 72 (condition -> BOOLEAN condition_operator BOOLEAN .)
    RPAREN          reduce using rule 72 (condition -> BOOLEAN condition_operator BOOLEAN .)
    SEMICOLON       reduce using rule 72 (condition -> BOOLEAN condition_operator BOOLEAN .)


state 142

    (73) condition -> number condition_operator number .

    AND             reduce using rule 73 (condition -> number condition_operator number .)
    OR              reduce using rule 73 (condition -> number condition_operator number .)
    RPAREN          reduce using rule 73 (condition -> number condition_operator number .)
    SEMICOLON       reduce using rule 73 (condition -> number condition_operator number .)


state 143

    (74) condition -> STR condition_operator STR .

    AND             reduce using rule 74 (condition -> STR condition_operator STR .)
    OR              reduce using rule 74 (condition -> STR condition_operator STR .)
    RPAREN          reduce using rule 74 (condition -> STR condition_operator STR .)
    SEMICOLON       reduce using rule 74 (condition -> STR condition_operator STR .)


state 144

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN . datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN . datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    datatype                       shift and go to state 160
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 145

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT . OF LPAREN IDENTIFIER RPAREN SEMICOLON

    OF              shift and go to state 161


state 146

    (16) map_type_specified -> LESSTHAN datatype COMMA datatype . GREATERTHAN

    GREATERTHAN     shift and go to state 162


state 147

    (38) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (11) class_content_repeat -> . class_content
    (12) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content_repeat           shift and go to state 163
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 148

    (13) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 164


state 149

    (31) map_pairs -> map_pair COMMA . map_pairs
    (30) map_pairs -> . map_pair
    (31) map_pairs -> . map_pair COMMA map_pairs
    (29) map_pair -> . map_key COLON map_value
    (32) map_key -> . value
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER

    INTEGER         shift and go to state 117
    FLOAT           shift and go to state 118
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    IDENTIFIER      shift and go to state 110

    map_pair                       shift and go to state 114
    map_pairs                      shift and go to state 165
    map_key                        shift and go to state 115
    value                          shift and go to state 116

state 150

    (29) map_pair -> map_key COLON . map_value
    (33) map_value -> . value
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER

    INTEGER         shift and go to state 117
    FLOAT           shift and go to state 118
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    IDENTIFIER      shift and go to state 110

    map_value                      shift and go to state 166
    value                          shift and go to state 167

state 151

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN . expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 91
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30

    expression                     shift and go to state 168
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    number                         shift and go to state 26

state 152

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN . EQUAL GREATERTHAN expression SEMICOLON

    EQUAL           shift and go to state 169


state 153

    (84) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 170


state 154

    (87) optFunction_arguments -> optFunction_argument .
    (88) optFunction_arguments -> optFunction_argument . COMMA optFunction_arguments

    RCURLYBRACKET   reduce using rule 87 (optFunction_arguments -> optFunction_argument .)
    COMMA           shift and go to state 171


state 155

    (86) optFunction_argument -> REQUIRED . datatype IDENTIFIER
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 25
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36
    MAP             shift and go to state 22

    datatype                       shift and go to state 172
    returnType                     shift and go to state 24
    map_identifier                 shift and go to state 61

state 156

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON . expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 91
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30

    expression                     shift and go to state 173
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    number                         shift and go to state 26

state 157

    (44) while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (12) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 174
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content                  shift and go to state 37
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 158

    (58) negation_values -> EXMARK deniable_values .

    AND             reduce using rule 58 (negation_values -> EXMARK deniable_values .)
    OR              reduce using rule 58 (negation_values -> EXMARK deniable_values .)
    RPAREN          reduce using rule 58 (negation_values -> EXMARK deniable_values .)
    SEMICOLON       reduce using rule 58 (negation_values -> EXMARK deniable_values .)


state 159

    (71) condition -> EXMARK IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 71 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 71 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 71 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    SEMICOLON       reduce using rule 71 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)


state 160

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype . GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype . GREATERTHAN LPAREN RPAREN SEMICOLON

    GREATERTHAN     shift and go to state 175


state 161

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT OF . LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN          shift and go to state 176


state 162

    (16) map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .

    IDENTIFIER      reduce using rule 16 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    COMMA           reduce using rule 16 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    GREATERTHAN     reduce using rule 16 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)


state 163

    (38) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (12) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . forStatement
    (7) class_content -> . while
    (8) class_content -> . stack
    (9) class_content -> . inferedReturnFunction
    (10) class_content -> . expression SEMICOLON
    (13) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (34) ifElseStatement -> . ifStatement
    (35) ifElseStatement -> . ifStatement elifStatement_repeat
    (79) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (99) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (100) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (41) forStatement -> . FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET
    (44) while -> . WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (43) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> . FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON
    (46) stack -> . FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (14) map_identifier -> . MAP
    (15) map_identifier -> . MAP map_type_specified
    (38) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (17) datatype -> . returnType
    (18) datatype -> . VAR
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (19) returnType -> . INT
    (20) returnType -> . STRING
    (21) returnType -> . BOOL
    (22) returnType -> . DOUBLE
    (23) returnType -> . DYNAMIC
    (24) returnType -> . VOID
    (25) returnType -> . map_identifier
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 177
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    FINAL           shift and go to state 19
    IDENTIFIER      shift and go to state 14
    MAP             shift and go to state 22
    IF              shift and go to state 23
    VAR             shift and go to state 25
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 31
    STRING          shift and go to state 32
    BOOL            shift and go to state 33
    DOUBLE          shift and go to state 34
    DYNAMIC         shift and go to state 35
    VOID            shift and go to state 36

    class_content                  shift and go to state 37
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    forStatement                   shift and go to state 8
    while                          shift and go to state 9
    stack                          shift and go to state 10
    inferedReturnFunction          shift and go to state 11
    expression                     shift and go to state 12
    map_identifier                 shift and go to state 13
    ifStatement                    shift and go to state 15
    datatype                       shift and go to state 16
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    returnType                     shift and go to state 24
    number                         shift and go to state 26

state 164

    (13) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .

    FOR             reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    WHILE           reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    FINAL           reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    MAP             reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    IF              reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VAR             reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INTEGER         reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    FLOAT           reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STR             reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INT             reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STRING          reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOL            reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DYNAMIC         reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VOID            reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    $end            reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    RCURLYBRACKET   reduce using rule 13 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)


state 165

    (31) map_pairs -> map_pair COMMA map_pairs .

    RCURLYBRACKET   reduce using rule 31 (map_pairs -> map_pair COMMA map_pairs .)


state 166

    (29) map_pair -> map_key COLON map_value .

    COMMA           reduce using rule 29 (map_pair -> map_key COLON map_value .)
    RCURLYBRACKET   reduce using rule 29 (map_pair -> map_key COLON map_value .)


state 167

    (33) map_value -> value .

    COMMA           reduce using rule 33 (map_value -> value .)
    RCURLYBRACKET   reduce using rule 33 (map_value -> value .)


state 168

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression . SEMICOLON RCURLYBRACKET

    SEMICOLON       shift and go to state 178


state 169

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL . GREATERTHAN expression SEMICOLON

    GREATERTHAN     shift and go to state 179


state 170

    (84) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .

    RPAREN          reduce using rule 84 (optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .)


state 171

    (88) optFunction_arguments -> optFunction_argument COMMA . optFunction_arguments
    (87) optFunction_arguments -> . optFunction_argument
    (88) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (86) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 155

    optFunction_argument           shift and go to state 154
    optFunction_arguments          shift and go to state 180

state 172

    (86) optFunction_argument -> REQUIRED datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 181


state 173

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression . RPAREN LCURLYBRACKET RCURLYBRACKET

    RPAREN          shift and go to state 182


state 174

    (44) while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    FOR             reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    WHILE           reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FINAL           reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 44 (while -> WHILE LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 175

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN . LPAREN opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 183


state 176

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN . IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 184


state 177

    (38) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FOR             reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    WHILE           reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FINAL           reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 38 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 178

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 185


state 179

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN . expression SEMICOLON
    (89) expression -> . operableTypes operatorExpression operableTypes
    (90) expression -> . value
    (91) expression -> . operableTypes operatorExpression
    (92) operableTypes -> . IDENTIFIER
    (93) operableTypes -> . number
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (68) number -> . FLOAT
    (69) number -> . INTEGER

    IDENTIFIER      shift and go to state 91
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30

    expression                     shift and go to state 186
    operableTypes                  shift and go to state 20
    value                          shift and go to state 21
    number                         shift and go to state 26

state 180

    (88) optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .

    RCURLYBRACKET   reduce using rule 88 (optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .)


state 181

    (86) optFunction_argument -> REQUIRED datatype IDENTIFIER .

    COMMA           reduce using rule 86 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 86 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)


state 182

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN . LCURLYBRACKET RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 187


state 183

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN . opt_value RPAREN SEMICOLON
    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN . RPAREN SEMICOLON
    (53) opt_value -> . value
    (54) opt_value -> . empty
    (48) value -> . INTEGER
    (49) value -> . FLOAT
    (50) value -> . STR
    (51) value -> . BOOLEAN
    (52) value -> . IDENTIFIER
    (26) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 189
    INTEGER         shift and go to state 117
    FLOAT           shift and go to state 118
    STR             shift and go to state 29
    BOOLEAN         shift and go to state 30
    IDENTIFIER      shift and go to state 110

  ! RPAREN          [ reduce using rule 26 (empty -> .) ]

    opt_value                      shift and go to state 188
    value                          shift and go to state 190
    empty                          shift and go to state 191

state 184

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER . RPAREN SEMICOLON

    RPAREN          shift and go to state 192


state 185

    (47) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .

    FOR             reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    WHILE           reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    FINAL           reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    MAP             reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    IF              reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VAR             reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INTEGER         reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    FLOAT           reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STR             reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOLEAN         reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INT             reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STRING          reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOL            reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DOUBLE          reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DYNAMIC         reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VOID            reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    $end            reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 47 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)


state 186

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression . SEMICOLON

    SEMICOLON       shift and go to state 193


state 187

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 194


state 188

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value . RPAREN SEMICOLON

    RPAREN          shift and go to state 195


state 189

    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 196


state 190

    (53) opt_value -> value .

    RPAREN          reduce using rule 53 (opt_value -> value .)


state 191

    (54) opt_value -> empty .

    RPAREN          reduce using rule 54 (opt_value -> empty .)


state 192

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 197


state 193

    (79) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .

    FOR             reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    WHILE           reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    FINAL           reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    MAP             reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    IF              reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VAR             reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INTEGER         reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    FLOAT           reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STR             reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOLEAN         reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INT             reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STRING          reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOL            reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DOUBLE          reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DYNAMIC         reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VOID            reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    $end            reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 79 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)


state 194

    (41) forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .

    FOR             reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    WHILE           reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    FINAL           reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    MAP             reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    IF              reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    VAR             reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    INTEGER         reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    FLOAT           reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    STR             reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    BOOLEAN         reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    INT             reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    STRING          reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    BOOL            reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    DOUBLE          reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    DYNAMIC         reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    VOID            reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 41 (forStatement -> FOR LPAREN declarationExpression SEMICOLON condition SEMICOLON expression RPAREN LCURLYBRACKET RCURLYBRACKET .)


state 195

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 198


state 196

    (45) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .

    FOR             reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    FINAL           reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    STR             reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    INT             reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    BOOL            reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    DYNAMIC         reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)
    RCURLYBRACKET   reduce using rule 45 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN RPAREN SEMICOLON .)


state 197

    (46) stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .

    FOR             reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FINAL           reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    MAP             reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    IF              reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    VAR             reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INTEGER         reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FLOAT           reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    STR             reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INT             reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    STRING          reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    BOOL            reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DYNAMIC         reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    VOID            reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    $end            reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)
    RCURLYBRACKET   reduce using rule 46 (stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON .)


state 198

    (43) stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .

    FOR             reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    WHILE           reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    FINAL           reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    MAP             reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    IF              reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    VAR             reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    INTEGER         reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    FLOAT           reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    STR             reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    INT             reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    STRING          reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    BOOL            reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    DYNAMIC         reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    VOID            reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    $end            reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)
    RCURLYBRACKET   reduce using rule 43 (stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 13 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 183 resolved as shift
