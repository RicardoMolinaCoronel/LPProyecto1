Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    APOSTROPHE
    ASYNC
    AWAIT
    CATCH
    CLOSE
    COMMENT
    DOLLAR
    DOUBQUOTMARK
    EXIT
    FILE
    IMPORT
    IN
    IS
    ITERABLE
    LIST
    LSQUAREBRACKET
    MAIN
    METHOD
    NOTEQUAL
    OPENWRITE
    PRINT
    READLINESYNC
    RSQUAREBRACKET
    SET
    TRY
    WHILE
    WRITE

Grammar

Rule 0     S' -> class
Rule 1     class -> class_content_repeat
Rule 2     class_content -> map
Rule 3     class_content -> ifElseStatement
Rule 4     class_content -> function_lambda
Rule 5     class_content -> declarationExpression
Rule 6     class_content -> inferedReturnFunction
Rule 7     class_content -> expression SEMICOLON
Rule 8     class_content_repeat -> class_content
Rule 9     class_content_repeat -> class_content_repeat class_content
Rule 10    map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
Rule 11    map_identifier -> MAP
Rule 12    map_identifier -> MAP map_type_specified
Rule 13    map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN
Rule 14    datatype -> returnType
Rule 15    datatype -> VAR
Rule 16    returnType -> INT
Rule 17    returnType -> STRING
Rule 18    returnType -> BOOL
Rule 19    returnType -> DOUBLE
Rule 20    returnType -> DYNAMIC
Rule 21    returnType -> VOID
Rule 22    returnType -> map_identifier
Rule 23    empty -> <empty>
Rule 24    map_content -> map_pairs
Rule 25    map_content -> empty
Rule 26    map_pair -> map_key COLON map_value
Rule 27    map_pairs -> map_pair
Rule 28    map_pairs -> map_pair COMMA map_pairs
Rule 29    map_key -> value
Rule 30    map_value -> value
Rule 31    ifElseStatement -> ifStatement
Rule 32    ifElseStatement -> ifStatement elifStatement_repeat
Rule 33    elifStatement_repeat -> elifStatement
Rule 34    elifStatement_repeat -> elifStatement elifStatement_repeat
Rule 35    ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 36    elifStatement -> ELSE ifStatement
Rule 37    elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 38    forStatement -> FOR LPAREN declarationExpression SEMICOLON conditions SEMICOLON taskStatement RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
Rule 39    taskStatement -> IDENTIFIER PLUS PLUS
Rule 40    taskStatement -> IDENTIFIER MINUS MINUS
Rule 41    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN LPAREN opt_value RPAREN SEMICOLON
Rule 42    stack -> FINAL IDENTIFIER EQUAL STACK LESSTHAN datatype GREATERTHAN SEMICOLON
Rule 43    stack -> FINAL IDENTIFIER EQUAL STACK DOT OF LPAREN IDENTIFIER RPAREN SEMICOLON
Rule 44    inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
Rule 45    value -> INTEGER
Rule 46    value -> FLOAT
Rule 47    value -> STR
Rule 48    value -> BOOLEAN
Rule 49    value -> IDENTIFIER
Rule 50    opt_value -> value
Rule 51    opt_value -> empty
Rule 52    deniable_values -> IDENTIFIER
Rule 53    deniable_values -> BOOLEAN
Rule 54    negation_values -> deniable_values
Rule 55    negation_values -> EXMARK deniable_values
Rule 56    condition_values -> negation_values
Rule 57    condition_values -> INTEGER
Rule 58    condition_values -> FLOAT
Rule 59    condition_values -> STR
Rule 60    condition_operator -> DOUBLEQUAL
Rule 61    condition_operator -> LESSTHAN
Rule 62    condition_operator -> GREATERTHAN
Rule 63    number -> FLOAT
Rule 64    number -> INTEGER
Rule 65    condition -> IDENTIFIER condition_operator condition_values
Rule 66    condition -> EXMARK IDENTIFIER condition_operator condition_values
Rule 67    condition -> BOOLEAN condition_operator BOOLEAN
Rule 68    condition -> number condition_operator number
Rule 69    condition -> STR condition_operator STR
Rule 70    conditions -> condition
Rule 71    conditions -> condition condition_connector conditions
Rule 72    condition_connector -> AND
Rule 73    condition_connector -> OR
Rule 74    function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
Rule 75    function_argument -> datatype IDENTIFIER
Rule 76    function_argument -> empty
Rule 77    function_arguments_repeat -> function_argument
Rule 78    function_arguments_repeat -> function_argument COMMA function_arguments_repeat
Rule 79    optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET
Rule 80    optFunction_argumentsExpression -> empty
Rule 81    optFunction_argument -> REQUIRED datatype IDENTIFIER
Rule 82    optFunction_arguments -> optFunction_argument
Rule 83    optFunction_arguments -> optFunction_argument COMMA optFunction_arguments
Rule 84    expression -> operableTypes operatorExpression operableTypes
Rule 85    expression -> value
Rule 86    operableTypes -> IDENTIFIER
Rule 87    operableTypes -> number
Rule 88    operatorExpression -> PLUS
Rule 89    operatorExpression -> MINUS
Rule 90    operatorExpression -> TIMES
Rule 91    operatorExpression -> DIVISION
Rule 92    declarationExpression -> datatype IDENTIFIER SEMICOLON
Rule 93    declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 72
APOSTROPHE           : 
ASYNC                : 
AWAIT                : 
BOOL                 : 18
BOOLEAN              : 48 53 67 67
CATCH                : 
CLOSE                : 
COLON                : 26
COMMA                : 13 28 78 83
COMMENT              : 
DIVISION             : 91
DOLLAR               : 
DOT                  : 43
DOUBLE               : 19
DOUBLEQUAL           : 60
DOUBQUOTMARK         : 
DYNAMIC              : 20
ELSE                 : 36 37
EQUAL                : 10 41 42 43 74 93
EXIT                 : 
EXMARK               : 55 66
FILE                 : 
FINAL                : 41 42 43
FLOAT                : 46 58 63
FOR                  : 38
GREATERTHAN          : 13 41 42 62 74
IDENTIFIER           : 10 39 40 41 42 43 43 44 49 52 65 66 74 75 81 86 92 93
IF                   : 35
IMPORT               : 
IN                   : 
INT                  : 16
INTEGER              : 45 57 64
IS                   : 
ITERABLE             : 
LCURLYBRACKET        : 10 35 37 38 44 79
LESSTHAN             : 13 41 42 61
LIST                 : 
LPAREN               : 35 38 41 43 44 74
LSQUAREBRACKET       : 
MAIN                 : 
MAP                  : 11 12
METHOD               : 
MINUS                : 40 40 89
NOTEQUAL             : 
OF                   : 43
OPENWRITE            : 
OR                   : 73
PLUS                 : 39 39 88
PRINT                : 
RCURLYBRACKET        : 10 35 37 38 44 79
READLINESYNC         : 
REQUIRED             : 81
RETURN               : 44
RPAREN               : 35 38 41 43 44 74
RSQUAREBRACKET       : 
SEMICOLON            : 7 10 38 38 41 42 43 44 74 92 93
SET                  : 
STACK                : 41 42 43
STR                  : 47 59 69 69
STRING               : 17
TIMES                : 90
TRY                  : 
VAR                  : 15
VOID                 : 21
WHILE                : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

class                : 0
class_content        : 8 9
class_content_repeat : 1 9 35 37 38
condition            : 70 71
condition_connector  : 71
condition_operator   : 65 66 67 68 69
condition_values     : 65 66
conditions           : 35 38 71
datatype             : 13 13 41 42 74 75 81 92 93
declarationExpression : 5 38
deniable_values      : 54 55
elifStatement        : 33 34
elifStatement_repeat : 32 34
empty                : 25 51 76 80
expression           : 7 44 74 93
forStatement         : 
function_argument    : 77 78
function_arguments_repeat : 44 74 78
function_lambda      : 4
ifElseStatement      : 3
ifStatement          : 31 32 36
inferedReturnFunction : 6
map                  : 2
map_content          : 10
map_identifier       : 10 22
map_key              : 26
map_pair             : 27 28
map_pairs            : 24 28
map_type_specified   : 12
map_value            : 26
negation_values      : 56
number               : 68 68 87
operableTypes        : 84 84
operatorExpression   : 84
optFunction_argument : 82 83
optFunction_arguments : 79 83
optFunction_argumentsExpression : 74
opt_value            : 41
returnType           : 14
stack                : 
taskStatement        : 38
value                : 29 30 50 85

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . class_content_repeat
    (8) class_content_repeat -> . class_content
    (9) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class                          shift and go to state 1
    class_content_repeat           shift and go to state 2
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 1

    (0) S' -> class .



state 2

    (1) class -> class_content_repeat .
    (9) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    $end            reduce using rule 1 (class -> class_content_repeat .)
    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class_content                  shift and go to state 31
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 3

    (8) class_content_repeat -> class_content .

    IDENTIFIER      reduce using rule 8 (class_content_repeat -> class_content .)
    MAP             reduce using rule 8 (class_content_repeat -> class_content .)
    IF              reduce using rule 8 (class_content_repeat -> class_content .)
    VAR             reduce using rule 8 (class_content_repeat -> class_content .)
    INTEGER         reduce using rule 8 (class_content_repeat -> class_content .)
    FLOAT           reduce using rule 8 (class_content_repeat -> class_content .)
    STR             reduce using rule 8 (class_content_repeat -> class_content .)
    BOOLEAN         reduce using rule 8 (class_content_repeat -> class_content .)
    INT             reduce using rule 8 (class_content_repeat -> class_content .)
    STRING          reduce using rule 8 (class_content_repeat -> class_content .)
    BOOL            reduce using rule 8 (class_content_repeat -> class_content .)
    DOUBLE          reduce using rule 8 (class_content_repeat -> class_content .)
    DYNAMIC         reduce using rule 8 (class_content_repeat -> class_content .)
    VOID            reduce using rule 8 (class_content_repeat -> class_content .)
    $end            reduce using rule 8 (class_content_repeat -> class_content .)
    RCURLYBRACKET   reduce using rule 8 (class_content_repeat -> class_content .)


state 4

    (2) class_content -> map .

    IDENTIFIER      reduce using rule 2 (class_content -> map .)
    MAP             reduce using rule 2 (class_content -> map .)
    IF              reduce using rule 2 (class_content -> map .)
    VAR             reduce using rule 2 (class_content -> map .)
    INTEGER         reduce using rule 2 (class_content -> map .)
    FLOAT           reduce using rule 2 (class_content -> map .)
    STR             reduce using rule 2 (class_content -> map .)
    BOOLEAN         reduce using rule 2 (class_content -> map .)
    INT             reduce using rule 2 (class_content -> map .)
    STRING          reduce using rule 2 (class_content -> map .)
    BOOL            reduce using rule 2 (class_content -> map .)
    DOUBLE          reduce using rule 2 (class_content -> map .)
    DYNAMIC         reduce using rule 2 (class_content -> map .)
    VOID            reduce using rule 2 (class_content -> map .)
    $end            reduce using rule 2 (class_content -> map .)
    RCURLYBRACKET   reduce using rule 2 (class_content -> map .)


state 5

    (3) class_content -> ifElseStatement .

    IDENTIFIER      reduce using rule 3 (class_content -> ifElseStatement .)
    MAP             reduce using rule 3 (class_content -> ifElseStatement .)
    IF              reduce using rule 3 (class_content -> ifElseStatement .)
    VAR             reduce using rule 3 (class_content -> ifElseStatement .)
    INTEGER         reduce using rule 3 (class_content -> ifElseStatement .)
    FLOAT           reduce using rule 3 (class_content -> ifElseStatement .)
    STR             reduce using rule 3 (class_content -> ifElseStatement .)
    BOOLEAN         reduce using rule 3 (class_content -> ifElseStatement .)
    INT             reduce using rule 3 (class_content -> ifElseStatement .)
    STRING          reduce using rule 3 (class_content -> ifElseStatement .)
    BOOL            reduce using rule 3 (class_content -> ifElseStatement .)
    DOUBLE          reduce using rule 3 (class_content -> ifElseStatement .)
    DYNAMIC         reduce using rule 3 (class_content -> ifElseStatement .)
    VOID            reduce using rule 3 (class_content -> ifElseStatement .)
    $end            reduce using rule 3 (class_content -> ifElseStatement .)
    RCURLYBRACKET   reduce using rule 3 (class_content -> ifElseStatement .)


state 6

    (4) class_content -> function_lambda .

    IDENTIFIER      reduce using rule 4 (class_content -> function_lambda .)
    MAP             reduce using rule 4 (class_content -> function_lambda .)
    IF              reduce using rule 4 (class_content -> function_lambda .)
    VAR             reduce using rule 4 (class_content -> function_lambda .)
    INTEGER         reduce using rule 4 (class_content -> function_lambda .)
    FLOAT           reduce using rule 4 (class_content -> function_lambda .)
    STR             reduce using rule 4 (class_content -> function_lambda .)
    BOOLEAN         reduce using rule 4 (class_content -> function_lambda .)
    INT             reduce using rule 4 (class_content -> function_lambda .)
    STRING          reduce using rule 4 (class_content -> function_lambda .)
    BOOL            reduce using rule 4 (class_content -> function_lambda .)
    DOUBLE          reduce using rule 4 (class_content -> function_lambda .)
    DYNAMIC         reduce using rule 4 (class_content -> function_lambda .)
    VOID            reduce using rule 4 (class_content -> function_lambda .)
    $end            reduce using rule 4 (class_content -> function_lambda .)
    RCURLYBRACKET   reduce using rule 4 (class_content -> function_lambda .)


state 7

    (5) class_content -> declarationExpression .

    IDENTIFIER      reduce using rule 5 (class_content -> declarationExpression .)
    MAP             reduce using rule 5 (class_content -> declarationExpression .)
    IF              reduce using rule 5 (class_content -> declarationExpression .)
    VAR             reduce using rule 5 (class_content -> declarationExpression .)
    INTEGER         reduce using rule 5 (class_content -> declarationExpression .)
    FLOAT           reduce using rule 5 (class_content -> declarationExpression .)
    STR             reduce using rule 5 (class_content -> declarationExpression .)
    BOOLEAN         reduce using rule 5 (class_content -> declarationExpression .)
    INT             reduce using rule 5 (class_content -> declarationExpression .)
    STRING          reduce using rule 5 (class_content -> declarationExpression .)
    BOOL            reduce using rule 5 (class_content -> declarationExpression .)
    DOUBLE          reduce using rule 5 (class_content -> declarationExpression .)
    DYNAMIC         reduce using rule 5 (class_content -> declarationExpression .)
    VOID            reduce using rule 5 (class_content -> declarationExpression .)
    $end            reduce using rule 5 (class_content -> declarationExpression .)
    RCURLYBRACKET   reduce using rule 5 (class_content -> declarationExpression .)


state 8

    (6) class_content -> inferedReturnFunction .

    IDENTIFIER      reduce using rule 6 (class_content -> inferedReturnFunction .)
    MAP             reduce using rule 6 (class_content -> inferedReturnFunction .)
    IF              reduce using rule 6 (class_content -> inferedReturnFunction .)
    VAR             reduce using rule 6 (class_content -> inferedReturnFunction .)
    INTEGER         reduce using rule 6 (class_content -> inferedReturnFunction .)
    FLOAT           reduce using rule 6 (class_content -> inferedReturnFunction .)
    STR             reduce using rule 6 (class_content -> inferedReturnFunction .)
    BOOLEAN         reduce using rule 6 (class_content -> inferedReturnFunction .)
    INT             reduce using rule 6 (class_content -> inferedReturnFunction .)
    STRING          reduce using rule 6 (class_content -> inferedReturnFunction .)
    BOOL            reduce using rule 6 (class_content -> inferedReturnFunction .)
    DOUBLE          reduce using rule 6 (class_content -> inferedReturnFunction .)
    DYNAMIC         reduce using rule 6 (class_content -> inferedReturnFunction .)
    VOID            reduce using rule 6 (class_content -> inferedReturnFunction .)
    $end            reduce using rule 6 (class_content -> inferedReturnFunction .)
    RCURLYBRACKET   reduce using rule 6 (class_content -> inferedReturnFunction .)


state 9

    (7) class_content -> expression . SEMICOLON

    SEMICOLON       shift and go to state 32


state 10

    (10) map -> map_identifier . IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (22) returnType -> map_identifier .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 33

  ! IDENTIFIER      [ reduce using rule 22 (returnType -> map_identifier .) ]


state 11

    (44) inferedReturnFunction -> IDENTIFIER . LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (86) operableTypes -> IDENTIFIER .
    (49) value -> IDENTIFIER .

    LPAREN          shift and go to state 34
    PLUS            reduce using rule 86 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 86 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 86 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 86 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (value -> IDENTIFIER .)


state 12

    (31) ifElseStatement -> ifStatement .
    (32) ifElseStatement -> ifStatement . elifStatement_repeat
    (33) elifStatement_repeat -> . elifStatement
    (34) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (36) elifStatement -> . ELSE ifStatement
    (37) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    IDENTIFIER      reduce using rule 31 (ifElseStatement -> ifStatement .)
    MAP             reduce using rule 31 (ifElseStatement -> ifStatement .)
    IF              reduce using rule 31 (ifElseStatement -> ifStatement .)
    VAR             reduce using rule 31 (ifElseStatement -> ifStatement .)
    INTEGER         reduce using rule 31 (ifElseStatement -> ifStatement .)
    FLOAT           reduce using rule 31 (ifElseStatement -> ifStatement .)
    STR             reduce using rule 31 (ifElseStatement -> ifStatement .)
    BOOLEAN         reduce using rule 31 (ifElseStatement -> ifStatement .)
    INT             reduce using rule 31 (ifElseStatement -> ifStatement .)
    STRING          reduce using rule 31 (ifElseStatement -> ifStatement .)
    BOOL            reduce using rule 31 (ifElseStatement -> ifStatement .)
    DOUBLE          reduce using rule 31 (ifElseStatement -> ifStatement .)
    DYNAMIC         reduce using rule 31 (ifElseStatement -> ifStatement .)
    VOID            reduce using rule 31 (ifElseStatement -> ifStatement .)
    $end            reduce using rule 31 (ifElseStatement -> ifStatement .)
    RCURLYBRACKET   reduce using rule 31 (ifElseStatement -> ifStatement .)
    ELSE            shift and go to state 37

    elifStatement_repeat           shift and go to state 35
    elifStatement                  shift and go to state 36

state 13

    (74) function_lambda -> datatype . IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> datatype . IDENTIFIER SEMICOLON
    (93) declarationExpression -> datatype . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 38


state 14

    (84) expression -> operableTypes . operatorExpression operableTypes
    (88) operatorExpression -> . PLUS
    (89) operatorExpression -> . MINUS
    (90) operatorExpression -> . TIMES
    (91) operatorExpression -> . DIVISION

    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVISION        shift and go to state 43

    operatorExpression             shift and go to state 39

state 15

    (85) expression -> value .

    SEMICOLON       reduce using rule 85 (expression -> value .)


state 16

    (11) map_identifier -> MAP .
    (12) map_identifier -> MAP . map_type_specified
    (13) map_type_specified -> . LESSTHAN datatype COMMA datatype GREATERTHAN

    IDENTIFIER      reduce using rule 11 (map_identifier -> MAP .)
    COMMA           reduce using rule 11 (map_identifier -> MAP .)
    GREATERTHAN     reduce using rule 11 (map_identifier -> MAP .)
    LESSTHAN        shift and go to state 45

    map_type_specified             shift and go to state 44

state 17

    (35) ifStatement -> IF . LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LPAREN          shift and go to state 46


state 18

    (14) datatype -> returnType .

    IDENTIFIER      reduce using rule 14 (datatype -> returnType .)
    COMMA           reduce using rule 14 (datatype -> returnType .)
    GREATERTHAN     reduce using rule 14 (datatype -> returnType .)


state 19

    (15) datatype -> VAR .

    IDENTIFIER      reduce using rule 15 (datatype -> VAR .)
    COMMA           reduce using rule 15 (datatype -> VAR .)
    GREATERTHAN     reduce using rule 15 (datatype -> VAR .)


state 20

    (87) operableTypes -> number .

    PLUS            reduce using rule 87 (operableTypes -> number .)
    MINUS           reduce using rule 87 (operableTypes -> number .)
    TIMES           reduce using rule 87 (operableTypes -> number .)
    DIVISION        reduce using rule 87 (operableTypes -> number .)
    SEMICOLON       reduce using rule 87 (operableTypes -> number .)


state 21

    (45) value -> INTEGER .
    (64) number -> INTEGER .

    SEMICOLON       reduce using rule 45 (value -> INTEGER .)
    PLUS            reduce using rule 64 (number -> INTEGER .)
    MINUS           reduce using rule 64 (number -> INTEGER .)
    TIMES           reduce using rule 64 (number -> INTEGER .)
    DIVISION        reduce using rule 64 (number -> INTEGER .)


state 22

    (46) value -> FLOAT .
    (63) number -> FLOAT .

    SEMICOLON       reduce using rule 46 (value -> FLOAT .)
    PLUS            reduce using rule 63 (number -> FLOAT .)
    MINUS           reduce using rule 63 (number -> FLOAT .)
    TIMES           reduce using rule 63 (number -> FLOAT .)
    DIVISION        reduce using rule 63 (number -> FLOAT .)


state 23

    (47) value -> STR .

    SEMICOLON       reduce using rule 47 (value -> STR .)
    COLON           reduce using rule 47 (value -> STR .)
    COMMA           reduce using rule 47 (value -> STR .)
    RCURLYBRACKET   reduce using rule 47 (value -> STR .)


state 24

    (48) value -> BOOLEAN .

    SEMICOLON       reduce using rule 48 (value -> BOOLEAN .)
    COLON           reduce using rule 48 (value -> BOOLEAN .)
    COMMA           reduce using rule 48 (value -> BOOLEAN .)
    RCURLYBRACKET   reduce using rule 48 (value -> BOOLEAN .)


state 25

    (16) returnType -> INT .

    IDENTIFIER      reduce using rule 16 (returnType -> INT .)
    COMMA           reduce using rule 16 (returnType -> INT .)
    GREATERTHAN     reduce using rule 16 (returnType -> INT .)


state 26

    (17) returnType -> STRING .

    IDENTIFIER      reduce using rule 17 (returnType -> STRING .)
    COMMA           reduce using rule 17 (returnType -> STRING .)
    GREATERTHAN     reduce using rule 17 (returnType -> STRING .)


state 27

    (18) returnType -> BOOL .

    IDENTIFIER      reduce using rule 18 (returnType -> BOOL .)
    COMMA           reduce using rule 18 (returnType -> BOOL .)
    GREATERTHAN     reduce using rule 18 (returnType -> BOOL .)


state 28

    (19) returnType -> DOUBLE .

    IDENTIFIER      reduce using rule 19 (returnType -> DOUBLE .)
    COMMA           reduce using rule 19 (returnType -> DOUBLE .)
    GREATERTHAN     reduce using rule 19 (returnType -> DOUBLE .)


state 29

    (20) returnType -> DYNAMIC .

    IDENTIFIER      reduce using rule 20 (returnType -> DYNAMIC .)
    COMMA           reduce using rule 20 (returnType -> DYNAMIC .)
    GREATERTHAN     reduce using rule 20 (returnType -> DYNAMIC .)


state 30

    (21) returnType -> VOID .

    IDENTIFIER      reduce using rule 21 (returnType -> VOID .)
    COMMA           reduce using rule 21 (returnType -> VOID .)
    GREATERTHAN     reduce using rule 21 (returnType -> VOID .)


state 31

    (9) class_content_repeat -> class_content_repeat class_content .

    IDENTIFIER      reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    MAP             reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    IF              reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    VAR             reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    INTEGER         reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    FLOAT           reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    STR             reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    BOOLEAN         reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    INT             reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    STRING          reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    BOOL            reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    DOUBLE          reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    DYNAMIC         reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    VOID            reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    $end            reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)
    RCURLYBRACKET   reduce using rule 9 (class_content_repeat -> class_content_repeat class_content .)


state 32

    (7) class_content -> expression SEMICOLON .

    IDENTIFIER      reduce using rule 7 (class_content -> expression SEMICOLON .)
    MAP             reduce using rule 7 (class_content -> expression SEMICOLON .)
    IF              reduce using rule 7 (class_content -> expression SEMICOLON .)
    VAR             reduce using rule 7 (class_content -> expression SEMICOLON .)
    INTEGER         reduce using rule 7 (class_content -> expression SEMICOLON .)
    FLOAT           reduce using rule 7 (class_content -> expression SEMICOLON .)
    STR             reduce using rule 7 (class_content -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 7 (class_content -> expression SEMICOLON .)
    INT             reduce using rule 7 (class_content -> expression SEMICOLON .)
    STRING          reduce using rule 7 (class_content -> expression SEMICOLON .)
    BOOL            reduce using rule 7 (class_content -> expression SEMICOLON .)
    DOUBLE          reduce using rule 7 (class_content -> expression SEMICOLON .)
    DYNAMIC         reduce using rule 7 (class_content -> expression SEMICOLON .)
    VOID            reduce using rule 7 (class_content -> expression SEMICOLON .)
    $end            reduce using rule 7 (class_content -> expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 7 (class_content -> expression SEMICOLON .)


state 33

    (10) map -> map_identifier IDENTIFIER . EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    EQUAL           shift and go to state 47


state 34

    (44) inferedReturnFunction -> IDENTIFIER LPAREN . function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (77) function_arguments_repeat -> . function_argument
    (78) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (75) function_argument -> . datatype IDENTIFIER
    (76) function_argument -> . empty
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (23) empty -> .
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    COMMA           reduce using rule 23 (empty -> .)
    RPAREN          reduce using rule 23 (empty -> .)
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    function_arguments_repeat      shift and go to state 48
    function_argument              shift and go to state 49
    datatype                       shift and go to state 50
    empty                          shift and go to state 51
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 35

    (32) ifElseStatement -> ifStatement elifStatement_repeat .

    IDENTIFIER      reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    MAP             reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    IF              reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VAR             reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STR             reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    INT             reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    STRING          reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    BOOL            reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    VOID            reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    $end            reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 32 (ifElseStatement -> ifStatement elifStatement_repeat .)


state 36

    (33) elifStatement_repeat -> elifStatement .
    (34) elifStatement_repeat -> elifStatement . elifStatement_repeat
    (33) elifStatement_repeat -> . elifStatement
    (34) elifStatement_repeat -> . elifStatement elifStatement_repeat
    (36) elifStatement -> . ELSE ifStatement
    (37) elifStatement -> . ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET

    IDENTIFIER      reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    MAP             reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    IF              reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    VAR             reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    INTEGER         reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    FLOAT           reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    STR             reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    BOOLEAN         reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    INT             reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    STRING          reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    BOOL            reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    DOUBLE          reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    DYNAMIC         reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    VOID            reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    $end            reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    RCURLYBRACKET   reduce using rule 33 (elifStatement_repeat -> elifStatement .)
    ELSE            shift and go to state 37

    elifStatement                  shift and go to state 36
    elifStatement_repeat           shift and go to state 53

state 37

    (36) elifStatement -> ELSE . ifStatement
    (37) elifStatement -> ELSE . LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 55
    IF              shift and go to state 17

    ifStatement                    shift and go to state 54

state 38

    (74) function_lambda -> datatype IDENTIFIER . LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> datatype IDENTIFIER . SEMICOLON
    (93) declarationExpression -> datatype IDENTIFIER . EQUAL expression SEMICOLON

    LPAREN          shift and go to state 56
    SEMICOLON       shift and go to state 58
    EQUAL           shift and go to state 57


state 39

    (84) expression -> operableTypes operatorExpression . operableTypes
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 60
    FLOAT           shift and go to state 61
    INTEGER         shift and go to state 62

    operableTypes                  shift and go to state 59
    number                         shift and go to state 20

state 40

    (88) operatorExpression -> PLUS .

    IDENTIFIER      reduce using rule 88 (operatorExpression -> PLUS .)
    FLOAT           reduce using rule 88 (operatorExpression -> PLUS .)
    INTEGER         reduce using rule 88 (operatorExpression -> PLUS .)


state 41

    (89) operatorExpression -> MINUS .

    IDENTIFIER      reduce using rule 89 (operatorExpression -> MINUS .)
    FLOAT           reduce using rule 89 (operatorExpression -> MINUS .)
    INTEGER         reduce using rule 89 (operatorExpression -> MINUS .)


state 42

    (90) operatorExpression -> TIMES .

    IDENTIFIER      reduce using rule 90 (operatorExpression -> TIMES .)
    FLOAT           reduce using rule 90 (operatorExpression -> TIMES .)
    INTEGER         reduce using rule 90 (operatorExpression -> TIMES .)


state 43

    (91) operatorExpression -> DIVISION .

    IDENTIFIER      reduce using rule 91 (operatorExpression -> DIVISION .)
    FLOAT           reduce using rule 91 (operatorExpression -> DIVISION .)
    INTEGER         reduce using rule 91 (operatorExpression -> DIVISION .)


state 44

    (12) map_identifier -> MAP map_type_specified .

    IDENTIFIER      reduce using rule 12 (map_identifier -> MAP map_type_specified .)
    COMMA           reduce using rule 12 (map_identifier -> MAP map_type_specified .)
    GREATERTHAN     reduce using rule 12 (map_identifier -> MAP map_type_specified .)


state 45

    (13) map_type_specified -> LESSTHAN . datatype COMMA datatype GREATERTHAN
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    datatype                       shift and go to state 63
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 46

    (35) ifStatement -> IF LPAREN . conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (70) conditions -> . condition
    (71) conditions -> . condition condition_connector conditions
    (65) condition -> . IDENTIFIER condition_operator condition_values
    (66) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (67) condition -> . BOOLEAN condition_operator BOOLEAN
    (68) condition -> . number condition_operator number
    (69) condition -> . STR condition_operator STR
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 66
    EXMARK          shift and go to state 67
    BOOLEAN         shift and go to state 68
    STR             shift and go to state 70
    FLOAT           shift and go to state 61
    INTEGER         shift and go to state 62

    conditions                     shift and go to state 64
    condition                      shift and go to state 65
    number                         shift and go to state 69

state 47

    (10) map -> map_identifier IDENTIFIER EQUAL . LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON

    LCURLYBRACKET   shift and go to state 71


state 48

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat . RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    RPAREN          shift and go to state 72


state 49

    (77) function_arguments_repeat -> function_argument .
    (78) function_arguments_repeat -> function_argument . COMMA function_arguments_repeat

    RPAREN          reduce using rule 77 (function_arguments_repeat -> function_argument .)
    LCURLYBRACKET   reduce using rule 77 (function_arguments_repeat -> function_argument .)
    COMMA           shift and go to state 73


state 50

    (75) function_argument -> datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 74


state 51

    (76) function_argument -> empty .

    COMMA           reduce using rule 76 (function_argument -> empty .)
    RPAREN          reduce using rule 76 (function_argument -> empty .)
    LCURLYBRACKET   reduce using rule 76 (function_argument -> empty .)


state 52

    (22) returnType -> map_identifier .

    IDENTIFIER      reduce using rule 22 (returnType -> map_identifier .)
    COMMA           reduce using rule 22 (returnType -> map_identifier .)
    GREATERTHAN     reduce using rule 22 (returnType -> map_identifier .)


state 53

    (34) elifStatement_repeat -> elifStatement elifStatement_repeat .

    IDENTIFIER      reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    MAP             reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    IF              reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VAR             reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INTEGER         reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    FLOAT           reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STR             reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOLEAN         reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    INT             reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    STRING          reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    BOOL            reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DOUBLE          reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    DYNAMIC         reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    VOID            reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    $end            reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)
    RCURLYBRACKET   reduce using rule 34 (elifStatement_repeat -> elifStatement elifStatement_repeat .)


state 54

    (36) elifStatement -> ELSE ifStatement .

    ELSE            reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    IDENTIFIER      reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    MAP             reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    IF              reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    VAR             reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    INTEGER         reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    FLOAT           reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    STR             reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    BOOLEAN         reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    INT             reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    STRING          reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    BOOL            reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    DOUBLE          reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    DYNAMIC         reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    VOID            reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    $end            reduce using rule 36 (elifStatement -> ELSE ifStatement .)
    RCURLYBRACKET   reduce using rule 36 (elifStatement -> ELSE ifStatement .)


state 55

    (37) elifStatement -> ELSE LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (8) class_content_repeat -> . class_content
    (9) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class_content_repeat           shift and go to state 75
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 56

    (74) function_lambda -> datatype IDENTIFIER LPAREN . function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (77) function_arguments_repeat -> . function_argument
    (78) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (75) function_argument -> . datatype IDENTIFIER
    (76) function_argument -> . empty
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (23) empty -> .
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    COMMA           reduce using rule 23 (empty -> .)
    LCURLYBRACKET   reduce using rule 23 (empty -> .)
    RPAREN          reduce using rule 23 (empty -> .)
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    datatype                       shift and go to state 50
    function_arguments_repeat      shift and go to state 76
    function_argument              shift and go to state 49
    empty                          shift and go to state 51
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 57

    (93) declarationExpression -> datatype IDENTIFIER EQUAL . expression SEMICOLON
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 77
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24

    expression                     shift and go to state 78
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    number                         shift and go to state 20

state 58

    (92) declarationExpression -> datatype IDENTIFIER SEMICOLON .

    IDENTIFIER      reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    MAP             reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    IF              reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VAR             reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INTEGER         reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STR             reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    INT             reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    DYNAMIC         reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    $end            reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)
    RCURLYBRACKET   reduce using rule 92 (declarationExpression -> datatype IDENTIFIER SEMICOLON .)


state 59

    (84) expression -> operableTypes operatorExpression operableTypes .

    SEMICOLON       reduce using rule 84 (expression -> operableTypes operatorExpression operableTypes .)


state 60

    (86) operableTypes -> IDENTIFIER .

    SEMICOLON       reduce using rule 86 (operableTypes -> IDENTIFIER .)


state 61

    (63) number -> FLOAT .

    SEMICOLON       reduce using rule 63 (number -> FLOAT .)
    DOUBLEQUAL      reduce using rule 63 (number -> FLOAT .)
    LESSTHAN        reduce using rule 63 (number -> FLOAT .)
    GREATERTHAN     reduce using rule 63 (number -> FLOAT .)
    AND             reduce using rule 63 (number -> FLOAT .)
    OR              reduce using rule 63 (number -> FLOAT .)
    RPAREN          reduce using rule 63 (number -> FLOAT .)


state 62

    (64) number -> INTEGER .

    SEMICOLON       reduce using rule 64 (number -> INTEGER .)
    DOUBLEQUAL      reduce using rule 64 (number -> INTEGER .)
    LESSTHAN        reduce using rule 64 (number -> INTEGER .)
    GREATERTHAN     reduce using rule 64 (number -> INTEGER .)
    AND             reduce using rule 64 (number -> INTEGER .)
    OR              reduce using rule 64 (number -> INTEGER .)
    RPAREN          reduce using rule 64 (number -> INTEGER .)


state 63

    (13) map_type_specified -> LESSTHAN datatype . COMMA datatype GREATERTHAN

    COMMA           shift and go to state 79


state 64

    (35) ifStatement -> IF LPAREN conditions . RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET

    RPAREN          shift and go to state 80


state 65

    (70) conditions -> condition .
    (71) conditions -> condition . condition_connector conditions
    (72) condition_connector -> . AND
    (73) condition_connector -> . OR

    RPAREN          reduce using rule 70 (conditions -> condition .)
    AND             shift and go to state 82
    OR              shift and go to state 83

    condition_connector            shift and go to state 81

state 66

    (65) condition -> IDENTIFIER . condition_operator condition_values
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN

    DOUBLEQUAL      shift and go to state 85
    LESSTHAN        shift and go to state 86
    GREATERTHAN     shift and go to state 87

    condition_operator             shift and go to state 84

state 67

    (66) condition -> EXMARK . IDENTIFIER condition_operator condition_values

    IDENTIFIER      shift and go to state 88


state 68

    (67) condition -> BOOLEAN . condition_operator BOOLEAN
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN

    DOUBLEQUAL      shift and go to state 85
    LESSTHAN        shift and go to state 86
    GREATERTHAN     shift and go to state 87

    condition_operator             shift and go to state 89

state 69

    (68) condition -> number . condition_operator number
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN

    DOUBLEQUAL      shift and go to state 85
    LESSTHAN        shift and go to state 86
    GREATERTHAN     shift and go to state 87

    condition_operator             shift and go to state 90

state 70

    (69) condition -> STR . condition_operator STR
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN

    DOUBLEQUAL      shift and go to state 85
    LESSTHAN        shift and go to state 86
    GREATERTHAN     shift and go to state 87

    condition_operator             shift and go to state 91

state 71

    (10) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET . map_content RCURLYBRACKET SEMICOLON
    (24) map_content -> . map_pairs
    (25) map_content -> . empty
    (27) map_pairs -> . map_pair
    (28) map_pairs -> . map_pair COMMA map_pairs
    (23) empty -> .
    (26) map_pair -> . map_key COLON map_value
    (29) map_key -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    RCURLYBRACKET   reduce using rule 23 (empty -> .)
    INTEGER         shift and go to state 99
    FLOAT           shift and go to state 100
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    IDENTIFIER      shift and go to state 92

    map_content                    shift and go to state 93
    map_pairs                      shift and go to state 94
    empty                          shift and go to state 95
    map_pair                       shift and go to state 96
    map_key                        shift and go to state 97
    value                          shift and go to state 98

state 72

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN . LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 101


state 73

    (78) function_arguments_repeat -> function_argument COMMA . function_arguments_repeat
    (77) function_arguments_repeat -> . function_argument
    (78) function_arguments_repeat -> . function_argument COMMA function_arguments_repeat
    (75) function_argument -> . datatype IDENTIFIER
    (76) function_argument -> . empty
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (23) empty -> .
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    COMMA           reduce using rule 23 (empty -> .)
    RPAREN          reduce using rule 23 (empty -> .)
    LCURLYBRACKET   reduce using rule 23 (empty -> .)
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    function_argument              shift and go to state 49
    function_arguments_repeat      shift and go to state 102
    datatype                       shift and go to state 50
    empty                          shift and go to state 51
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 74

    (75) function_argument -> datatype IDENTIFIER .

    COMMA           reduce using rule 75 (function_argument -> datatype IDENTIFIER .)
    RPAREN          reduce using rule 75 (function_argument -> datatype IDENTIFIER .)
    LCURLYBRACKET   reduce using rule 75 (function_argument -> datatype IDENTIFIER .)


state 75

    (37) elifStatement -> ELSE LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (9) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 103
    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class_content                  shift and go to state 31
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 76

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat . optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (79) optFunction_argumentsExpression -> . LCURLYBRACKET optFunction_arguments RCURLYBRACKET
    (80) optFunction_argumentsExpression -> . empty
    (23) empty -> .

    LCURLYBRACKET   shift and go to state 105
    RPAREN          reduce using rule 23 (empty -> .)

    optFunction_argumentsExpression shift and go to state 104
    empty                          shift and go to state 106

state 77

    (86) operableTypes -> IDENTIFIER .
    (49) value -> IDENTIFIER .

    PLUS            reduce using rule 86 (operableTypes -> IDENTIFIER .)
    MINUS           reduce using rule 86 (operableTypes -> IDENTIFIER .)
    TIMES           reduce using rule 86 (operableTypes -> IDENTIFIER .)
    DIVISION        reduce using rule 86 (operableTypes -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (value -> IDENTIFIER .)


state 78

    (93) declarationExpression -> datatype IDENTIFIER EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 107


state 79

    (13) map_type_specified -> LESSTHAN datatype COMMA . datatype GREATERTHAN
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    datatype                       shift and go to state 108
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 80

    (35) ifStatement -> IF LPAREN conditions RPAREN . LCURLYBRACKET class_content_repeat RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 109


state 81

    (71) conditions -> condition condition_connector . conditions
    (70) conditions -> . condition
    (71) conditions -> . condition condition_connector conditions
    (65) condition -> . IDENTIFIER condition_operator condition_values
    (66) condition -> . EXMARK IDENTIFIER condition_operator condition_values
    (67) condition -> . BOOLEAN condition_operator BOOLEAN
    (68) condition -> . number condition_operator number
    (69) condition -> . STR condition_operator STR
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 66
    EXMARK          shift and go to state 67
    BOOLEAN         shift and go to state 68
    STR             shift and go to state 70
    FLOAT           shift and go to state 61
    INTEGER         shift and go to state 62

    condition                      shift and go to state 65
    conditions                     shift and go to state 110
    number                         shift and go to state 69

state 82

    (72) condition_connector -> AND .

    IDENTIFIER      reduce using rule 72 (condition_connector -> AND .)
    EXMARK          reduce using rule 72 (condition_connector -> AND .)
    BOOLEAN         reduce using rule 72 (condition_connector -> AND .)
    STR             reduce using rule 72 (condition_connector -> AND .)
    FLOAT           reduce using rule 72 (condition_connector -> AND .)
    INTEGER         reduce using rule 72 (condition_connector -> AND .)


state 83

    (73) condition_connector -> OR .

    IDENTIFIER      reduce using rule 73 (condition_connector -> OR .)
    EXMARK          reduce using rule 73 (condition_connector -> OR .)
    BOOLEAN         reduce using rule 73 (condition_connector -> OR .)
    STR             reduce using rule 73 (condition_connector -> OR .)
    FLOAT           reduce using rule 73 (condition_connector -> OR .)
    INTEGER         reduce using rule 73 (condition_connector -> OR .)


state 84

    (65) condition -> IDENTIFIER condition_operator . condition_values
    (56) condition_values -> . negation_values
    (57) condition_values -> . INTEGER
    (58) condition_values -> . FLOAT
    (59) condition_values -> . STR
    (54) negation_values -> . deniable_values
    (55) negation_values -> . EXMARK deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    INTEGER         shift and go to state 114
    FLOAT           shift and go to state 115
    STR             shift and go to state 116
    EXMARK          shift and go to state 118
    IDENTIFIER      shift and go to state 111
    BOOLEAN         shift and go to state 119

    condition_values               shift and go to state 112
    negation_values                shift and go to state 113
    deniable_values                shift and go to state 117

state 85

    (60) condition_operator -> DOUBLEQUAL .

    INTEGER         reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    FLOAT           reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    STR             reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    EXMARK          reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    IDENTIFIER      reduce using rule 60 (condition_operator -> DOUBLEQUAL .)
    BOOLEAN         reduce using rule 60 (condition_operator -> DOUBLEQUAL .)


state 86

    (61) condition_operator -> LESSTHAN .

    INTEGER         reduce using rule 61 (condition_operator -> LESSTHAN .)
    FLOAT           reduce using rule 61 (condition_operator -> LESSTHAN .)
    STR             reduce using rule 61 (condition_operator -> LESSTHAN .)
    EXMARK          reduce using rule 61 (condition_operator -> LESSTHAN .)
    IDENTIFIER      reduce using rule 61 (condition_operator -> LESSTHAN .)
    BOOLEAN         reduce using rule 61 (condition_operator -> LESSTHAN .)


state 87

    (62) condition_operator -> GREATERTHAN .

    INTEGER         reduce using rule 62 (condition_operator -> GREATERTHAN .)
    FLOAT           reduce using rule 62 (condition_operator -> GREATERTHAN .)
    STR             reduce using rule 62 (condition_operator -> GREATERTHAN .)
    EXMARK          reduce using rule 62 (condition_operator -> GREATERTHAN .)
    IDENTIFIER      reduce using rule 62 (condition_operator -> GREATERTHAN .)
    BOOLEAN         reduce using rule 62 (condition_operator -> GREATERTHAN .)


state 88

    (66) condition -> EXMARK IDENTIFIER . condition_operator condition_values
    (60) condition_operator -> . DOUBLEQUAL
    (61) condition_operator -> . LESSTHAN
    (62) condition_operator -> . GREATERTHAN

    DOUBLEQUAL      shift and go to state 85
    LESSTHAN        shift and go to state 86
    GREATERTHAN     shift and go to state 87

    condition_operator             shift and go to state 120

state 89

    (67) condition -> BOOLEAN condition_operator . BOOLEAN

    BOOLEAN         shift and go to state 121


state 90

    (68) condition -> number condition_operator . number
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    FLOAT           shift and go to state 61
    INTEGER         shift and go to state 62

    number                         shift and go to state 122

state 91

    (69) condition -> STR condition_operator . STR

    STR             shift and go to state 123


state 92

    (49) value -> IDENTIFIER .

    COLON           reduce using rule 49 (value -> IDENTIFIER .)
    COMMA           reduce using rule 49 (value -> IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 49 (value -> IDENTIFIER .)


state 93

    (10) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content . RCURLYBRACKET SEMICOLON

    RCURLYBRACKET   shift and go to state 124


state 94

    (24) map_content -> map_pairs .

    RCURLYBRACKET   reduce using rule 24 (map_content -> map_pairs .)


state 95

    (25) map_content -> empty .

    RCURLYBRACKET   reduce using rule 25 (map_content -> empty .)


state 96

    (27) map_pairs -> map_pair .
    (28) map_pairs -> map_pair . COMMA map_pairs

    RCURLYBRACKET   reduce using rule 27 (map_pairs -> map_pair .)
    COMMA           shift and go to state 125


state 97

    (26) map_pair -> map_key . COLON map_value

    COLON           shift and go to state 126


state 98

    (29) map_key -> value .

    COLON           reduce using rule 29 (map_key -> value .)


state 99

    (45) value -> INTEGER .

    COLON           reduce using rule 45 (value -> INTEGER .)
    COMMA           reduce using rule 45 (value -> INTEGER .)
    RCURLYBRACKET   reduce using rule 45 (value -> INTEGER .)


state 100

    (46) value -> FLOAT .

    COLON           reduce using rule 46 (value -> FLOAT .)
    COMMA           reduce using rule 46 (value -> FLOAT .)
    RCURLYBRACKET   reduce using rule 46 (value -> FLOAT .)


state 101

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET . RETURN expression SEMICOLON RCURLYBRACKET

    RETURN          shift and go to state 127


state 102

    (78) function_arguments_repeat -> function_argument COMMA function_arguments_repeat .

    RPAREN          reduce using rule 78 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)
    LCURLYBRACKET   reduce using rule 78 (function_arguments_repeat -> function_argument COMMA function_arguments_repeat .)


state 103

    (37) elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 37 (elifStatement -> ELSE LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 104

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression . RPAREN EQUAL GREATERTHAN expression SEMICOLON

    RPAREN          shift and go to state 128


state 105

    (79) optFunction_argumentsExpression -> LCURLYBRACKET . optFunction_arguments RCURLYBRACKET
    (82) optFunction_arguments -> . optFunction_argument
    (83) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (81) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 131

    optFunction_arguments          shift and go to state 129
    optFunction_argument           shift and go to state 130

state 106

    (80) optFunction_argumentsExpression -> empty .

    RPAREN          reduce using rule 80 (optFunction_argumentsExpression -> empty .)


state 107

    (93) declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .

    IDENTIFIER      reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    MAP             reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STR             reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOLEAN         reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    INT             reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DOUBLE          reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    DYNAMIC         reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    VOID            reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 93 (declarationExpression -> datatype IDENTIFIER EQUAL expression SEMICOLON .)


state 108

    (13) map_type_specified -> LESSTHAN datatype COMMA datatype . GREATERTHAN

    GREATERTHAN     shift and go to state 132


state 109

    (35) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET . class_content_repeat RCURLYBRACKET
    (8) class_content_repeat -> . class_content
    (9) class_content_repeat -> . class_content_repeat class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class_content_repeat           shift and go to state 133
    class_content                  shift and go to state 3
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 110

    (71) conditions -> condition condition_connector conditions .

    RPAREN          reduce using rule 71 (conditions -> condition condition_connector conditions .)


state 111

    (52) deniable_values -> IDENTIFIER .

    AND             reduce using rule 52 (deniable_values -> IDENTIFIER .)
    OR              reduce using rule 52 (deniable_values -> IDENTIFIER .)
    RPAREN          reduce using rule 52 (deniable_values -> IDENTIFIER .)


state 112

    (65) condition -> IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 65 (condition -> IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 65 (condition -> IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 65 (condition -> IDENTIFIER condition_operator condition_values .)


state 113

    (56) condition_values -> negation_values .

    AND             reduce using rule 56 (condition_values -> negation_values .)
    OR              reduce using rule 56 (condition_values -> negation_values .)
    RPAREN          reduce using rule 56 (condition_values -> negation_values .)


state 114

    (57) condition_values -> INTEGER .

    AND             reduce using rule 57 (condition_values -> INTEGER .)
    OR              reduce using rule 57 (condition_values -> INTEGER .)
    RPAREN          reduce using rule 57 (condition_values -> INTEGER .)


state 115

    (58) condition_values -> FLOAT .

    AND             reduce using rule 58 (condition_values -> FLOAT .)
    OR              reduce using rule 58 (condition_values -> FLOAT .)
    RPAREN          reduce using rule 58 (condition_values -> FLOAT .)


state 116

    (59) condition_values -> STR .

    AND             reduce using rule 59 (condition_values -> STR .)
    OR              reduce using rule 59 (condition_values -> STR .)
    RPAREN          reduce using rule 59 (condition_values -> STR .)


state 117

    (54) negation_values -> deniable_values .

    AND             reduce using rule 54 (negation_values -> deniable_values .)
    OR              reduce using rule 54 (negation_values -> deniable_values .)
    RPAREN          reduce using rule 54 (negation_values -> deniable_values .)


state 118

    (55) negation_values -> EXMARK . deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    IDENTIFIER      shift and go to state 111
    BOOLEAN         shift and go to state 119

    deniable_values                shift and go to state 134

state 119

    (53) deniable_values -> BOOLEAN .

    AND             reduce using rule 53 (deniable_values -> BOOLEAN .)
    OR              reduce using rule 53 (deniable_values -> BOOLEAN .)
    RPAREN          reduce using rule 53 (deniable_values -> BOOLEAN .)


state 120

    (66) condition -> EXMARK IDENTIFIER condition_operator . condition_values
    (56) condition_values -> . negation_values
    (57) condition_values -> . INTEGER
    (58) condition_values -> . FLOAT
    (59) condition_values -> . STR
    (54) negation_values -> . deniable_values
    (55) negation_values -> . EXMARK deniable_values
    (52) deniable_values -> . IDENTIFIER
    (53) deniable_values -> . BOOLEAN

    INTEGER         shift and go to state 114
    FLOAT           shift and go to state 115
    STR             shift and go to state 116
    EXMARK          shift and go to state 118
    IDENTIFIER      shift and go to state 111
    BOOLEAN         shift and go to state 119

    condition_values               shift and go to state 135
    negation_values                shift and go to state 113
    deniable_values                shift and go to state 117

state 121

    (67) condition -> BOOLEAN condition_operator BOOLEAN .

    AND             reduce using rule 67 (condition -> BOOLEAN condition_operator BOOLEAN .)
    OR              reduce using rule 67 (condition -> BOOLEAN condition_operator BOOLEAN .)
    RPAREN          reduce using rule 67 (condition -> BOOLEAN condition_operator BOOLEAN .)


state 122

    (68) condition -> number condition_operator number .

    AND             reduce using rule 68 (condition -> number condition_operator number .)
    OR              reduce using rule 68 (condition -> number condition_operator number .)
    RPAREN          reduce using rule 68 (condition -> number condition_operator number .)


state 123

    (69) condition -> STR condition_operator STR .

    AND             reduce using rule 69 (condition -> STR condition_operator STR .)
    OR              reduce using rule 69 (condition -> STR condition_operator STR .)
    RPAREN          reduce using rule 69 (condition -> STR condition_operator STR .)


state 124

    (10) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 136


state 125

    (28) map_pairs -> map_pair COMMA . map_pairs
    (27) map_pairs -> . map_pair
    (28) map_pairs -> . map_pair COMMA map_pairs
    (26) map_pair -> . map_key COLON map_value
    (29) map_key -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    INTEGER         shift and go to state 99
    FLOAT           shift and go to state 100
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    IDENTIFIER      shift and go to state 92

    map_pair                       shift and go to state 96
    map_pairs                      shift and go to state 137
    map_key                        shift and go to state 97
    value                          shift and go to state 98

state 126

    (26) map_pair -> map_key COLON . map_value
    (30) map_value -> . value
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER

    INTEGER         shift and go to state 99
    FLOAT           shift and go to state 100
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    IDENTIFIER      shift and go to state 92

    map_value                      shift and go to state 138
    value                          shift and go to state 139

state 127

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN . expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 77
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24

    expression                     shift and go to state 140
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    number                         shift and go to state 20

state 128

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN . EQUAL GREATERTHAN expression SEMICOLON

    EQUAL           shift and go to state 141


state 129

    (79) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 142


state 130

    (82) optFunction_arguments -> optFunction_argument .
    (83) optFunction_arguments -> optFunction_argument . COMMA optFunction_arguments

    RCURLYBRACKET   reduce using rule 82 (optFunction_arguments -> optFunction_argument .)
    COMMA           shift and go to state 143


state 131

    (81) optFunction_argument -> REQUIRED . datatype IDENTIFIER
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified

    VAR             shift and go to state 19
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30
    MAP             shift and go to state 16

    datatype                       shift and go to state 144
    returnType                     shift and go to state 18
    map_identifier                 shift and go to state 52

state 132

    (13) map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .

    IDENTIFIER      reduce using rule 13 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    COMMA           reduce using rule 13 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)
    GREATERTHAN     reduce using rule 13 (map_type_specified -> LESSTHAN datatype COMMA datatype GREATERTHAN .)


state 133

    (35) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat . RCURLYBRACKET
    (9) class_content_repeat -> class_content_repeat . class_content
    (2) class_content -> . map
    (3) class_content -> . ifElseStatement
    (4) class_content -> . function_lambda
    (5) class_content -> . declarationExpression
    (6) class_content -> . inferedReturnFunction
    (7) class_content -> . expression SEMICOLON
    (10) map -> . map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON
    (31) ifElseStatement -> . ifStatement
    (32) ifElseStatement -> . ifStatement elifStatement_repeat
    (74) function_lambda -> . datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON
    (92) declarationExpression -> . datatype IDENTIFIER SEMICOLON
    (93) declarationExpression -> . datatype IDENTIFIER EQUAL expression SEMICOLON
    (44) inferedReturnFunction -> . IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (11) map_identifier -> . MAP
    (12) map_identifier -> . MAP map_type_specified
    (35) ifStatement -> . IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET
    (14) datatype -> . returnType
    (15) datatype -> . VAR
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (16) returnType -> . INT
    (17) returnType -> . STRING
    (18) returnType -> . BOOL
    (19) returnType -> . DOUBLE
    (20) returnType -> . DYNAMIC
    (21) returnType -> . VOID
    (22) returnType -> . map_identifier
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    RCURLYBRACKET   shift and go to state 145
    IDENTIFIER      shift and go to state 11
    MAP             shift and go to state 16
    IF              shift and go to state 17
    VAR             shift and go to state 19
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24
    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    DOUBLE          shift and go to state 28
    DYNAMIC         shift and go to state 29
    VOID            shift and go to state 30

    class_content                  shift and go to state 31
    map                            shift and go to state 4
    ifElseStatement                shift and go to state 5
    function_lambda                shift and go to state 6
    declarationExpression          shift and go to state 7
    inferedReturnFunction          shift and go to state 8
    expression                     shift and go to state 9
    map_identifier                 shift and go to state 10
    ifStatement                    shift and go to state 12
    datatype                       shift and go to state 13
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    returnType                     shift and go to state 18
    number                         shift and go to state 20

state 134

    (55) negation_values -> EXMARK deniable_values .

    AND             reduce using rule 55 (negation_values -> EXMARK deniable_values .)
    OR              reduce using rule 55 (negation_values -> EXMARK deniable_values .)
    RPAREN          reduce using rule 55 (negation_values -> EXMARK deniable_values .)


state 135

    (66) condition -> EXMARK IDENTIFIER condition_operator condition_values .

    AND             reduce using rule 66 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    OR              reduce using rule 66 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)
    RPAREN          reduce using rule 66 (condition -> EXMARK IDENTIFIER condition_operator condition_values .)


state 136

    (10) map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .

    IDENTIFIER      reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    MAP             reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    IF              reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VAR             reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INTEGER         reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    FLOAT           reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STR             reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    INT             reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    STRING          reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    BOOL            reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    DYNAMIC         reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    VOID            reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    $end            reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)
    RCURLYBRACKET   reduce using rule 10 (map -> map_identifier IDENTIFIER EQUAL LCURLYBRACKET map_content RCURLYBRACKET SEMICOLON .)


state 137

    (28) map_pairs -> map_pair COMMA map_pairs .

    RCURLYBRACKET   reduce using rule 28 (map_pairs -> map_pair COMMA map_pairs .)


state 138

    (26) map_pair -> map_key COLON map_value .

    COMMA           reduce using rule 26 (map_pair -> map_key COLON map_value .)
    RCURLYBRACKET   reduce using rule 26 (map_pair -> map_key COLON map_value .)


state 139

    (30) map_value -> value .

    COMMA           reduce using rule 30 (map_value -> value .)
    RCURLYBRACKET   reduce using rule 30 (map_value -> value .)


state 140

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression . SEMICOLON RCURLYBRACKET

    SEMICOLON       shift and go to state 146


state 141

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL . GREATERTHAN expression SEMICOLON

    GREATERTHAN     shift and go to state 147


state 142

    (79) optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .

    RPAREN          reduce using rule 79 (optFunction_argumentsExpression -> LCURLYBRACKET optFunction_arguments RCURLYBRACKET .)


state 143

    (83) optFunction_arguments -> optFunction_argument COMMA . optFunction_arguments
    (82) optFunction_arguments -> . optFunction_argument
    (83) optFunction_arguments -> . optFunction_argument COMMA optFunction_arguments
    (81) optFunction_argument -> . REQUIRED datatype IDENTIFIER

    REQUIRED        shift and go to state 131

    optFunction_argument           shift and go to state 130
    optFunction_arguments          shift and go to state 148

state 144

    (81) optFunction_argument -> REQUIRED datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 149


state 145

    (35) ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .

    ELSE            reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IDENTIFIER      reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    MAP             reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    IF              reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VAR             reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INTEGER         reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    FLOAT           reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STR             reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOLEAN         reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    INT             reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    STRING          reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    BOOL            reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DOUBLE          reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    DYNAMIC         reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    VOID            reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    $end            reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 35 (ifStatement -> IF LPAREN conditions RPAREN LCURLYBRACKET class_content_repeat RCURLYBRACKET .)


state 146

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 150


state 147

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN . expression SEMICOLON
    (84) expression -> . operableTypes operatorExpression operableTypes
    (85) expression -> . value
    (86) operableTypes -> . IDENTIFIER
    (87) operableTypes -> . number
    (45) value -> . INTEGER
    (46) value -> . FLOAT
    (47) value -> . STR
    (48) value -> . BOOLEAN
    (49) value -> . IDENTIFIER
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    IDENTIFIER      shift and go to state 77
    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    STR             shift and go to state 23
    BOOLEAN         shift and go to state 24

    expression                     shift and go to state 151
    operableTypes                  shift and go to state 14
    value                          shift and go to state 15
    number                         shift and go to state 20

state 148

    (83) optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .

    RCURLYBRACKET   reduce using rule 83 (optFunction_arguments -> optFunction_argument COMMA optFunction_arguments .)


state 149

    (81) optFunction_argument -> REQUIRED datatype IDENTIFIER .

    COMMA           reduce using rule 81 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)
    RCURLYBRACKET   reduce using rule 81 (optFunction_argument -> REQUIRED datatype IDENTIFIER .)


state 150

    (44) inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .

    IDENTIFIER      reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    MAP             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    IF              reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VAR             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INTEGER         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    FLOAT           reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STR             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOLEAN         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    INT             reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    STRING          reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    BOOL            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DOUBLE          reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    DYNAMIC         reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    VOID            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    $end            reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 44 (inferedReturnFunction -> IDENTIFIER LPAREN function_arguments_repeat RPAREN LCURLYBRACKET RETURN expression SEMICOLON RCURLYBRACKET .)


state 151

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression . SEMICOLON

    SEMICOLON       shift and go to state 152


state 152

    (74) function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .

    IDENTIFIER      reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    MAP             reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    IF              reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VAR             reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INTEGER         reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    FLOAT           reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STR             reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOLEAN         reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    INT             reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    STRING          reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    BOOL            reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DOUBLE          reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    DYNAMIC         reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    VOID            reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    $end            reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)
    RCURLYBRACKET   reduce using rule 74 (function_lambda -> datatype IDENTIFIER LPAREN function_arguments_repeat optFunction_argumentsExpression RPAREN EQUAL GREATERTHAN expression SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 10 resolved as shift
